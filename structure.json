{
  "components.json": "{\n  \"$schema\": \"https://ui.shadcn.com/schema.json\",\n  \"style\": \"default\",\n  \"rsc\": true,\n  \"tsx\": true,\n  \"tailwind\": {\n    \"config\": \"tailwind.config.ts\",\n    \"css\": \"src/app/globals.css\",\n    \"baseColor\": \"neutral\",\n    \"cssVariables\": true,\n    \"prefix\": \"\"\n  },\n  \"aliases\": {\n    \"components\": \"@/components\",\n    \"utils\": \"@/lib/utils\",\n    \"ui\": \"@/components/ui\",\n    \"lib\": \"@/lib\",\n    \"hooks\": \"@/hooks\"\n  },\n  \"iconLibrary\": \"lucide\"\n}",
  "next.config.mjs": "/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  eslint: {\n    ignoreDuringBuilds: true,\n  },\n  typescript: {\n    ignoreBuildErrors: true,\n  },\n  images: {\n    unoptimized: false,\n    formats: ['image/webp', 'image/avif'],\n    deviceSizes: [640, 750, 828, 1080, 1200, 1920, 2048, 3840],\n    imageSizes: [16, 32, 48, 64, 96, 128, 256, 384],\n    minimumCacheTTL: 60,\n    dangerouslyAllowSVG: true,\n    contentSecurityPolicy: \"default-src 'self'; script-src 'none'; sandbox;\",\n    remotePatterns: [\n      {\n        protocol: 'https',\n        hostname: 'hvqxpztrzzduvxiisssg.supabase.co',\n        port: '',\n        pathname: '/storage/v1/object/sign/**',\n      },\n      {\n        protocol: 'https',\n        hostname: 'hvqxpztrzzduvxiisssg.supabase.co',\n        port: '',\n        pathname: '/storage/v1/object/public/**',\n      },\n      {\n        protocol: 'https',\n        hostname: '*.supabase.co',\n        port: '',\n        pathname: '/storage/v1/object/sign/**',\n      },\n      {\n        protocol: 'https',\n        hostname: '*.supabase.co',\n        port: '',\n        pathname: '/storage/v1/object/public/**',\n      },\n    ],\n  },\n  experimental: {\n    optimizeCss: true,\n  },\n  compress: true,\n  poweredByHeader: false,\n  generateEtags: true,\n  reactStrictMode: true,\n  compiler: {\n    removeConsole: process.env.NODE_ENV === 'production',\n  },\n  headers: async () => {\n    return [\n      {\n        source: '/(.*)',\n        headers: [\n          {\n            key: 'X-Content-Type-Options',\n            value: 'nosniff',\n          },\n          {\n            key: 'X-Frame-Options',\n            value: 'DENY',\n          },\n          {\n            key: 'X-XSS-Protection',\n            value: '1; mode=block',\n          },\n          {\n            key: 'Referrer-Policy',\n            value: 'origin-when-cross-origin',\n          },\n        ],\n      },\n      {\n        source: '/api/(.*)',\n        headers: [\n          {\n            key: 'Cache-Control',\n            value: 'no-store, max-age=0',\n          },\n        ],\n      },\n    ]\n  },\n}\n\nexport default nextConfig\n",
  "package.json": "{\n  \"name\": \"wine-store\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"scripts\": {\n    \"build\": \"next build\",\n    \"dev\": \"next dev\",\n    \"lint\": \"next lint\",\n    \"start\": \"next start\",\n    \"check-supabase\": \"node scripts/check-supabase-config.js\"\n  },\n  \"dependencies\": {\n    \"@hookform/resolvers\": \"^3.9.1\",\n    \"@lucide/lab\": \"^0.1.2\",\n    \"@radix-ui/react-accordion\": \"1.2.2\",\n    \"@radix-ui/react-alert-dialog\": \"1.1.4\",\n    \"@radix-ui/react-aspect-ratio\": \"1.1.1\",\n    \"@radix-ui/react-avatar\": \"1.1.2\",\n    \"@radix-ui/react-checkbox\": \"1.1.3\",\n    \"@radix-ui/react-collapsible\": \"1.1.2\",\n    \"@radix-ui/react-context-menu\": \"2.2.4\",\n    \"@radix-ui/react-dialog\": \"^1.1.4\",\n    \"@radix-ui/react-dropdown-menu\": \"2.1.4\",\n    \"@radix-ui/react-hover-card\": \"1.1.4\",\n    \"@radix-ui/react-label\": \"2.1.1\",\n    \"@radix-ui/react-menubar\": \"1.1.4\",\n    \"@radix-ui/react-navigation-menu\": \"1.2.3\",\n    \"@radix-ui/react-popover\": \"1.1.4\",\n    \"@radix-ui/react-progress\": \"1.1.1\",\n    \"@radix-ui/react-radio-group\": \"1.2.2\",\n    \"@radix-ui/react-scroll-area\": \"1.2.2\",\n    \"@radix-ui/react-select\": \"2.1.4\",\n    \"@radix-ui/react-separator\": \"1.1.1\",\n    \"@radix-ui/react-slider\": \"1.2.2\",\n    \"@radix-ui/react-slot\": \"^1.1.1\",\n    \"@radix-ui/react-switch\": \"1.1.2\",\n    \"@radix-ui/react-tabs\": \"1.1.2\",\n    \"@radix-ui/react-toast\": \"1.2.4\",\n    \"@radix-ui/react-toggle\": \"1.1.1\",\n    \"@radix-ui/react-toggle-group\": \"1.1.1\",\n    \"@radix-ui/react-tooltip\": \"1.1.6\",\n    \"@supabase/supabase-js\": \"^2.50.2\",\n    \"@vercel/analytics\": \"^1.5.0\",\n    \"@vercel/speed-insights\": \"^1.2.0\",\n    \"autoprefixer\": \"^10.4.20\",\n    \"class-variance-authority\": \"^0.7.1\",\n    \"clsx\": \"^2.1.1\",\n    \"cmdk\": \"^1.0.4\",\n    \"critters\": \"^0.0.23\",\n    \"date-fns\": \"^3.6.0\",\n    \"embla-carousel-react\": \"8.5.1\",\n    \"input-otp\": \"1.4.1\",\n    \"lucide-react\": \"^0.454.0\",\n    \"motion\": \"^12.23.6\",\n    \"next\": \"15.2.4\",\n    \"next-themes\": \"^0.4.4\",\n    \"react\": \"^19\",\n    \"react-day-picker\": \"^9.4.3\",\n    \"react-dom\": \"^19\",\n    \"react-hook-form\": \"^7.54.1\",\n    \"react-resizable-panels\": \"^2.1.7\",\n    \"recharts\": \"^2.15.0\",\n    \"sonner\": \"^1.7.1\",\n    \"tailwind-merge\": \"^2.5.5\",\n    \"tailwindcss-animate\": \"^1.0.7\",\n    \"vaul\": \"^1.0.0\",\n    \"xlsx\": \"^0.18.5\",\n    \"zod\": \"^3.24.1\"\n  },\n  \"devDependencies\": {\n    \"@types/node\": \"^22\",\n    \"@types/react\": \"^19\",\n    \"@types/react-dom\": \"^19\",\n    \"postcss\": \"^8.5\",\n    \"tailwindcss\": \"^3.4.17\",\n    \"typescript\": \"^5\"\n  }\n}\n",
  "public": {
    "logo.svg": "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" width=\"512\" height=\"512\">\n  <path fill=\"#fdcd57\"\n    d=\"M 76.7 2.8 q 189.9 0.4 382.9 0 C 463 2.7 466 4.8 467.2 7.8 q 18.5 51.9 28.5 106.6 q 7.5 42.4 9.9 67.4 q 3.6 34.9 0 68.5 q -10.7 103.5 -80.3 178.5 q -28.5 30.7 -59.7 48.9 q -48.2 27.7 -103.3 29.5 q -65.3 1.6 -125.5 -37.5 q -54.6 -35.2 -89 -97.4 q -48.7 -87.9 -38.8 -187.3 q 6.4 -62.9 24.9 -134.5 q 6.8 -26.9 15.4 -45.1 C 49.8 4.4 50.9 3.7 52.1 3.5 q 7.1 -0.7 24.5 -0.7 m 331.2 273.3 q 43.5 -40.1 78.7 1.1 q 3.2 3.8 3.9 -1.1 q 4.3 -20.5 5.5 -40.6 q 1.2 -17.1 -0.9 -40.6 q -7.1 -91.7 -36.4 -179.2 C 458.1 13.9 456.2 12.7 454.1 12.7 h -393.7 C 58.3 12.7 56.6 13.9 55.7 15.7 q -26.9 82.7 -36.1 168.3 q -5.9 55.7 8.3 111.1 C 28.5 296.5 29.9 297.7 31.5 297.7 h 61.3 c 1.2 0 2.3 -0.4 3.2 -1.1 s 1.2 -1.8 1.2 -3 v -26.1 c 0 -1.8 0.9 -3.8 2 -5.4 l 25.8 -23.9 C 126.6 236.7 129.2 236.7 130.8 238.3 l 23.3 21.9 c 2.8 2.3 4.3 6.1 4.3 9.9 v 25.4 C 158.4 296 158.7 296.5 159 296.8 C 159.4 297.2 160 297.4 160.5 297.4 q 40 1.1 79.5 -0.4 q 8.7 -0.4 13.9 -2.7 q 6.8 -3.4 11.4 -8.8 q 19 -20.8 38 -41.3 q 22.6 -24.3 50.3 -15.1 q 12.3 3.8 24.9 17.4 q 12.3 13.3 24.5 28.8 c 1.2 1.6 3.2 1.8 4.8 0.7 m -279.3 -22.3 c -0.4 -0.7 -1.6 -0.7 -2.3 -0.7 s -1.6 0.4 -2 1.1 q -3.9 6.8 -9.1 9.5 C 111.9 265.6 110 268.8 109.9 272.4 v 30 q 0 7.9 -8.3 7.9 h -66.1 c -1.2 0 -2 1.1 -2 2.3 q 1.2 9.9 9.1 9 h 3.9 q 21.3 0.4 42.7 -0.4 q 27.2 -0.7 43.2 -0.4 q 99.7 1.1 199.8 -0.4 l 10.3 0.4 q 8.3 0.4 16.2 -1.8 t 17 -11 l 19 -18.2 C 395.8 288.8 395.9 287.2 395.2 286.1 q -14.6 -18.2 -28.5 -32.9 q -8.3 -9 -15.4 -11.7 q -10.3 -3.8 -20.6 -0.7 q -8.3 2.7 -21 16.3 q -10.3 10.6 -20.1 21.6 q -18.3 19.8 -20.6 21.6 q -15.1 11 -37.2 10.2 q -22.6 -1.1 -73.2 0.7 q -14.6 0.4 -13.5 -11.7 l 0.4 -6.8 v -19.4 q 0 -3.4 -2.3 -5.7 z m 355 36.3 q -5.9 -3 -10.3 -7.9 q -13.9 -16 -29.7 -13.7 q -9.4 1.6 -22.6 14 q -17.4 17.1 -35.2 33.8 q -10.3 9.9 -17.8 12.9 q -10.7 4.5 -22.6 4.5 h -300.6 C 44.1 333.7 43.5 334 43.1 334.3 C 42.8 334.7 42.5 335.2 42.7 335.7 q -0.4 12.2 9.9 10.6 q 9.4 -1.1 10.3 -1.1 h 402.8 c 1.6 0 3.2 -1.1 3.9 -2.7 q 9.4 -20.1 15.4 -42.1 q 0.9 -3 0.4 -5.4 q -0.4 -4.2 -2 -4.9 m -430 69 l 4.3 9 C 58.5 369 59.6 369.4 60.8 369.4 q 88.2 0.4 176.9 0.4 l 3.6 0.4 q 8 0.4 5.5 -10.6 c 0 -1.1 -1.2 -1.8 -2.3 -1.8 h -190.4 C 53.7 357.7 53.2 358 53.2 358.4 z m 222 0 c 0 -0.4 -0.4 -0.7 -0.4 -1.1 c -0.4 -0.4 -1.2 -0.4 -1.6 -0.4 h -11 c -0.9 0 -1.6 0.7 -1.6 1.6 v 135.3 c 0 0.4 0 0.7 0.4 1.1 s 0.9 0.4 1.2 0.4 h 11 c 0.4 0 1.2 0 1.6 -0.4 c 0 -0.4 0.4 -0.7 0.4 -1.1 z m 27.2 -0.7 C 302.4 358 302.2 357.7 301.7 357.7 h -12.6 c -0.4 0 -1.2 0.4 -1.2 0.7 V 491.8 c 0 0.4 0 0.7 0.4 0.7 c 0 0.4 0.4 0.4 0.9 0.4 h 12.6 c 0.4 0 0.9 -0.7 0.9 -1.1 z m 25.8 0.4 c 0 -0.4 -0.4 -1.1 -0.9 -1.1 h -10.7 q -1.2 0 -1.2 1.1 v 126.2 q 0 1.1 1.2 1.1 h 10.7 c 0.4 0 0.9 -0.7 0.9 -1.1 z m 13.9 2.3 v 113.3 c 0 0.4 0.4 0.7 0.4 1.1 c 0.4 0.4 1.2 0.4 1.6 0.4 q 5.1 -0.7 8.7 -4.2 C 353.7 470.9 354.3 469.7 354.3 468.4 v -107.3 C 354.5 359.8 353.9 358.7 352.7 358.1 q -4.3 -2.3 -9.1 0 C 342.7 358.7 342.1 359.8 342.1 361.1 m 38 28.8 q 1.2 -18.5 0.4 -30 c 0 -1.1 -1.2 -2.3 -2.3 -2.3 q -12.6 -3.4 -11.4 6.5 q 1.6 9 1.6 9.5 q 0.4 43.2 -0.9 86.1 c 0 0.4 0.4 0.7 0.4 1.1 c 0.4 0.4 1.2 0.4 1.6 0.4 q 4.8 -0.7 8 -3.8 q 2.8 -3 2.3 -9 q 0 -48.9 0.4 -58.4 m 25.4 42.8 q 1.2 -1.1 1.2 -3.4 v -69.1 C 406.6 359.1 406 358.1 405 357.6 q -6.4 -2.3 -9.1 0.7 q -2 2.3 -2 7.9 v 73.5 q 0 6.1 3.6 1.8 z m 22.2 -21.9 q 4.3 -3.8 4.3 -7.2 q 1.2 -9.9 0 -42.8 c 0 -1.1 -0.4 -2.3 -1.6 -2.7 q -4.3 -1.6 -9.1 -0.4 c -1.2 0.4 -1.6 1.6 -1.6 2.7 v 55.7 c 0 0.4 0.4 1.1 0.9 1.1 q 0.6 0.6 1.2 0 q 1.6 -0.7 2.8 -2.3 q 2.8 -3.4 3.2 -4.2 m 20.6 -27.3 l 13 -23.5 v -1.1 c -0.4 -0.4 -0.9 -0.7 -1.2 -0.7 q -5.9 -1.6 -12.3 -0.4 c -1.2 0.4 -2 1.1 -2 2.3 v 22.8 q -0.4 5.4 2.3 0.7 m -370.3 8.3 q 78.7 1.1 157.9 0.7 l 5.9 0.4 q 8 0.7 5.9 -7.6 C 247.2 383.6 245.5 382.3 243.6 382.5 l -174.4 0.4 c -0.4 0 -0.9 0.4 -1.2 0.4 c -0.4 0.4 -0.4 1.1 -0.4 1.6 q 1.2 3 3.6 4.9 q 2 2.3 6.8 2.3 m 6.4 15.5 l 7.5 8.8 C 92.5 416.9 93.7 417.2 94.8 417.2 h 149.5 C 245.7 417.2 246.8 416.5 247.2 415.4 q 1.2 -4.2 0 -8.8 c -0.4 -1.1 -1.6 -1.6 -2.8 -1.6 H 85.7 q -3.9 0 -1.6 2.3 m 25.8 23.2 q -5.5 0 -1.6 3 l 8 6.5 q 1.2 1.1 3.6 1.1 l 124.2 -0.4 c 1.6 0 2.8 -0.7 3.2 -1.8 q 1.6 -4.2 -0.9 -7.6 C 245.8 430.4 244.8 429.8 243.6 429.8 z m 28.1 23.5 q -8 0 -1.2 3.8 q 3.6 1.8 7.5 3.8 q 3.6 1.8 7.5 1.8 q 45.5 0.4 93 0.4 c 1.2 0 2.3 -1.1 2.3 -2.3 q 2.3 -9 -5.1 -8.8 q -2.8 0.4 -3.2 0.4 q -48.7 0.7 -100.8 0.7 m 42.7 21.9 q -2.8 -0.4 -5.1 0 q -6.4 0.7 -0.9 3 q 33.2 14.4 69.3 16.7 c 0.9 0 1.6 0 2 -0.4 s 0.9 -1.1 0.9 -1.6 l -0.4 -14.8 c 0 -0.4 0 -1.1 -0.4 -1.6 s -1.2 -0.7 -2 -0.7 q -31.3 0.4 -58.2 0 q -1.6 0 -5.1 -0.7\" />\n</svg>",
    "manifest.json": "{\r\n  \"name\": \"Los Vinos - Tienda Online de Vinos\",\r\n  \"short_name\": \"Los Vinos\",\r\n  \"description\": \"Descubre los mejores vinos internacionales en nuestra tienda online\",\r\n  \"start_url\": \"/\",\r\n  \"display\": \"standalone\",\r\n  \"background_color\": \"#ffffff\",\r\n  \"theme_color\": \"#722f37\",\r\n  \"orientation\": \"portrait-primary\",\r\n  \"scope\": \"/\",\r\n  \"lang\": \"es\",\r\n  \"categories\": [\"food\", \"shopping\"],\r\n  \"icons\": [\r\n    {\r\n      \"src\": \"/logo.svg\",\r\n      \"sizes\": \"16x16\",\r\n      \"type\": \"image/png\"\r\n    },\r\n    {\r\n      \"src\": \"/logo.svg\",\r\n      \"sizes\": \"32x32\",\r\n      \"type\": \"image/png\"\r\n    },\r\n    {\r\n      \"src\": \"/logo.svg\",\r\n      \"sizes\": \"180x180\",\r\n      \"type\": \"image/png\"\r\n    },\r\n    {\r\n      \"src\": \"/logo.svg\",\r\n      \"sizes\": \"192x192\",\r\n      \"type\": \"image/png\"\r\n    },\r\n    {\r\n      \"src\": \"/logo.svg\",\r\n      \"sizes\": \"512x512\",\r\n      \"type\": \"image/png\"\r\n    }\r\n  ],\r\n  \"screenshots\": [\r\n    {\r\n      \"src\": \"/screenshot-desktop.png\",\r\n      \"sizes\": \"1280x720\",\r\n      \"type\": \"image/png\",\r\n      \"form_factor\": \"wide\"\r\n    },\r\n    {\r\n      \"src\": \"/screenshot-mobile.png\",\r\n      \"sizes\": \"390x844\",\r\n      \"type\": \"image/png\",\r\n      \"form_factor\": \"narrow\"\r\n    }\r\n  ]\r\n} ",
    "placeholder-logo.png": "(binary)",
    "placeholder-logo.svg": "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"215\" height=\"48\" fill=\"none\"><path fill=\"#000\" d=\"M57.588 9.6h6L73.828 38h-5.2l-2.36-6.88h-11.36L52.548 38h-5.2l10.24-28.4Zm7.16 17.16-4.16-12.16-4.16 12.16h8.32Zm23.694-2.24c-.186-1.307-.706-2.32-1.56-3.04-.853-.72-1.866-1.08-3.04-1.08-1.68 0-2.986.613-3.92 1.84-.906 1.227-1.36 2.947-1.36 5.16s.454 3.933 1.36 5.16c.934 1.227 2.24 1.84 3.92 1.84 1.254 0 2.307-.373 3.16-1.12.854-.773 1.387-1.867 1.6-3.28l5.12.24c-.186 1.68-.733 3.147-1.64 4.4-.906 1.227-2.08 2.173-3.52 2.84-1.413.667-2.986 1-4.72 1-2.08 0-3.906-.453-5.48-1.36-1.546-.907-2.76-2.2-3.64-3.88-.853-1.68-1.28-3.627-1.28-5.84 0-2.24.427-4.187 1.28-5.84.88-1.68 2.094-2.973 3.64-3.88 1.574-.907 3.4-1.36 5.48-1.36 1.68 0 3.227.32 4.64.96 1.414.64 2.56 1.56 3.44 2.76.907 1.2 1.454 2.6 1.64 4.2l-5.12.28Zm11.486-7.72.12 3.4c.534-1.227 1.307-2.173 2.32-2.84 1.04-.693 2.267-1.04 3.68-1.04 1.494 0 2.76.387 3.8 1.16 1.067.747 1.827 1.813 2.28 3.2.507-1.44 1.294-2.52 2.36-3.24 1.094-.747 2.414-1.12 3.96-1.12 1.414 0 2.64.307 3.68.92s1.84 1.52 2.4 2.72c.56 1.2.84 2.667.84 4.4V38h-4.96V25.92c0-1.813-.293-3.187-.88-4.12-.56-.96-1.413-1.44-2.56-1.44-.906 0-1.68.213-2.32.64-.64.427-1.133 1.053-1.48 1.88-.32.827-.48 1.84-.48 3.04V38h-4.56V25.92c0-1.2-.133-2.213-.4-3.04-.24-.827-.626-1.453-1.16-1.88-.506-.427-1.133-.64-1.88-.64-.906 0-1.68.227-2.32.68-.64.427-1.133 1.053-1.48 1.88-.32.827-.48 1.827-.48 3V38h-4.96V16.8h4.48Zm26.723 10.6c0-2.24.427-4.187 1.28-5.84.854-1.68 2.067-2.973 3.64-3.88 1.574-.907 3.4-1.36 5.48-1.36 1.84 0 3.494.413 4.96 1.24 1.467.827 2.64 2.08 3.52 3.76.88 1.653 1.347 3.693 1.4 6.12v1.32h-15.08c.107 1.813.614 3.227 1.52 4.24.907.987 2.134 1.48 3.68 1.48.987 0 1.88-.253 2.68-.76a4.803 4.803 0 0 0 1.84-2.2l5.08.36c-.64 2.027-1.84 3.64-3.6 4.84-1.733 1.173-3.733 1.76-6 1.76-2.08 0-3.906-.453-5.48-1.36-1.573-.907-2.786-2.2-3.64-3.88-.853-1.68-1.28-3.627-1.28-5.84Zm15.16-2.04c-.213-1.733-.76-3.013-1.64-3.84-.853-.827-1.893-1.24-3.12-1.24-1.44 0-2.6.453-3.48 1.36-.88.88-1.44 2.12-1.68 3.72h9.92ZM163.139 9.6V38h-5.04V9.6h5.04Zm8.322 7.2.24 5.88-.64-.36c.32-2.053 1.094-3.56 2.32-4.52 1.254-.987 2.787-1.48 4.6-1.48 2.32 0 4.107.733 5.36 2.2 1.254 1.44 1.88 3.387 1.88 5.84V38h-4.96V25.92c0-1.253-.12-2.28-.36-3.08-.24-.8-.64-1.413-1.2-1.84-.533-.427-1.253-.64-2.16-.64-1.44 0-2.573.48-3.4 1.44-.8.933-1.2 2.307-1.2 4.12V38h-4.96V16.8h4.48Zm30.003 7.72c-.186-1.307-.706-2.32-1.56-3.04-.853-.72-1.866-1.08-3.04-1.08-1.68 0-2.986.613-3.92 1.84-.906 1.227-1.36 2.947-1.36 5.16s.454 3.933 1.36 5.16c.934 1.227 2.24 1.84 3.92 1.84 1.254 0 2.307-.373 3.16-1.12.854-.773 1.387-1.867 1.6-3.28l5.12.24c-.186 1.68-.733 3.147-1.64 4.4-.906 1.227-2.08 2.173-3.52 2.84-1.413.667-2.986 1-4.72 1-2.08 0-3.906-.453-5.48-1.36-1.546-.907-2.76-2.2-3.64-3.88-.853-1.68-1.28-3.627-1.28-5.84 0-2.24.427-4.187 1.28-5.84.88-1.68 2.094-2.973 3.64-3.88 1.574-.907 3.4-1.36 5.48-1.36 1.68 0 3.227.32 4.64.96 1.414.64 2.56 1.56 3.44 2.76.907 1.2 1.454 2.6 1.64 4.2l-5.12.28Zm11.443 8.16V38h-5.6v-5.32h5.6Z\"/><path fill=\"#171717\" fill-rule=\"evenodd\" d=\"m7.839 40.783 16.03-28.054L20 6 0 40.783h7.839Zm8.214 0H40L27.99 19.894l-4.02 7.032 3.976 6.914H20.02l-3.967 6.943Z\" clip-rule=\"evenodd\"/></svg>",
    "placeholder-user.jpg": "(binary)",
    "placeholder.jpg": "(binary)",
    "placeholder.svg": "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1200\" height=\"1200\" fill=\"none\"><rect width=\"1200\" height=\"1200\" fill=\"#EAEAEA\" rx=\"3\"/><g opacity=\".5\"><g opacity=\".5\"><path fill=\"#FAFAFA\" d=\"M600.709 736.5c-75.454 0-136.621-61.167-136.621-136.62 0-75.454 61.167-136.621 136.621-136.621 75.453 0 136.62 61.167 136.62 136.621 0 75.453-61.167 136.62-136.62 136.62Z\"/><path stroke=\"#C9C9C9\" stroke-width=\"2.418\" d=\"M600.709 736.5c-75.454 0-136.621-61.167-136.621-136.62 0-75.454 61.167-136.621 136.621-136.621 75.453 0 136.62 61.167 136.62 136.621 0 75.453-61.167 136.62-136.62 136.62Z\"/></g><path stroke=\"url(#a)\" stroke-width=\"2.418\" d=\"M0-1.209h553.581\" transform=\"scale(1 -1) rotate(45 1163.11 91.165)\"/><path stroke=\"url(#b)\" stroke-width=\"2.418\" d=\"M404.846 598.671h391.726\"/><path stroke=\"url(#c)\" stroke-width=\"2.418\" d=\"M599.5 795.742V404.017\"/><path stroke=\"url(#d)\" stroke-width=\"2.418\" d=\"m795.717 796.597-391.441-391.44\"/><path fill=\"#fff\" d=\"M600.709 656.704c-31.384 0-56.825-25.441-56.825-56.824 0-31.384 25.441-56.825 56.825-56.825 31.383 0 56.824 25.441 56.824 56.825 0 31.383-25.441 56.824-56.824 56.824Z\"/><g clip-path=\"url(#e)\"><path fill=\"#666\" fill-rule=\"evenodd\" d=\"M616.426 586.58h-31.434v16.176l3.553-3.554.531-.531h9.068l.074-.074 8.463-8.463h2.565l7.18 7.181V586.58Zm-15.715 14.654 3.698 3.699 1.283 1.282-2.565 2.565-1.282-1.283-5.2-5.199h-6.066l-5.514 5.514-.073.073v2.876a2.418 2.418 0 0 0 2.418 2.418h26.598a2.418 2.418 0 0 0 2.418-2.418v-8.317l-8.463-8.463-7.181 7.181-.071.072Zm-19.347 5.442v4.085a6.045 6.045 0 0 0 6.046 6.045h26.598a6.044 6.044 0 0 0 6.045-6.045v-7.108l1.356-1.355-1.282-1.283-.074-.073v-17.989h-38.689v23.43l-.146.146.146.147Z\" clip-rule=\"evenodd\"/></g><path stroke=\"#C9C9C9\" stroke-width=\"2.418\" d=\"M600.709 656.704c-31.384 0-56.825-25.441-56.825-56.824 0-31.384 25.441-56.825 56.825-56.825 31.383 0 56.824 25.441 56.824 56.825 0 31.383-25.441 56.824-56.824 56.824Z\"/></g><defs><linearGradient id=\"a\" x1=\"554.061\" x2=\"-.48\" y1=\".083\" y2=\".087\" gradientUnits=\"userSpaceOnUse\"><stop stop-color=\"#C9C9C9\" stop-opacity=\"0\"/><stop offset=\".208\" stop-color=\"#C9C9C9\"/><stop offset=\".792\" stop-color=\"#C9C9C9\"/><stop offset=\"1\" stop-color=\"#C9C9C9\" stop-opacity=\"0\"/></linearGradient><linearGradient id=\"b\" x1=\"796.912\" x2=\"404.507\" y1=\"599.963\" y2=\"599.965\" gradientUnits=\"userSpaceOnUse\"><stop stop-color=\"#C9C9C9\" stop-opacity=\"0\"/><stop offset=\".208\" stop-color=\"#C9C9C9\"/><stop offset=\".792\" stop-color=\"#C9C9C9\"/><stop offset=\"1\" stop-color=\"#C9C9C9\" stop-opacity=\"0\"/></linearGradient><linearGradient id=\"c\" x1=\"600.792\" x2=\"600.794\" y1=\"403.677\" y2=\"796.082\" gradientUnits=\"userSpaceOnUse\"><stop stop-color=\"#C9C9C9\" stop-opacity=\"0\"/><stop offset=\".208\" stop-color=\"#C9C9C9\"/><stop offset=\".792\" stop-color=\"#C9C9C9\"/><stop offset=\"1\" stop-color=\"#C9C9C9\" stop-opacity=\"0\"/></linearGradient><linearGradient id=\"d\" x1=\"404.85\" x2=\"796.972\" y1=\"403.903\" y2=\"796.02\" gradientUnits=\"userSpaceOnUse\"><stop stop-color=\"#C9C9C9\" stop-opacity=\"0\"/><stop offset=\".208\" stop-color=\"#C9C9C9\"/><stop offset=\".792\" stop-color=\"#C9C9C9\"/><stop offset=\"1\" stop-color=\"#C9C9C9\" stop-opacity=\"0\"/></linearGradient><clipPath id=\"e\"><path fill=\"#fff\" d=\"M581.364 580.535h38.689v38.689h-38.689z\"/></clipPath></defs></svg>",
    "qr-pago-bodega.jpg": "(binary)",
    "qr-pago.jpg": "(binary)",
    "robots.txt": "User-agent: *\r\nAllow: /\r\n\r\n# Sitemap\r\nSitemap: https://tu-dominio.com/sitemap.xml\r\n\r\n# Crawl-delay\r\nCrawl-delay: 1\r\n\r\n# Disallow admin areas\r\nDisallow: /admin/\r\nDisallow: /api/\r\nDisallow: /_next/\r\nDisallow: /static/\r\n\r\n# Allow important pages\r\nAllow: /\r\nAllow: /vinos/\r\nAllow: /categoria/\r\nAllow: /bodega/ "
  },
  "scripts": {
    "check-supabase-config.js": "#!/usr/bin/env node\r\n\r\nconst { createClient } = require('@supabase/supabase-js');\r\n// require('dotenv').config({ path: '.env.local' }); // Eliminado: no usar dotenv\r\n\r\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;\r\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;\r\n\r\nconsole.log('🔍 Verificando configuración de Supabase...\\n');\r\n\r\n// Verificar variables de entorno\r\nconsole.log('1. Variables de entorno:');\r\nconsole.log(`   URL: ${supabaseUrl ? '✅ Configurada' : '❌ No configurada'}`);\r\nconsole.log(`   Anon Key: ${supabaseAnonKey ? '✅ Configurada' : '❌ No configurada'}`);\r\n\r\nif (!supabaseUrl || !supabaseAnonKey) {\r\n  console.log('\\n❌ Error: Variables de entorno faltantes');\r\n  console.log('   Crea un archivo .env.local con las siguientes variables:');\r\n  console.log('   NEXT_PUBLIC_SUPABASE_URL=https://your-project.supabase.co');\r\n  console.log('   NEXT_PUBLIC_SUPABASE_ANON_KEY=your-anon-key-here');\r\n  process.exit(1);\r\n}\r\n\r\n// Crear cliente de Supabase\r\nconst supabase = createClient(supabaseUrl, supabaseAnonKey);\r\n\r\nasync function checkConnection() {\r\n  console.log('\\n2. Conexión a Supabase:');\r\n  \r\n  try {\r\n    const { data, error } = await supabase\r\n      .from('wines')\r\n      .select('id_vino')\r\n      .limit(1);\r\n\r\n    if (error) {\r\n      console.log(`   ❌ Error de conexión: ${error.message}`);\r\n      return false;\r\n    }\r\n\r\n    console.log('   ✅ Conexión exitosa');\r\n    console.log(`   ✅ Acceso a tabla 'wines': ${data !== null ? 'Sí' : 'No'}`);\r\n    return true;\r\n  } catch (error) {\r\n    console.log(`   ❌ Error de conexión: ${error.message}`);\r\n    return false;\r\n  }\r\n}\r\n\r\nasync function checkRealtime() {\r\n  console.log('\\n3. Verificación de Realtime:');\r\n  \r\n  return new Promise((resolve) => {\r\n    const channel = supabase\r\n      .channel('config-test')\r\n      .on('postgres_changes', { event: '*', schema: 'public', table: 'wines' }, () => {})\r\n      .subscribe((status) => {\r\n        if (status === 'SUBSCRIBED') {\r\n          console.log('   ✅ Realtime funcionando correctamente');\r\n          supabase.removeChannel(channel);\r\n          resolve(true);\r\n        } else if (status === 'CHANNEL_ERROR') {\r\n          console.log('   ❌ Error en Realtime');\r\n          supabase.removeChannel(channel);\r\n          resolve(false);\r\n        }\r\n      });\r\n\r\n    // Timeout después de 10 segundos\r\n    setTimeout(() => {\r\n      console.log('   ⚠️  Timeout en verificación de Realtime');\r\n      supabase.removeChannel(channel);\r\n      resolve(false);\r\n    }, 10000);\r\n  });\r\n}\r\n\r\nasync function main() {\r\n  const connectionOk = await checkConnection();\r\n  \r\n  if (connectionOk) {\r\n    await checkRealtime();\r\n  }\r\n\r\n  console.log('\\n📋 Resumen:');\r\n  console.log('   - Variables de entorno: ✅');\r\n  console.log(`   - Conexión: ${connectionOk ? '✅' : '❌'}`);\r\n  \r\n  if (connectionOk) {\r\n    console.log('   - Realtime: Verificado');\r\n  }\r\n\r\n  console.log('\\n💡 Si hay problemas:');\r\n  console.log('   1. Verifica que tu proyecto de Supabase esté activo');\r\n  console.log('   2. Asegúrate de que Realtime esté habilitado en Database > Replication');\r\n  console.log('   3. Verifica las políticas RLS en la tabla wines');\r\n  console.log('   4. Consulta el archivo SUPABASE_SETUP.md para más detalles');\r\n}\r\n\r\nmain().catch(console.error); ",
    "create-user-management-rpc.sql": "-- Función RPC para gestión de usuarios (solo para administradores)\r\n-- Ejecuta este script en el SQL Editor de Supabase\r\n\r\n-- 1. Crear función para listar usuarios (solo para admins)\r\nCREATE OR REPLACE FUNCTION get_users_for_admin()\r\nRETURNS TABLE (\r\n  id UUID,\r\n  email TEXT,\r\n  created_at TIMESTAMPTZ,\r\n  user_metadata JSONB,\r\n  is_admin BOOLEAN\r\n) \r\nLANGUAGE plpgsql\r\nSECURITY DEFINER\r\nAS $$\r\nBEGIN\r\n  -- Verificar que el usuario actual es admin\r\n  IF NOT EXISTS (\r\n    SELECT 1 \r\n    FROM auth.users \r\n    WHERE id = auth.uid() \r\n    AND (\r\n      user_metadata->>'role' = 'admin' \r\n      OR user_metadata->>'isAdmin' = 'true'\r\n      OR email = 'acevedojuanesteban.colombia@gmail.com'\r\n    )\r\n  ) THEN\r\n    RAISE EXCEPTION 'Solo los administradores pueden acceder a esta función';\r\n  END IF;\r\n  \r\n  -- Retornar usuarios con información de admin\r\n  RETURN QUERY\r\n  SELECT \r\n    u.id,\r\n    u.email,\r\n    u.created_at,\r\n    u.user_metadata,\r\n    CASE \r\n      WHEN u.user_metadata->>'role' = 'admin' OR \r\n           u.user_metadata->>'isAdmin' = 'true' OR\r\n           u.email = 'acevedojuanesteban.colombia@gmail.com'\r\n      THEN true\r\n      ELSE false\r\n    END as is_admin\r\n  FROM auth.users u\r\n  ORDER BY u.created_at DESC;\r\nEND;\r\n$$;\r\n\r\n-- 2. Crear función para actualizar rol de usuario (solo para admins)\r\nCREATE OR REPLACE FUNCTION update_user_role_safe(target_user_id UUID, new_role TEXT)\r\nRETURNS BOOLEAN\r\nLANGUAGE plpgsql\r\nSECURITY DEFINER\r\nAS $$\r\nBEGIN\r\n  -- Verificar que el usuario actual es admin\r\n  IF NOT EXISTS (\r\n    SELECT 1 \r\n    FROM auth.users \r\n    WHERE id = auth.uid() \r\n    AND (\r\n      user_metadata->>'role' = 'admin' \r\n      OR user_metadata->>'isAdmin' = 'true'\r\n      OR email = 'acevedojuanesteban.colombia@gmail.com'\r\n    )\r\n  ) THEN\r\n    RAISE EXCEPTION 'Solo los administradores pueden actualizar roles';\r\n  END IF;\r\n  \r\n  -- Actualizar el rol del usuario objetivo\r\n  UPDATE auth.users \r\n  SET user_metadata = jsonb_set(\r\n    COALESCE(user_metadata, '{}'::jsonb),\r\n    '{role}',\r\n    to_jsonb(new_role)\r\n  )\r\n  WHERE id = target_user_id;\r\n  \r\n  -- También actualizar isAdmin\r\n  UPDATE auth.users \r\n  SET user_metadata = jsonb_set(\r\n    COALESCE(user_metadata, '{}'::jsonb),\r\n    '{isAdmin}',\r\n    to_jsonb(new_role = 'admin')\r\n  )\r\n  WHERE id = target_user_id;\r\n  \r\n  RETURN FOUND;\r\nEND;\r\n$$;\r\n\r\n-- 3. Crear función para obtener estadísticas de usuarios (solo para admins)\r\nCREATE OR REPLACE FUNCTION get_user_stats()\r\nRETURNS TABLE (\r\n  total_users BIGINT,\r\n  admin_users BIGINT,\r\n  regular_users BIGINT\r\n)\r\nLANGUAGE plpgsql\r\nSECURITY DEFINER\r\nAS $$\r\nBEGIN\r\n  -- Verificar que el usuario actual es admin\r\n  IF NOT EXISTS (\r\n    SELECT 1 \r\n    FROM auth.users \r\n    WHERE id = auth.uid() \r\n    AND (\r\n      user_metadata->>'role' = 'admin' \r\n      OR user_metadata->>'isAdmin' = 'true'\r\n      OR email = 'acevedojuanesteban.colombia@gmail.com'\r\n    )\r\n  ) THEN\r\n    RAISE EXCEPTION 'Solo los administradores pueden acceder a esta función';\r\n  END IF;\r\n  \r\n  RETURN QUERY\r\n  SELECT \r\n    COUNT(*) as total_users,\r\n    COUNT(*) FILTER (WHERE \r\n      user_metadata->>'role' = 'admin' OR \r\n      user_metadata->>'isAdmin' = 'true' OR\r\n      email = 'acevedojuanesteban.colombia@gmail.com'\r\n    ) as admin_users,\r\n    COUNT(*) FILTER (WHERE \r\n      (user_metadata->>'role' IS NULL OR user_metadata->>'role' != 'admin') AND\r\n      (user_metadata->>'isAdmin' IS NULL OR user_metadata->>'isAdmin' != 'true') AND\r\n      email != 'acevedojuanesteban.colombia@gmail.com'\r\n    ) as regular_users\r\n  FROM auth.users;\r\nEND;\r\n$$;\r\n\r\n-- 4. Verificar que las funciones se crearon correctamente\r\nSELECT \r\n  routine_name,\r\n  routine_type,\r\n  data_type\r\nFROM information_schema.routines \r\nWHERE routine_name IN ('get_users_for_admin', 'update_user_role_safe', 'get_user_stats')\r\nAND routine_schema = 'public'\r\nORDER BY routine_name;\r\n\r\n-- 5. Probar la función (solo si eres admin)\r\n-- SELECT * FROM get_users_for_admin();\r\n-- SELECT * FROM get_user_stats(); ",
    "diagnose-wine-issue.sql": "-- Script de diagnóstico para problemas con vinos\r\n-- Ejecuta este script en el SQL Editor de Supabase\r\n\r\n-- 1. Verificar que las tablas existen\r\nSELECT \r\n  table_name,\r\n  table_type\r\nFROM information_schema.tables \r\nWHERE table_name IN ('wines', 'wine_details')\r\nAND table_schema = 'public';\r\n\r\n-- 2. Verificar estructura de las tablas\r\nSELECT \r\n  column_name,\r\n  data_type,\r\n  is_nullable\r\nFROM information_schema.columns \r\nWHERE table_name = 'wines'\r\nAND table_schema = 'public'\r\nORDER BY ordinal_position;\r\n\r\nSELECT \r\n  column_name,\r\n  data_type,\r\n  is_nullable\r\nFROM information_schema.columns \r\nWHERE table_name = 'wine_details'\r\nAND table_schema = 'public'\r\nORDER BY ordinal_position;\r\n\r\n-- 3. Verificar si hay datos en las tablas\r\nSELECT COUNT(*) as total_wines FROM wines;\r\nSELECT COUNT(*) as total_wine_details FROM wine_details;\r\n\r\n-- 4. Verificar políticas RLS\r\nSELECT \r\n  schemaname,\r\n  tablename,\r\n  policyname,\r\n  permissive,\r\n  roles,\r\n  cmd,\r\n  qual\r\nFROM pg_policies \r\nWHERE tablename IN ('wines', 'wine_details')\r\nORDER BY tablename, policyname;\r\n\r\n-- 5. Verificar si RLS está habilitado\r\nSELECT \r\n  schemaname,\r\n  tablename,\r\n  rowsecurity\r\nFROM pg_tables \r\nWHERE tablename IN ('wines', 'wine_details')\r\nAND schemaname = 'public';\r\n\r\n-- 6. Probar consulta simple\r\nSELECT id_vino, nombre FROM wines LIMIT 5;\r\n\r\n-- 7. Probar consulta con join\r\nSELECT \r\n  w.id_vino,\r\n  w.nombre,\r\n  wd.bodega\r\nFROM wines w\r\nLEFT JOIN wine_details wd ON w.id_vino = wd.id_vino\r\nLIMIT 5;\r\n\r\n-- 8. Verificar permisos del usuario anónimo\r\nSELECT \r\n  grantee,\r\n  table_name,\r\n  privilege_type\r\nFROM information_schema.table_privileges \r\nWHERE table_name IN ('wines', 'wine_details')\r\nAND grantee = 'anon';\r\n\r\n-- 9. Verificar permisos del usuario autenticado\r\nSELECT \r\n  grantee,\r\n  table_name,\r\n  privilege_type\r\nFROM information_schema.table_privileges \r\nWHERE table_name IN ('wines', 'wine_details')\r\nAND grantee = 'authenticated'; ",
    "emergency-fix-wines.sql": "-- SOLUCIÓN DE EMERGENCIA para problemas con vinos\r\n-- Ejecuta este script en el SQL Editor de Supabase\r\n\r\n-- 1. DESHABILITAR RLS temporalmente para diagnosticar\r\nALTER TABLE wines DISABLE ROW LEVEL SECURITY;\r\nALTER TABLE wine_details DISABLE ROW LEVEL SECURITY;\r\n\r\n-- 2. Eliminar TODAS las políticas existentes\r\nDROP POLICY IF EXISTS \"Allow admin full access to wines\" ON wines;\r\nDROP POLICY IF EXISTS \"Allow admin full access to wine_details\" ON wine_details;\r\nDROP POLICY IF EXISTS \"Allow public read access to wines\" ON wines;\r\nDROP POLICY IF EXISTS \"Allow public read access to wine_details\" ON wine_details;\r\nDROP POLICY IF EXISTS \"Allow admin write access to wines\" ON wines;\r\nDROP POLICY IF EXISTS \"Allow admin write access to wine_details\" ON wine_details;\r\nDROP POLICY IF EXISTS \"Allow anonymous read access to wines\" ON wines;\r\nDROP POLICY IF EXISTS \"Allow authenticated users to manage wines\" ON wines;\r\n\r\n-- 3. Verificar que las tablas tienen datos\r\nSELECT 'Wines count:' as info, COUNT(*) as count FROM wines\r\nUNION ALL\r\nSELECT 'Wine details count:', COUNT(*) FROM wine_details;\r\n\r\n-- 4. Probar acceso directo\r\nSELECT id_vino, nombre, precio FROM wines LIMIT 3;\r\n\r\n-- 5. Si todo funciona, habilitar RLS con políticas simples\r\nALTER TABLE wines ENABLE ROW LEVEL SECURITY;\r\nALTER TABLE wine_details ENABLE ROW LEVEL SECURITY;\r\n\r\n-- 6. Crear políticas básicas que permitan acceso público\r\nCREATE POLICY \"Enable read access for all users\" ON wines\r\nFOR SELECT USING (true);\r\n\r\nCREATE POLICY \"Enable read access for all users\" ON wine_details\r\nFOR SELECT USING (true);\r\n\r\n-- 7. Verificar que las políticas se crearon\r\nSELECT \r\n  tablename,\r\n  policyname,\r\n  cmd,\r\n  qual\r\nFROM pg_policies \r\nWHERE tablename IN ('wines', 'wine_details')\r\nORDER BY tablename, policyname;\r\n\r\n-- 8. Probar acceso con RLS habilitado\r\nSELECT COUNT(*) as wines_accessible FROM wines; ",
    "execute-user-management-rpc.sql": "-- Script para ejecutar las funciones RPC de gestión de usuarios\r\n-- Ejecuta este script en el SQL Editor de Supabase DESPUÉS de ejecutar create-user-management-rpc.sql\r\n\r\n-- 1. Verificar que las funciones existen\r\nSELECT \r\n  routine_name,\r\n  routine_type,\r\n  data_type\r\nFROM information_schema.routines \r\nWHERE routine_name IN ('get_users_for_admin', 'update_user_role_safe', 'get_user_stats')\r\nAND routine_schema = 'public'\r\nORDER BY routine_name;\r\n\r\n-- 2. Probar la función de estadísticas (solo si eres admin)\r\n-- SELECT * FROM get_user_stats();\r\n\r\n-- 3. Probar la función de listar usuarios (solo si eres admin)\r\n-- SELECT * FROM get_users_for_admin();\r\n\r\n-- 4. Verificar que el usuario actual tiene permisos de admin\r\nSELECT \r\n  id,\r\n  email,\r\n  user_metadata->>'role' as role,\r\n  user_metadata->>'isAdmin' as is_admin,\r\n  CASE \r\n    WHEN user_metadata->>'role' = 'admin' OR \r\n         user_metadata->>'isAdmin' = 'true' OR\r\n         email = 'acevedojuanesteban.colombia@gmail.com'\r\n    THEN 'SÍ ES ADMIN'\r\n    ELSE 'NO ES ADMIN'\r\n  END as admin_status\r\nFROM auth.users \r\nWHERE id = auth.uid();\r\n\r\n-- 5. Si no eres admin, configurar el primer admin (reemplaza con tu email)\r\n/*\r\nUPDATE auth.users \r\nSET user_metadata = jsonb_set(\r\n  COALESCE(user_metadata, '{}'::jsonb),\r\n  '{role}',\r\n  '\"admin\"'\r\n)\r\nWHERE email = 'tu-email@ejemplo.com';\r\n\r\nUPDATE auth.users \r\nSET user_metadata = jsonb_set(\r\n  COALESCE(user_metadata, '{}'::jsonb),\r\n  '{isAdmin}',\r\n  'true'\r\n)\r\nWHERE email = 'tu-email@ejemplo.com';\r\n*/\r\n\r\n-- 6. Verificar configuración final\r\nSELECT \r\n  'Configuración de gestión de usuarios completada' as status,\r\n  'Las funciones RPC están listas para usar desde la aplicación' as next_step; ",
    "fix-admin-role-error.sql": "-- Script para corregir el error del rol \"Admin\"\r\n-- Ejecuta este script en el SQL Editor de Supabase\r\n\r\n-- 1. Eliminar las políticas problemáticas que causan el error\r\nDROP POLICY IF EXISTS \"Allow admin full access to wines\" ON wines;\r\nDROP POLICY IF EXISTS \"Allow admin full access to wine_details\" ON wine_details;\r\n\r\n-- 2. Verificar que no hay políticas problemáticas\r\nSELECT \r\n  schemaname,\r\n  tablename,\r\n  policyname,\r\n  permissive,\r\n  roles,\r\n  cmd,\r\n  qual\r\nFROM pg_policies \r\nWHERE tablename IN ('wines', 'wine_details')\r\nORDER BY tablename, policyname;\r\n\r\n-- 3. Crear políticas simples que funcionen\r\n-- Política para lectura pública de vinos\r\nCREATE POLICY \"Enable read access for all users\" ON wines\r\nFOR SELECT USING (true);\r\n\r\n-- Política para escritura solo usuarios autenticados\r\nCREATE POLICY \"Enable insert for authenticated users only\" ON wines\r\nFOR INSERT TO authenticated WITH CHECK (true);\r\n\r\nCREATE POLICY \"Enable update for authenticated users only\" ON wines\r\nFOR UPDATE TO authenticated USING (true) WITH CHECK (true);\r\n\r\nCREATE POLICY \"Enable delete for authenticated users only\" ON wines\r\nFOR DELETE TO authenticated USING (true);\r\n\r\n-- 4. Políticas para wine_details\r\nCREATE POLICY \"Enable read access for all users\" ON wine_details\r\nFOR SELECT USING (true);\r\n\r\nCREATE POLICY \"Enable insert for authenticated users only\" ON wine_details\r\nFOR INSERT TO authenticated WITH CHECK (true);\r\n\r\nCREATE POLICY \"Enable update for authenticated users only\" ON wine_details\r\nFOR UPDATE TO authenticated USING (true) WITH CHECK (true);\r\n\r\nCREATE POLICY \"Enable delete for authenticated users only\" ON wine_details\r\nFOR DELETE TO authenticated USING (true);\r\n\r\n-- 5. Verificar que RLS esté habilitado\r\nALTER TABLE wines ENABLE ROW LEVEL SECURITY;\r\nALTER TABLE wine_details ENABLE ROW LEVEL SECURITY;\r\n\r\n-- 6. Probar acceso público\r\nSELECT COUNT(*) as total_wines_accessible FROM wines;\r\n\r\n-- 7. Verificar las políticas finales\r\nSELECT \r\n  tablename,\r\n  policyname,\r\n  cmd,\r\n  qual\r\nFROM pg_policies \r\nWHERE tablename IN ('wines', 'wine_details')\r\nORDER BY tablename, policyname; ",
    "fix-wine-access.sql": "-- Script para corregir el acceso a los vinos\r\n-- Ejecuta este script en el SQL Editor de Supabase\r\n\r\n-- 1. Eliminar políticas problemáticas si existen\r\nDROP POLICY IF EXISTS \"Allow admin full access to wines\" ON wines;\r\nDROP POLICY IF EXISTS \"Allow admin full access to wine_details\" ON wine_details;\r\n\r\n-- 2. Crear políticas correctas para acceso público a vinos\r\n-- Permitir lectura pública de vinos (para la tienda)\r\nCREATE POLICY \"Allow public read access to wines\" ON wines\r\nFOR SELECT USING (true);\r\n\r\n-- Permitir lectura pública de wine_details\r\nCREATE POLICY \"Allow public read access to wine_details\" ON wine_details\r\nFOR SELECT USING (true);\r\n\r\n-- 3. Crear políticas para operaciones de administración\r\n-- Solo admins pueden insertar, actualizar y eliminar vinos\r\nCREATE POLICY \"Allow admin write access to wines\" ON wines\r\nFOR ALL USING (\r\n  auth.role() = 'authenticated' AND (\r\n    auth.jwt() ->> 'user_metadata' ->> 'role' = 'admin' OR\r\n    auth.jwt() ->> 'user_metadata' ->> 'isAdmin' = 'true' OR\r\n    auth.jwt() ->> 'email' = 'acevedojuanesteban.colombia@gmail.com'\r\n  )\r\n);\r\n\r\n-- Solo admins pueden insertar, actualizar y eliminar wine_details\r\nCREATE POLICY \"Allow admin write access to wine_details\" ON wine_details\r\nFOR ALL USING (\r\n  auth.role() = 'authenticated' AND (\r\n    auth.jwt() ->> 'user_metadata' ->> 'role' = 'admin' OR\r\n    auth.jwt() ->> 'user_metadata' ->> 'isAdmin' = 'true' OR\r\n    auth.jwt() ->> 'email' = 'acevedojuanesteban.colombia@gmail.com'\r\n  )\r\n);\r\n\r\n-- 4. Verificar que RLS esté habilitado\r\nALTER TABLE wines ENABLE ROW LEVEL SECURITY;\r\nALTER TABLE wine_details ENABLE ROW LEVEL SECURITY;\r\n\r\n-- 5. Verificar configuración\r\nSELECT \r\n  schemaname,\r\n  tablename,\r\n  policyname,\r\n  permissive,\r\n  roles,\r\n  cmd,\r\n  qual\r\nFROM pg_policies \r\nWHERE tablename IN ('wines', 'wine_details')\r\nORDER BY tablename, policyname;\r\n\r\n-- 6. Probar acceso público\r\n-- Esto debería funcionar sin autenticación\r\nSELECT COUNT(*) as total_wines FROM wines;\r\n\r\n-- 7. Verificar que las funciones de admin existen\r\nSELECT \r\n  routine_name,\r\n  routine_type\r\nFROM information_schema.routines \r\nWHERE routine_name IN ('is_admin', 'update_user_role', 'list_users_for_admin')\r\nAND routine_schema = 'public'; ",
    "quick-fix-wines.sql": "-- Solución rápida para el acceso a vinos\r\n-- Ejecuta este script en el SQL Editor de Supabase\r\n\r\n-- 1. Eliminar todas las políticas problemáticas\r\nDROP POLICY IF EXISTS \"Allow admin full access to wines\" ON wines;\r\nDROP POLICY IF EXISTS \"Allow admin full access to wine_details\" ON wine_details;\r\n\r\n-- 2. Crear política simple para acceso público a vinos\r\nCREATE POLICY \"Allow public read access to wines\" ON wines\r\nFOR SELECT USING (true);\r\n\r\n-- 3. Crear política simple para acceso público a wine_details\r\nCREATE POLICY \"Allow public read access to wine_details\" ON wine_details\r\nFOR SELECT USING (true);\r\n\r\n-- 4. Verificar que funciona\r\nSELECT COUNT(*) as total_wines FROM wines; ",
    "setup-admin-roles.sql": "-- Script para configurar roles de administrador en Supabase\r\n-- Ejecuta este script en el SQL Editor de Supabase\r\n\r\n-- 1. Crear función para verificar si un usuario es admin\r\nCREATE OR REPLACE FUNCTION is_admin(user_id UUID)\r\nRETURNS BOOLEAN AS $$\r\nBEGIN\r\n  RETURN EXISTS (\r\n    SELECT 1 \r\n    FROM auth.users \r\n    WHERE id = user_id \r\n    AND (\r\n      user_metadata->>'role' = 'admin' \r\n      OR user_metadata->>'isAdmin' = 'true'\r\n      OR email = 'acevedojuanesteban.colombia@gmail.com'\r\n    )\r\n  );\r\nEND;\r\n$$ LANGUAGE plpgsql SECURITY DEFINER;\r\n\r\n-- 2. Crear políticas RLS que usen la función is_admin\r\n-- Para la tabla wines (si no existe ya)\r\nCREATE POLICY \"Allow admin full access to wines\" ON wines\r\nFOR ALL USING (is_admin(auth.uid()));\r\n\r\n-- Para la tabla wine_details (si no existe ya)\r\nCREATE POLICY \"Allow admin full access to wine_details\" ON wine_details\r\nFOR ALL USING (is_admin(auth.uid()));\r\n\r\n-- 3. Crear función para actualizar roles (solo para admins)\r\nCREATE OR REPLACE FUNCTION update_user_role(target_user_id UUID, new_role TEXT)\r\nRETURNS VOID AS $$\r\nBEGIN\r\n  -- Verificar que el usuario actual es admin\r\n  IF NOT is_admin(auth.uid()) THEN\r\n    RAISE EXCEPTION 'Solo los administradores pueden actualizar roles';\r\n  END IF;\r\n  \r\n  -- Actualizar el rol del usuario objetivo\r\n  UPDATE auth.users \r\n  SET user_metadata = jsonb_set(\r\n    COALESCE(user_metadata, '{}'::jsonb),\r\n    '{role}',\r\n    to_jsonb(new_role)\r\n  )\r\n  WHERE id = target_user_id;\r\n  \r\n  -- También actualizar isAdmin\r\n  UPDATE auth.users \r\n  SET user_metadata = jsonb_set(\r\n    COALESCE(user_metadata, '{}'::jsonb),\r\n    '{isAdmin}',\r\n    to_jsonb(new_role = 'admin')\r\n  )\r\n  WHERE id = target_user_id;\r\nEND;\r\n$$ LANGUAGE plpgsql SECURITY DEFINER;\r\n\r\n-- 4. Crear función para listar usuarios (solo para admins)\r\nCREATE OR REPLACE FUNCTION list_users_for_admin()\r\nRETURNS TABLE (\r\n  id UUID,\r\n  email TEXT,\r\n  created_at TIMESTAMPTZ,\r\n  user_metadata JSONB\r\n) AS $$\r\nBEGIN\r\n  -- Verificar que el usuario actual es admin\r\n  IF NOT is_admin(auth.uid()) THEN\r\n    RAISE EXCEPTION 'Solo los administradores pueden listar usuarios';\r\n  END IF;\r\n  \r\n  RETURN QUERY\r\n  SELECT \r\n    u.id,\r\n    u.email,\r\n    u.created_at,\r\n    u.user_metadata\r\n  FROM auth.users u\r\n  ORDER BY u.created_at DESC;\r\nEND;\r\n$$ LANGUAGE plpgsql SECURITY DEFINER;\r\n\r\n-- 5. Configurar el primer administrador (reemplaza con tu email)\r\n-- Ejecuta esto manualmente en el SQL Editor:\r\n/*\r\nUPDATE auth.users \r\nSET user_metadata = jsonb_set(\r\n  COALESCE(user_metadata, '{}'::jsonb),\r\n  '{role}',\r\n  '\"admin\"'\r\n)\r\nWHERE email = 'acevedojuanesteban.colombia@gmail.com';\r\n\r\nUPDATE auth.users \r\nSET user_metadata = jsonb_set(\r\n  COALESCE(user_metadata, '{}'::jsonb),\r\n  '{isAdmin}',\r\n  'true'\r\n)\r\nWHERE email = 'acevedojuanesteban.colombia@gmail.com';\r\n*/\r\n\r\n-- 6. Crear índices para mejorar el rendimiento\r\nCREATE INDEX IF NOT EXISTS idx_users_email ON auth.users(email);\r\nCREATE INDEX IF NOT EXISTS idx_users_metadata_role ON auth.users USING GIN ((user_metadata->>'role'));\r\n\r\n-- 7. Comentarios sobre uso\r\nCOMMENT ON FUNCTION is_admin(UUID) IS 'Verifica si un usuario es administrador';\r\nCOMMENT ON FUNCTION update_user_role(UUID, TEXT) IS 'Actualiza el rol de un usuario (solo admins)';\r\nCOMMENT ON FUNCTION list_users_for_admin() IS 'Lista usuarios para administradores';\r\n\r\n-- 8. Verificar configuración\r\nSELECT \r\n  'Configuración de roles completada' as status,\r\n  'Ejecuta el UPDATE manual para configurar el primer admin' as next_step; ",
    "wine-rls-policies.sql": "-- Políticas RLS para la tabla wines\r\n-- Ejecuta este script en el SQL Editor de Supabase\r\n\r\n-- 1. Eliminar políticas existentes para empezar limpio\r\nDROP POLICY IF EXISTS \"Enable read access for all users\" ON consumibles;\r\nDROP POLICY IF EXISTS \"Enable insert for authenticated users only\" ON consumibles;\r\nDROP POLICY IF EXISTS \"Allow public read access to wines\" ON consumibles;\r\nDROP POLICY IF EXISTS \"Allow admin write access to wines\" ON consumibles;\r\n\r\n-- 2. Política para LECTURA PÚBLICA (todos pueden ver vinos)\r\nCREATE POLICY \"Enable read access for all users\" ON consumibles\r\nFOR SELECT USING (true);\r\n\r\n-- 3. Política para INSERCIÓN solo usuarios autenticados\r\nCREATE POLICY \"Enable insert for authenticated users only\" ON consumibles\r\nFOR INSERT \r\nTO authenticated \r\nWITH CHECK (true);\r\n\r\n-- 4. Política para ACTUALIZACIÓN solo usuarios autenticados\r\nCREATE POLICY \"Enable update for authenticated users only\" ON consumibles\r\nFOR UPDATE \r\nTO authenticated \r\nUSING (true)\r\nWITH CHECK (true);\r\n\r\n-- 5. Política para ELIMINACIÓN solo usuarios autenticados\r\nCREATE POLICY \"Enable delete for authenticated users only\" ON consumibles\r\nFOR DELETE \r\nTO authenticated \r\nUSING (true);\r\n\r\n-- 6. Políticas para wine_details (misma lógica)\r\nDROP POLICY IF EXISTS \"Enable read access for all users\" ON wine_details;\r\nDROP POLICY IF EXISTS \"Enable insert for authenticated users only\" ON wine_details;\r\n\r\nCREATE POLICY \"Enable read access for all users\" ON wine_details\r\nFOR SELECT USING (true);\r\n\r\nCREATE POLICY \"Enable insert for authenticated users only\" ON wine_details\r\nFOR INSERT \r\nTO authenticated \r\nWITH CHECK (true);\r\n\r\nCREATE POLICY \"Enable update for authenticated users only\" ON wine_details\r\nFOR UPDATE \r\nTO authenticated \r\nUSING (true)\r\nWITH CHECK (true);\r\n\r\nCREATE POLICY \"Enable delete for authenticated users only\" ON wine_details\r\nFOR DELETE \r\nTO authenticated \r\nUSING (true);\r\n\r\n-- 7. Verificar que RLS esté habilitado\r\nALTER TABLE wines ENABLE ROW LEVEL SECURITY;\r\nALTER TABLE wine_details ENABLE ROW LEVEL SECURITY;\r\nALTER TABLE consumibles ENABLE ROW LEVEL SECURITY;\r\n\r\n-- 8. Verificar las políticas creadas\r\nSELECT \r\n  schemaname,\r\n  tablename,\r\n  policyname,\r\n  permissive,\r\n  roles,\r\n  cmd,\r\n  qual\r\nFROM pg_policies \r\nWHERE tablename IN ('wines', 'wine_details', 'consumibles')\r\nORDER BY tablename, policyname;\r\n\r\n-- 9. Probar acceso público (debería funcionar)\r\nSELECT COUNT(*) as total_wines_public FROM wines;\r\n\r\n-- 10. Verificar que el usuario anónimo tiene permisos de lectura\r\nSELECT \r\n  grantee,\r\n  table_name,\r\n  privilege_type\r\nFROM information_schema.table_privileges \r\nWHERE table_name IN ('wines', 'wine_details', 'consumibles')\r\nAND grantee = 'anon'; "
  },
  "src": {
    "app": {
      "globals.css": "@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\nbody {\n  font-family: Arial, Helvetica, sans-serif;\n}\n\n*{\n  -ms-overflow-style: none;\n}\n::-webkit-scrollbar {\n  display: none;\n}\n\n@layer utilities {\n  .text-balance {\n    text-wrap: balance;\n  }\n\n  .bg-wine-gradient {\n    background: linear-gradient(135deg, #722f37 0%, #8b0000 50%, #4a0e0e 100%);\n  }\n\n  .bg-wine-light {\n    background: linear-gradient(135deg, #fdf2f8 0%, #fce7f3 50%, #fef2f2 100%);\n  }\n\n  .text-wine {\n    color: #722f37;\n  }\n\n  .border-wine {\n    border-color: #722f37;\n  }\n\n  .bg-red-25 {\n    background-color: #fef7f7;\n  }\n}\n\n@layer base {\n  :root {\n    --background: 0 0% 100%;\n    --foreground: 0 0% 3.9%;\n    --card: 0 0% 100%;\n    --card-foreground: 0 0% 3.9%;\n    --popover: 0 0% 100%;\n    --popover-foreground: 0 0% 3.9%;\n    --primary: 0 0% 9%;\n    --primary-foreground: 0 0% 98%;\n    --secondary: 0 0% 96.1%;\n    --secondary-foreground: 0 0% 9%;\n    --muted: 0 0% 96.1%;\n    --muted-foreground: 0 0% 45.1%;\n    --accent: 0 0% 96.1%;\n    --accent-foreground: 0 0% 9%;\n    --destructive: 0 84.2% 60.2%;\n    --destructive-foreground: 0 0% 98%;\n    --border: 0 0% 89.8%;\n    --input: 0 0% 89.8%;\n    --ring: 0 0% 3.9%;\n    --chart-1: 12 76% 61%;\n    --chart-2: 173 58% 39%;\n    --chart-3: 197 37% 24%;\n    --chart-4: 43 74% 66%;\n    --chart-5: 27 87% 67%;\n    --radius: 0.5rem;\n    --sidebar-background: 0 0% 98%;\n    --sidebar-foreground: 240 5.3% 26.1%;\n    --sidebar-primary: 240 5.9% 10%;\n    --sidebar-primary-foreground: 0 0% 98%;\n    --sidebar-accent: 240 4.8% 95.9%;\n    --sidebar-accent-foreground: 240 5.9% 10%;\n    --sidebar-border: 220 13% 91%;\n    --sidebar-ring: 217.2 91.2% 59.8%;\n  }\n  .dark {\n    --background: 0 0% 3.9%;\n    --foreground: 0 0% 98%;\n    --card: 0 0% 3.9%;\n    --card-foreground: 0 0% 98%;\n    --popover: 0 0% 3.9%;\n    --popover-foreground: 0 0% 98%;\n    --primary: 0 0% 98%;\n    --primary-foreground: 0 0% 9%;\n    --secondary: 0 0% 14.9%;\n    --secondary-foreground: 0 0% 98%;\n    --muted: 0 0% 14.9%;\n    --muted-foreground: 0 0% 63.9%;\n    --accent: 0 0% 14.9%;\n    --accent-foreground: 0 0% 98%;\n    --destructive: 0 62.8% 30.6%;\n    --destructive-foreground: 0 0% 98%;\n    --border: 0 0% 14.9%;\n    --input: 0 0% 14.9%;\n    --ring: 0 0% 83.1%;\n    --chart-1: 220 70% 50%;\n    --chart-2: 160 60% 45%;\n    --chart-3: 30 80% 55%;\n    --chart-4: 280 65% 60%;\n    --chart-5: 340 75% 55%;\n    --sidebar-background: 240 5.9% 10%;\n    --sidebar-foreground: 240 4.8% 95.9%;\n    --sidebar-primary: 224.3 76.3% 48%;\n    --sidebar-primary-foreground: 0 0% 100%;\n    --sidebar-accent: 240 3.7% 15.9%;\n    --sidebar-accent-foreground: 240 4.8% 95.9%;\n    --sidebar-border: 240 3.7% 15.9%;\n    --sidebar-ring: 217.2 91.2% 59.8%;\n  }\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    @apply bg-background text-foreground;\n  }\n}\n",
      "layout.tsx": "import type React from \"react\"\nimport type { Metadata } from \"next\"\nimport { Inter } from \"next/font/google\"\nimport \"./globals.css\"\nimport { AuthProvider } from \"@/providers/auth-provider\"\nimport { OrderStatusProvider } from \"@/providers/order-status-provider\"\nimport { CartProvider } from \"@/providers/cart-provider\"\nimport { Toaster } from \"@/components/ui/sonner\"\nimport { StructuredData } from \"@/components/structured-data\"\nimport { WineRealtimeProvider } from \"@/providers/wine-realtime-provider\"\nimport { MagicLinkProcessor } from \"@/components/magic-link-processor\"\nimport { Analytics } from \"@vercel/analytics/next\"\nimport { SpeedInsights } from \"@vercel/speed-insights/next\"\n\nconst inter = Inter({ subsets: [\"latin\"] })\n\nexport const metadata: Metadata = {\n  title: {\n    default: \"Los Vinos - Wine Store\",\n    template: \"%s | Los Vinos\"\n  },\n  description: \"Descubre los mejores vinos internacionales en nuestra tienda online. Vinos tintos, blancos y rosados de las mejores bodegas del mundo.\",\n  keywords: [\"vinos\", \"tienda de vinos\", \"vinos online\", \"bodegas\", \"comprar vinos\"],\n  authors: [{ name: \"Los Vinos\" }],\n  creator: \"Los Vinos\",\n  publisher: \"Los Vinos\",\n  formatDetection: {\n    email: false,\n    address: false,\n    telephone: false,\n  },\n  metadataBase: new URL('https://tu-dominio.com'),\n  alternates: {\n    canonical: '/',\n  },\n  openGraph: {\n    type: 'website',\n    locale: 'es_ES',\n    url: 'https://tu-dominio.com',\n    siteName: 'Los Vinos',\n    title: 'Los Vinos - Tienda Online de Vinos Internacionales',\n    description: 'Descubre los mejores vinos internacionales en nuestra tienda online.',\n    images: [\n      {\n        url: '/og-image.jpg',\n        width: 1200,\n        height: 630,\n        alt: 'Los Vinos - Tienda Online de Vinos',\n      },\n    ],\n  },\n  twitter: {\n    card: 'summary_large_image',\n    title: 'Los Vinos - Tienda Online de Vinos Internacionales',\n    description: 'Descubre los mejores vinos internacionales en nuestra tienda online.',\n    images: ['/og-image.jpg'],\n  },\n  robots: {\n    index: true,\n    follow: true,\n    googleBot: {\n      index: true,\n      follow: true,\n      'max-video-preview': -1,\n      'max-image-preview': 'large',\n      'max-snippet': -1,\n    },\n  },\n  icons: {\n    icon: [\n      { url: '/logo.svg' },\n      { url: '/logo.svg', sizes: '16x16', type: 'image/svg' },\n      { url: '/logo.svg', sizes: '32x32', type: 'image/svg' },\n    ],\n    apple: [\n      { url: '/logo.svg', sizes: '180x180', type: 'image/svg' },\n    ],\n  },\n  manifest: '/manifest.json',\n  verification: {\n    google: 'tu-google-verification-code',\n  },\n}\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"es\">\n      <head>\n        <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\" />\n        <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossOrigin=\"anonymous\" />\n        <meta name=\"theme-color\" content=\"#722f37\" />\n        <meta name=\"msapplication-TileColor\" content=\"#722f37\" />\n        <meta name=\"apple-mobile-web-app-capable\" content=\"yes\" />\n        <meta name=\"apple-mobile-web-app-status-bar-style\" content=\"default\" />\n        <meta name=\"apple-mobile-web-app-title\" content=\"Los Vinos\" />\n        <meta name=\"application-name\" content=\"Los Vinos\" />\n        <meta name=\"mobile-web-app-capable\" content=\"yes\" />\n        <StructuredData type=\"website\" />\n        <StructuredData type=\"organization\" />\n      </head>\n      <body className={inter.className}>\n        <WineRealtimeProvider>\n          <AuthProvider>\n            <MagicLinkProcessor />\n            <OrderStatusProvider>\n              <CartProvider>\n                {children}\n              </CartProvider>\n            </OrderStatusProvider>\n          </AuthProvider>\n        </WineRealtimeProvider>\n        <Toaster position=\"bottom-left\" richColors />\n        <Analytics />\n        <SpeedInsights />\n      </body>\n    </html>\n  )\n}\n",
      "page.tsx": "import { Metadata } from \"next\"\nimport { WineService } from \"@/lib/services/wine-service\"\nimport WineStore from \"@/components/wine-store\"\n\nexport const metadata: Metadata = {\n  title: \"Los Vinos - Tienda Online de Vinos Internacionales\",\n  description: \"Descubre los mejores vinos internacionales en nuestra tienda online. Vinos tintos, blancos y rosados de las mejores bodegas del mundo. Envío a domicilio.\",\n  keywords: \"vinos, tienda de vinos, vinos online, vinos tintos, vinos blancos, bodegas, comprar vinos\",\n  authors: [{ name: \"Los Vinos\" }],\n  creator: \"Los Vinos\",\n  publisher: \"Los Vinos\",\n  formatDetection: {\n    email: false,\n    address: false,\n    telephone: false,\n  },\n  metadataBase: new URL('https://tu-dominio.com'),\n  alternates: {\n    canonical: '/',\n  },\n  openGraph: {\n    title: \"Los Vinos - Tienda Online de Vinos Internacionales\",\n    description: \"Descubre los mejores vinos internacionales en nuestra tienda online. Vinos tintos, blancos y rosados de las mejores bodegas del mundo.\",\n    url: 'https://tu-dominio.com',\n    siteName: 'Los Vinos',\n    images: [\n      {\n        url: '/og-image.jpg',\n        width: 1200,\n        height: 630,\n        alt: 'Los Vinos - Tienda Online de Vinos',\n      },\n    ],\n    locale: 'es_ES',\n    type: 'website',\n  },\n  twitter: {\n    card: 'summary_large_image',\n    title: \"Los Vinos - Tienda Online de Vinos Internacionales\",\n    description: \"Descubre los mejores vinos internacionales en nuestra tienda online.\",\n    images: ['/og-image.jpg'],\n  },\n  robots: {\n    index: true,\n    follow: true,\n    googleBot: {\n      index: true,\n      follow: true,\n      'max-video-preview': -1,\n      'max-image-preview': 'large',\n      'max-snippet': -1,\n    },\n  },\n}\n\nexport default async function HomePage() {\n  const wines = await WineService.getAllWines();\n  return (\n    <main className=\"min-h-screen\">\n      <WineStore wines={wines} />\n    </main>\n  )\n}\n",
      "robots.ts": "import { MetadataRoute } from 'next'\r\n\r\nexport default function robots(): MetadataRoute.Robots {\r\n  return {\r\n    rules: {\r\n      userAgent: '*',\r\n      allow: '/',\r\n      disallow: ['/admin/', '/api/', '/_next/', '/static/'],\r\n    },\r\n    sitemap: 'https://tu-dominio.com/sitemap.xml',\r\n  }\r\n} ",
      "sitemap.ts": "import { MetadataRoute } from 'next'\r\n\r\nexport default function sitemap(): MetadataRoute.Sitemap {\r\n  const baseUrl = 'https://tu-dominio.com'\r\n  \r\n  return [\r\n    {\r\n      url: baseUrl,\r\n      lastModified: new Date(),\r\n      changeFrequency: 'daily',\r\n      priority: 1,\r\n    },\r\n    {\r\n      url: `${baseUrl}/vinos`,\r\n      lastModified: new Date(),\r\n      changeFrequency: 'daily',\r\n      priority: 0.9,\r\n    },\r\n    {\r\n      url: `${baseUrl}/categoria/tintos`,\r\n      lastModified: new Date(),\r\n      changeFrequency: 'weekly',\r\n      priority: 0.8,\r\n    },\r\n    {\r\n      url: `${baseUrl}/categoria/blancos`,\r\n      lastModified: new Date(),\r\n      changeFrequency: 'weekly',\r\n      priority: 0.8,\r\n    },\r\n    {\r\n      url: `${baseUrl}/categoria/rosados`,\r\n      lastModified: new Date(),\r\n      changeFrequency: 'weekly',\r\n      priority: 0.8,\r\n    },\r\n    {\r\n      url: `${baseUrl}/bodegas`,\r\n      lastModified: new Date(),\r\n      changeFrequency: 'weekly',\r\n      priority: 0.7,\r\n    },\r\n    {\r\n      url: `${baseUrl}/paises`,\r\n      lastModified: new Date(),\r\n      changeFrequency: 'weekly',\r\n      priority: 0.7,\r\n    },\r\n    {\r\n      url: `${baseUrl}/contacto`,\r\n      lastModified: new Date(),\r\n      changeFrequency: 'monthly',\r\n      priority: 0.5,\r\n    },\r\n    {\r\n      url: `${baseUrl}/sobre-nosotros`,\r\n      lastModified: new Date(),\r\n      changeFrequency: 'monthly',\r\n      priority: 0.5,\r\n    },\r\n  ]\r\n} "
    },
    "components": {
      "admin-panel.tsx": "\"use client\"\n\nimport { WineTable } from \"./wine-table\"\nimport type { Wine } from \"@/types\"\n\ninterface AdminPanelProps {\n  wines: Wine[]\n}\n\nexport function AdminPanel({ wines }: AdminPanelProps) {\n  return (\n    <div className=\"bg-gradient-to-br from-white via-red-50 to-purple-50 rounded-lg shadow-lg border border-red-200 p-6\">\n      <WineTable wines={wines} className=\"w-full\" />\n    </div>\n  )\n}\n",
      "admin-user-manager.tsx": "\"use client\"\r\n\r\nimport { useState, useEffect } from \"react\"\r\nimport { Button } from \"@/components/ui/button\"\r\nimport { Input } from \"@/components/ui/input\"\r\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\r\nimport { Badge } from \"@/components/ui/badge\"\r\nimport { useAuth } from \"@/providers/auth-provider\"\r\nimport { supabase } from \"@/lib/supabase\"\r\nimport { User, Crown, Shield, Users } from \"lucide-react\"\r\nimport { toast } from \"sonner\"\r\n\r\ninterface UserWithRole {\r\n  id: string\r\n  email: string\r\n  created_at: string\r\n  user_metadata: {\r\n    role?: string\r\n    isAdmin?: boolean\r\n  }\r\n  is_admin?: boolean\r\n}\r\n\r\nexport function AdminUserManager() {\r\n  const { user: currentUser, updateUserRole } = useAuth()\r\n  const [users, setUsers] = useState<UserWithRole[]>([])\r\n  const [isLoading, setIsLoading] = useState(true)\r\n  const [searchTerm, setSearchTerm] = useState(\"\")\r\n\r\n  // Verificar si el usuario actual es admin\r\n  if (!currentUser?.isAdmin) {\r\n    return (\r\n      <Card className=\"w-full\">\r\n        <CardContent className=\"p-6\">\r\n          <div className=\"text-center\">\r\n            <Shield className=\"h-12 w-12 text-red-500 mx-auto mb-4\" />\r\n            <h3 className=\"text-lg font-semibold mb-2\">Acceso Denegado</h3>\r\n            <p className=\"text-gray-600\">\r\n              Solo los administradores pueden acceder a esta sección.\r\n            </p>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    )\r\n  }\r\n\r\n  useEffect(() => {\r\n    loadUsers()\r\n  }, [])\r\n\r\n  const loadUsers = async () => {\r\n    try {\r\n      setIsLoading(true)\r\n      \r\n      // Usar la función RPC personalizada\r\n      const { data, error } = await supabase.rpc('get_users_for_admin')\r\n      \r\n      if (error) {\r\n        console.error('Error loading users:', error)\r\n        toast.error('Error al cargar usuarios: ' + error.message)\r\n        return\r\n      }\r\n\r\n      // Adaptar los datos recibidos\r\n      const adaptedUsers: UserWithRole[] = (data || []).map((user: any) => ({\r\n        id: user.id,\r\n        email: user.email,\r\n        created_at: user.created_at,\r\n        user_metadata: user.user_metadata || {},\r\n        is_admin: user.is_admin\r\n      }))\r\n\r\n      setUsers(adaptedUsers)\r\n      toast.success(`${adaptedUsers.length} usuarios cargados`)\r\n    } catch (error) {\r\n      console.error('Error loading users:', error)\r\n      toast.error('Error al cargar usuarios')\r\n    } finally {\r\n      setIsLoading(false)\r\n    }\r\n  }\r\n\r\n  const handleRoleUpdate = async (userId: string, isAdmin: boolean) => {\r\n    try {\r\n      // Usar la función RPC para actualizar el rol\r\n      const { data, error } = await supabase.rpc('update_user_role_safe', {\r\n        target_user_id: userId,\r\n        new_role: isAdmin ? 'admin' : 'user'\r\n      })\r\n      \r\n      if (error) {\r\n        throw error\r\n      }\r\n      \r\n      // Recargar usuarios para reflejar cambios\r\n      await loadUsers()\r\n      toast.success(`Usuario ${isAdmin ? 'promovido a administrador' : 'degradado a usuario'}`)\r\n    } catch (error: any) {\r\n      console.error('Error updating user role:', error)\r\n      toast.error('Error al actualizar el rol del usuario: ' + error.message)\r\n    }\r\n  }\r\n\r\n  const filteredUsers = users.filter(user =>\r\n    user.email.toLowerCase().includes(searchTerm.toLowerCase())\r\n  )\r\n\r\n  const isUserAdmin = (user: UserWithRole) => {\r\n    return user.is_admin || \r\n           user.user_metadata?.role === 'admin' || \r\n           user.user_metadata?.isAdmin === true ||\r\n           user.email === 'acevedojuanesteban.colombia@gmail.com'\r\n  }\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <Card className=\"w-full\">\r\n        <CardContent className=\"p-6\">\r\n          <div className=\"text-center\">\r\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-red-600 mx-auto mb-4\"></div>\r\n            <p>Cargando usuarios...</p>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Card className=\"w-full\">\r\n      <CardHeader>\r\n        <CardTitle className=\"flex items-center gap-2\">\r\n          <Users className=\"h-5 w-5\" />\r\n          Gestión de Usuarios\r\n        </CardTitle>\r\n      </CardHeader>\r\n      <CardContent className=\"space-y-4\">\r\n        <div className=\"flex gap-4\">\r\n          <Input\r\n            placeholder=\"Buscar por email...\"\r\n            value={searchTerm}\r\n            onChange={(e) => setSearchTerm(e.target.value)}\r\n            className=\"flex-1\"\r\n          />\r\n          <Button onClick={loadUsers} variant=\"outline\">\r\n            Actualizar\r\n          </Button>\r\n        </div>\r\n\r\n        <div className=\"space-y-2\">\r\n          {filteredUsers.map((user) => (\r\n            <div\r\n              key={user.id}\r\n              className=\"flex items-center justify-between p-3 border rounded-lg\"\r\n            >\r\n              <div className=\"flex items-center gap-3\">\r\n                <User className=\"h-5 w-5 text-gray-500\" />\r\n                <div>\r\n                  <p className=\"font-medium\">{user.email}</p>\r\n                  <p className=\"text-sm text-gray-500\">\r\n                    Creado: {new Date(user.created_at).toLocaleDateString()}\r\n                  </p>\r\n                </div>\r\n              </div>\r\n              \r\n              <div className=\"flex items-center gap-2\">\r\n                {isUserAdmin(user) ? (\r\n                  <Badge variant=\"default\" className=\"bg-purple-600\">\r\n                    <Crown className=\"h-3 w-3 mr-1\" />\r\n                    Admin\r\n                  </Badge>\r\n                ) : (\r\n                  <Badge variant=\"secondary\">\r\n                    Usuario\r\n                  </Badge>\r\n                )}\r\n                \r\n                {user.id !== currentUser?.id && (\r\n                  <Button\r\n                    size=\"sm\"\r\n                    variant={isUserAdmin(user) ? \"destructive\" : \"default\"}\r\n                    onClick={() => handleRoleUpdate(user.id, !isUserAdmin(user))}\r\n                  >\r\n                    {isUserAdmin(user) ? \"Quitar Admin\" : \"Hacer Admin\"}\r\n                  </Button>\r\n                )}\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n\r\n        {filteredUsers.length === 0 && (\r\n          <div className=\"text-center py-8\">\r\n            <Users className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\r\n            <p className=\"text-gray-500\">\r\n              {searchTerm ? 'No se encontraron usuarios' : 'No hay usuarios registrados'}\r\n            </p>\r\n          </div>\r\n        )}\r\n\r\n        {/* Información sobre la implementación */}\r\n        <div className=\"bg-green-50 p-4 rounded-lg\">\r\n          <p className=\"text-sm text-green-800\">\r\n            <strong>✅ Implementación completa:</strong> Esta gestión de usuarios usa funciones RPC \r\n            personalizadas en Supabase que verifican permisos de administrador de forma segura.\r\n          </p>\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n  )\r\n} ",
      "config-checker.tsx": "\"use client\"\r\n\r\nimport { useEffect, useState } from \"react\";\r\nimport { supabase } from \"@/lib/supabase\";\r\nimport { Alert, AlertDescription, AlertTitle } from \"./ui/alert\";\r\nimport { CheckCircle, XCircle, AlertTriangle } from \"lucide-react\";\r\n\r\ninterface ConfigStatus {\r\n  envVars: boolean;\r\n  connection: boolean;\r\n  realtime: boolean;\r\n  tableAccess: boolean;\r\n}\r\n\r\nexport function ConfigChecker() {\r\n  const [configStatus, setConfigStatus] = useState<ConfigStatus | null>(null);\r\n  const [isChecking, setIsChecking] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const checkConfiguration = async () => {\r\n      const status: ConfigStatus = {\r\n        envVars: false,\r\n        connection: false,\r\n        realtime: false,\r\n        tableAccess: false,\r\n      };\r\n\r\n      try {\r\n        // Verificar variables de entorno\r\n        const hasUrl = !!process.env.NEXT_PUBLIC_SUPABASE_URL;\r\n        const hasKey = !!process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;\r\n        status.envVars = hasUrl && hasKey;\r\n\r\n        if (!status.envVars) {\r\n          setConfigStatus(status);\r\n          setIsChecking(false);\r\n          return;\r\n        }\r\n\r\n        // Verificar conexión básica\r\n        try {\r\n          const { data, error } = await supabase\r\n            .from(\"wines\")\r\n            .select(\"id_vino\")\r\n            .limit(1);\r\n\r\n          status.connection = !error;\r\n          status.tableAccess = !error && data !== null;\r\n        } catch (error) {\r\n          console.error(\"Error checking connection:\", error);\r\n          status.connection = false;\r\n          status.tableAccess = false;\r\n        }\r\n\r\n        // Verificar realtime (esto es más complejo, solo verificamos que no haya errores inmediatos)\r\n        try {\r\n          const channel = supabase\r\n            .channel(\"config-test\")\r\n            .on(\"postgres_changes\", { event: \"*\", schema: \"public\", table: \"wines\" }, () => {})\r\n            .subscribe((status) => {\r\n              if (status === \"SUBSCRIBED\") {\r\n                setConfigStatus(prev => prev ? { ...prev, realtime: true } : null);\r\n                supabase.removeChannel(channel);\r\n              } else if (status === \"CHANNEL_ERROR\") {\r\n                setConfigStatus(prev => prev ? { ...prev, realtime: false } : null);\r\n                supabase.removeChannel(channel);\r\n              }\r\n            });\r\n\r\n          // Timeout para evitar esperar indefinidamente\r\n          setTimeout(() => {\r\n            if (configStatus?.realtime === undefined) {\r\n              setConfigStatus(prev => prev ? { ...prev, realtime: false } : null);\r\n              supabase.removeChannel(channel);\r\n            }\r\n          }, 5000);\r\n        } catch (error) {\r\n          console.error(\"Error checking realtime:\", error);\r\n          status.realtime = false;\r\n        }\r\n\r\n        setConfigStatus(status);\r\n      } catch (error) {\r\n        console.error(\"Error in configuration check:\", error);\r\n        setConfigStatus(status);\r\n      } finally {\r\n        setIsChecking(false);\r\n      }\r\n    };\r\n\r\n    checkConfiguration();\r\n  }, []);\r\n\r\n  if (isChecking) {\r\n    return (\r\n      <Alert className=\"mb-4\">\r\n        <AlertTriangle className=\"h-4 w-4\" />\r\n        <AlertTitle>Verificando configuración...</AlertTitle>\r\n        <AlertDescription>\r\n          Comprobando la configuración de Supabase...\r\n        </AlertDescription>\r\n      </Alert>\r\n    );\r\n  }\r\n\r\n  if (!configStatus) {\r\n    return null;\r\n  }\r\n\r\n  const allGood = Object.values(configStatus).every(Boolean);\r\n  const hasErrors = Object.values(configStatus).some(status => !status);\r\n\r\n  if (allGood) {\r\n    return (\r\n      <Alert className=\"mb-4 border-green-200 bg-green-50\">\r\n        <CheckCircle className=\"h-4 w-4 text-green-600\" />\r\n        <AlertTitle className=\"text-green-800\">Configuración correcta</AlertTitle>\r\n        <AlertDescription className=\"text-green-700\">\r\n          Todas las configuraciones de Supabase están funcionando correctamente.\r\n        </AlertDescription>\r\n      </Alert>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Alert className=\"mb-4 border-red-200 bg-red-50\">\r\n      <XCircle className=\"h-4 w-4 text-red-600\" />\r\n      <AlertTitle className=\"text-red-800\">Problemas de configuración detectados</AlertTitle>\r\n      <AlertDescription className=\"text-red-700 space-y-1\">\r\n        <div>Se encontraron los siguientes problemas:</div>\r\n        <ul className=\"list-disc list-inside space-y-1 text-sm\">\r\n          {!configStatus.envVars && (\r\n            <li>Variables de entorno de Supabase no configuradas</li>\r\n          )}\r\n          {!configStatus.connection && (\r\n            <li>No se puede conectar a Supabase</li>\r\n          )}\r\n          {!configStatus.tableAccess && (\r\n            <li>No se puede acceder a la tabla de vinos</li>\r\n          )}\r\n          {!configStatus.realtime && (\r\n            <li>Realtime no está funcionando correctamente</li>\r\n          )}\r\n        </ul>\r\n        <div className=\"text-xs mt-2\">\r\n          Consulta el archivo SUPABASE_SETUP.md para más información sobre cómo solucionar estos problemas.\r\n        </div>\r\n      </AlertDescription>\r\n    </Alert>\r\n  );\r\n} ",
      "debug-realtime-status.tsx": "\"use client\"\r\n\r\nimport { useWineRealtimeContext } from \"@/providers/wine-realtime-provider\";\r\nimport { useWines } from \"@/hooks/use-wines\";\r\nimport { useState } from \"react\";\r\nimport { Button } from \"./ui/button\";\r\nimport { Badge } from \"./ui/badge\";\r\nimport { Card, CardContent, CardHeader, CardTitle } from \"./ui/card\";\r\nimport { RefreshCw, Wifi, WifiOff, AlertTriangle } from \"lucide-react\";\r\n\r\nexport function DebugRealtimeStatus() {\r\n  const { wines: realtimeWines, isLoading, error, refetch } = useWineRealtimeContext();\r\n  const { isUsingFallback, realtimeStatus } = useWines();\r\n  const [isRefreshing, setIsRefreshing] = useState(false);\r\n\r\n  const handleRefresh = async () => {\r\n    setIsRefreshing(true);\r\n    try {\r\n      await refetch();\r\n    } catch (error) {\r\n      console.error('Error refreshing:', error);\r\n    } finally {\r\n      setIsRefreshing(false);\r\n    }\r\n  };\r\n\r\n  const getStatusIcon = () => {\r\n    switch (realtimeStatus) {\r\n      case 'connected':\r\n        return <Wifi className=\"h-4 w-4 text-green-500\" />;\r\n      case 'loading':\r\n        return <RefreshCw className=\"h-4 w-4 text-yellow-500 animate-spin\" />;\r\n      case 'error':\r\n        return <WifiOff className=\"h-4 w-4 text-red-500\" />;\r\n      default:\r\n        return <AlertTriangle className=\"h-4 w-4 text-gray-500\" />;\r\n    }\r\n  };\r\n\r\n  const getStatusColor = () => {\r\n    switch (realtimeStatus) {\r\n      case 'connected':\r\n        return 'bg-green-100 text-green-800 border-green-200';\r\n      case 'loading':\r\n        return 'bg-yellow-100 text-yellow-800 border-yellow-200';\r\n      case 'error':\r\n        return 'bg-red-100 text-red-800 border-red-200';\r\n      default:\r\n        return 'bg-gray-100 text-gray-800 border-gray-200';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Card className=\"w-full max-w-md\">\r\n      <CardHeader>\r\n        <CardTitle className=\"flex items-center gap-2 text-sm\">\r\n          {getStatusIcon()}\r\n          Estado de Conexión\r\n        </CardTitle>\r\n      </CardHeader>\r\n      <CardContent className=\"space-y-3\">\r\n        <div className=\"flex items-center justify-between\">\r\n          <span className=\"text-sm text-gray-600\">Estado:</span>\r\n          <Badge className={getStatusColor()}>\r\n            {realtimeStatus === 'connected' ? 'Conectado' : \r\n             realtimeStatus === 'loading' ? 'Conectando' : 'Error'}\r\n          </Badge>\r\n        </div>\r\n        \r\n        <div className=\"flex items-center justify-between\">\r\n          <span className=\"text-sm text-gray-600\">Modo:</span>\r\n          <Badge variant={isUsingFallback ? \"secondary\" : \"default\"}>\r\n            {isUsingFallback ? 'Sin conexión' : 'Tiempo real'}\r\n          </Badge>\r\n        </div>\r\n        \r\n        <div className=\"flex items-center justify-between\">\r\n          <span className=\"text-sm text-gray-600\">Vinos cargados:</span>\r\n          <span className=\"text-sm font-medium\">{realtimeWines.length}</span>\r\n        </div>\r\n        \r\n        <div className=\"flex items-center justify-between\">\r\n          <span className=\"text-sm text-gray-600\">Cargando:</span>\r\n          <span className=\"text-sm font-medium\">{isLoading ? 'Sí' : 'No'}</span>\r\n        </div>\r\n        \r\n        {error && (\r\n          <div className=\"bg-red-50 border border-red-200 rounded p-2\">\r\n            <p className=\"text-xs text-red-800\">\r\n              <strong>Error:</strong> {error.message}\r\n            </p>\r\n          </div>\r\n        )}\r\n        \r\n        <Button \r\n          onClick={handleRefresh} \r\n          disabled={isRefreshing}\r\n          size=\"sm\"\r\n          className=\"w-full\"\r\n        >\r\n          <RefreshCw className={`h-4 w-4 mr-2 ${isRefreshing ? 'animate-spin' : ''}`} />\r\n          {isRefreshing ? 'Actualizando...' : 'Actualizar'}\r\n        </Button>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n} ",
      "filters-sidebar.tsx": "\"use client\"\n\nimport { useState } from \"react\"\nimport { Filter, X } from \"lucide-react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Checkbox } from \"@/components/ui/checkbox\"\nimport { Label } from \"@/components/ui/label\"\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from \"@/components/ui/accordion\"\nimport { getCountryFlag } from \"@/utils/price\"\nimport { PriceRangeSlider } from \"./price-range-slider\"\n\ninterface FiltersSidebarProps {\n  variedades: string[]\n  bodegas: string[]\n  paises: string[]\n  colores: string[]\n  selectedVariedades: string[]\n  selectedBodegas: string[]\n  selectedPaises: string[]\n  selectedColores: string[]\n  priceRange: { min: number; max: number }\n  currentPriceRange: { min: number; max: number }\n  onToggleVariedad: (variedad: string) => void\n  onToggleBodega: (bodega: string) => void\n  onTogglePais: (pais: string) => void\n  onToggleColor: (color: string) => void\n  onUpdatePriceRange: (min: number, max: number) => void\n  onClearFilters: () => void\n  hasActiveFilters: boolean\n  varietalCounts: Record<string, number>\n  bodegaCounts: Record<string, number>\n  paisCounts: Record<string, number>\n  colorCounts: Record<string, number>\n  isOpen?: boolean\n  setIsOpen?: (open: boolean) => void\n}\n\n// Componente reutilizable para elementos de filtro\ninterface FilterItemProps {\n  id: string\n  label: string\n  checked: boolean\n  count: number\n  onToggle: () => void\n  icon?: React.ReactNode\n  hasScroll?: boolean\n}\n\nfunction FilterItem({ id, label, checked, count, onToggle, icon, hasScroll = false }: FilterItemProps) {\n  return (\n    <div className=\"flex items-center justify-between\">\n      <div className=\"flex items-center space-x-2\">\n        <Checkbox\n          id={id}\n          checked={checked}\n          onCheckedChange={onToggle}\n        />\n        <Label htmlFor={id} className=\"text-sm font-normal flex items-center space-x-2\">\n          {icon && <span>{icon}</span>}\n          <span>{label}</span>\n        </Label>\n      </div>\n      <span className=\"text-xs text-gray-500 bg-gray-100 px-2 py-1 rounded-full\">\n        {count}\n      </span>\n    </div>\n  )\n}\n\n// Componente reutilizable para secciones de filtro\ninterface FilterSectionProps {\n  value: string\n  title: string\n  items: Array<{\n    id: string\n    label: string\n    checked: boolean\n    count: number\n    onToggle: () => void\n    icon?: React.ReactNode\n  }>\n  hasScroll?: boolean\n}\n\nfunction FilterSection({ value, title, items, hasScroll = false }: FilterSectionProps) {\n  return (\n    <AccordionItem value={value}>\n      <AccordionTrigger className=\"text-base font-medium\">{title}</AccordionTrigger>\n      <AccordionContent>\n        <div className={`space-y-3 ${hasScroll ? 'max-h-52 overflow-y-auto' : ''}`}>\n          {items.map((item, index) => (\n            <FilterItem\n              key={`${item.id}-${index}`}\n              id={item.id}\n              label={item.label}\n              checked={item.checked}\n              count={item.count}\n              onToggle={item.onToggle}\n              icon={item.icon}\n            />\n          ))}\n        </div>\n      </AccordionContent>\n    </AccordionItem>\n  )\n}\n\n// Función helper para obtener el icono del color\nfunction getColorIcon(color: string) {\n  return (\n    <div\n      className={`w-3 h-3 rounded-full ${\n        color === \"Tinto\"\n          ? \"bg-red-600\"\n          : color === \"Blanco\"\n            ? \"bg-yellow-200 border border-yellow-400\"\n            : \"bg-pink-300\"\n      }`}\n    />\n  )\n}\n\nexport function FiltersSidebar({\n  variedades,\n  bodegas,\n  paises,\n  colores,\n  selectedVariedades,\n  selectedBodegas,\n  selectedPaises,\n  selectedColores,\n  priceRange,\n  currentPriceRange,\n  onToggleVariedad,\n  onToggleBodega,\n  onTogglePais,\n  onToggleColor,\n  onUpdatePriceRange,\n  onClearFilters,\n  hasActiveFilters,\n  varietalCounts,\n  bodegaCounts,\n  paisCounts,\n  colorCounts,\n  isOpen: externalIsOpen,\n  setIsOpen: externalSetIsOpen,\n}: FiltersSidebarProps) {\n  const [internalIsOpen, setInternalIsOpen] = useState(false)\n\n  const isOpen = externalIsOpen !== undefined ? externalIsOpen : internalIsOpen\n  const setIsOpen = externalSetIsOpen || setInternalIsOpen\n\n  // Configuración de las secciones de filtro\n  const filterSections = [\n    {\n      value: \"variedades\",\n      title: \"Variedades\",\n      items: variedades.map((variedad) => {\n        const key = variedad.trim().toLowerCase();\n        return {\n          id: variedad,\n          label: variedad,\n          checked: selectedVariedades.includes(variedad),\n          count: varietalCounts[key] || 0,\n          onToggle: () => onToggleVariedad(variedad),\n        }\n      }),\n      hasScroll: true,\n    },\n    {\n      value: \"paises\",\n      title: \"Países\",\n      items: paises.map((pais) => ({\n        id: pais,\n        label: pais,\n        checked: selectedPaises.includes(pais),\n        count: paisCounts[pais] || 0,\n        onToggle: () => onTogglePais(pais),\n        icon: getCountryFlag(pais),\n      })),\n    },\n    {\n      value: \"bodegas\",\n      title: \"Bodegas\",\n      items: bodegas.map((bodega) => ({\n        id: bodega,\n        label: bodega,\n        checked: selectedBodegas.includes(bodega),\n        count: bodegaCounts[bodega] || 0,\n        onToggle: () => onToggleBodega(bodega),\n      })),\n      hasScroll: true,\n    },\n    {\n      value: \"colores\",\n      title: \"Tipo de Vino\",\n      items: colores.map((color) => ({\n        id: color,\n        label: color,\n        checked: selectedColores.includes(color),\n        count: colorCounts[color] || 0,\n        onToggle: () => onToggleColor(color),\n        icon: getColorIcon(color),\n      })),\n    },\n  ]\n\n  return (\n    <>\n      {/* Overlay para móvil/tablet */}\n      {isOpen && (\n        <div className=\"lg:hidden fixed inset-0 bg-black bg-opacity-50 z-40\" onClick={() => setIsOpen(false)} />\n      )}\n\n      {/* Sidebar */}\n      <aside\n        className={`bg-gradient-to-b from-white to-red-50 rounded-lg shadow-lg border border-red-100 p-6 h-fit lg:block lg:static lg:translate-x-0 w-72 ${isOpen ? \"block\" : \"hidden\"}\n        lg:z-auto z-50\n        fixed lg:relative top-0 left-0 lg:top-auto lg:left-auto\n        max-h-screen lg:max-h-none overflow-y-auto\n      `}\n      >\n        {/* Botón cerrar para móvil/tablet */}\n        <div className=\"lg:hidden flex justify-between items-center mb-4\">\n          <h2 className=\"text-lg font-semibold\">Filtros</h2>\n          <Button variant=\"ghost\" size=\"sm\" onClick={() => setIsOpen(false)}>\n            <X className=\"h-4 w-4\" />\n          </Button>\n        </div>\n\n        {/* Título del sidebar */}\n        <div className=\"hidden lg:flex items-center space-x-2 mb-6\">\n          <Filter className=\"h-5 w-5 text-red-600\" />\n          <h2 className=\"text-lg font-semibold text-red-900\">Filtros</h2>\n        </div>\n\n        {/* Filtro de precio */}\n        <div className=\"mb-6\">\n          <PriceRangeSlider\n            minPrice={priceRange.min}\n            maxPrice={priceRange.max}\n            currentMin={currentPriceRange.min}\n            currentMax={currentPriceRange.max}\n            onRangeChange={onUpdatePriceRange}\n          />\n        </div>\n\n        {/* Acordeón con filtros */}\n        <Accordion type=\"multiple\" defaultValue={[\"variedades\", \"bodegas\", \"paises\", \"colores\"]}>\n          {filterSections.map((section, index) => (\n            <FilterSection\n              key={`${section.value}-${index}`}\n              value={section.value}\n              title={section.title}\n              items={section.items}\n              hasScroll={section.hasScroll}\n            />\n          ))}\n        </Accordion>\n\n        {/* Botones de acción */}\n        {hasActiveFilters && (\n          <>\n            <Button variant=\"outline\" onClick={onClearFilters} className=\"w-full mt-4\">\n              Limpiar Filtros\n            </Button>\n            <Button onClick={() => setIsOpen(false)} className=\"lg:hidden w-full mt-2 bg-red-600 hover:bg-red-700\">\n              Aplicar Filtros\n            </Button>\n          </>\n        )}\n      </aside>\n    </>\n  )\n}\n",
      "footer.tsx": "import { Instagram, Mail, Phone, MapPin, Wine } from \"lucide-react\"\r\nimport WineLogo from \"./wine-logo\"\r\n\r\nexport function Footer() {\r\n  const currentYear = new Date().getFullYear()\r\n\r\n  const socialLinks = [\r\n    {\r\n      name: \"Instagram\", \r\n      icon: Instagram,\r\n      href: \"https://www.instagram.com/losvinosvilladeleyva?igsh=amY1bzh5N2xkbHg1\",\r\n      color: \"hover:text-pink-600\"\r\n    }\r\n  ]\r\n\r\n  const contactInfo = [\r\n    {\r\n      icon: Phone,\r\n      text: \"+57 321 908 5857\",\r\n      href: \"tel:+573219085857\"\r\n    },\r\n    {\r\n      icon: Mail,\r\n      text: \"ventas@vinosdelavilla.com\",\r\n      href: \"mailto:ventas@vinosdelavilla.com\"\r\n    },\r\n    {\r\n      icon: MapPin,\r\n      text: \"Cra. 9 #11-47, Villa de Leyva, Boyacá\",\r\n      href: \"https://maps.google.com/maps/place/LOS+VINOS+WINE+BAR/@5.6328072,-73.5239815,21z/data=!4m6!3m5!1s0x8e41d7122d492603:0x7667f05f2e9e45ea!8m2!3d5.6328438!4d-73.5240519!16s%2Fg%2F11gfls7d7m?entry=ttu&g_ep=EgoyMDI1MDcwNi4wIKXMDSoASAFQAw%3D%3D\"\r\n    }\r\n  ]\r\n\r\n  return (\r\n    <footer className=\"bg-gradient-to-r from-red-900 via-red-800 to-purple-900 text-white\">\r\n      <div className=\"container mx-auto px-4 py-12\">\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8\">\r\n          \r\n          {/* Logo y descripción */}\r\n          <div className=\"lg:col-span-2\">\r\n            <div className=\"flex items-center gap-3 mb-4\">\r\n              <WineLogo className=\"size-10\" />\r\n              <div>\r\n                <h3 className=\"text-xl font-bold bg-gradient-to-r from-white to-red-200 bg-clip-text text-transparent\">\r\n                  Los Vinos\r\n                </h3>\r\n                <p className=\"text-sm text-red-200\">Wine Bar</p>\r\n              </div>\r\n            </div>\r\n            <p className=\"text-red-100 text-sm leading-relaxed mb-4\">\r\n              Descubre los mejores vinos internacionales en nuestra tienda online. \r\n              Vinos tintos, blancos y rosados de las mejores bodegas del mundo.\r\n            </p>\r\n            <div className=\"flex items-center gap-2 text-red-200\">\r\n              <Wine className=\"h-4 w-4\" />\r\n              <span className=\"text-sm\">Desde 2018</span>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Información de contacto */}\r\n          <div>\r\n            <h4 className=\"text-lg font-semibold mb-4 text-white\">Contacto</h4>\r\n            <ul className=\"space-y-3\">\r\n              {contactInfo.map((contact, index) => (\r\n                <li key={index}>\r\n                  <a \r\n                    href={contact.href}\r\n                    target=\"_blank\"\r\n                    rel=\"noopener noreferrer\"\r\n                    className=\"flex items-center gap-3 text-red-100 hover:text-white transition-colors text-sm\"\r\n                  >\r\n                    <contact.icon className=\"h-4 w-4 flex-shrink-0\" />\r\n                    <span>{contact.text}</span>\r\n                  </a>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n\r\n          {/* Redes sociales */}\r\n          <div>\r\n            <h4 className=\"text-lg font-semibold mb-4 text-white\">Síguenos</h4>\r\n            <p className=\"text-red-100 text-sm mb-4\">\r\n              Mantente al día con nuestras novedades, ofertas especiales y eventos.\r\n            </p>\r\n            <div className=\"flex gap-3\">\r\n              {socialLinks.map((social) => (\r\n                <a\r\n                  key={social.name}\r\n                  href={social.href}\r\n                  target=\"_blank\"\r\n                  rel=\"noopener noreferrer\"\r\n                  className={`p-2 bg-white/10 rounded-lg transition-all duration-200 hover:bg-white/20 ${social.color}`}\r\n                  aria-label={`Síguenos en ${social.name}`}\r\n                >\r\n                  <social.icon className=\"h-5 w-5\" />\r\n                </a>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Línea divisoria */}\r\n        <div className=\"border-t border-red-700 mt-8 pt-8\">\r\n          <div className=\"flex flex-col md:flex-row justify-between items-center gap-4\">\r\n            <p className=\"text-red-200 text-sm\">\r\n              © {currentYear} Los Vinos. Todos los derechos reservados.\r\n            </p>\r\n            <div className=\"flex gap-6 text-sm\">\r\n              <a href=\"#\" className=\"text-red-200 hover:text-white transition-colors\">\r\n                Política de Privacidad\r\n              </a>\r\n              <a href=\"#\" className=\"text-red-200 hover:text-white transition-colors\">\r\n                Términos y Condiciones\r\n              </a>\r\n              <a href=\"#\" className=\"text-red-200 hover:text-white transition-colors\">\r\n                Política de Cookies\r\n              </a>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </footer>\r\n  )\r\n} ",
      "header.tsx": "\"use client\"\n\nimport { Settings, Search, ShoppingCart, Filter } from \"lucide-react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { useAuth } from \"@/providers/auth-provider\"\nimport { LoginModal } from \"./modales/login-modal\"\nimport { UserMenu } from \"./user-menu\"\nimport WineLogo from \"./wine-logo\"\nimport { useState } from \"react\"\nimport { CartIcon } from \"./ui/cart\"\n\ninterface HeaderProps {\n  currentView: \"store\" | \"admin\" | \"cart\"\n  onViewChange: (view: \"store\" | \"admin\" | \"cart\") => void\n  searchTerm?: string\n  onSearchChange?: (term: string) => void\n  cartItemCount?: number\n  onCartClick?: () => void\n  onFiltersClick?: () => void\n  filteredWinesCount?: number\n  availableViews?: (\"store\" | \"admin\" | \"cart\")[]\n}\n\nexport function Header({\n  currentView,\n  onViewChange,\n  searchTerm = \"\",\n  onSearchChange,\n  cartItemCount = 0,\n  onCartClick,\n  onFiltersClick,\n  filteredWinesCount = 0,\n  availableViews = [\"store\"],\n}: HeaderProps) {\n  const { isLoggedIn, user } = useAuth()\n  const [isHovered, setIsHovered] = useState(false)\n\n  return (\n    <div className=\"sticky top-0 z-50 bg-white shadow-lg\">\n      {/* Header principal */}\n      <header className=\"bg-gradient-to-r from-red-100 via-red-50 to-purple-100 border-b border-red-700\">\n        <div className=\"container mx-auto px-4 py-6\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4 min-w-72\">\n              <WineLogo className=\"size-16\" />\n              <div className=\"w-full\">\n                <h1 className=\"text-3xl font-bold bg-gradient-to-r from-red-800 via-red-600 to-purple-700 bg-clip-text text-transparent\">\n                  Los Vinos\n                </h1>\n                <p className=\"text-sm text-gray-600 text-start font-medium\">Wine Bar</p>\n              </div>\n            </div>\n\n            {currentView === \"store\" && onSearchChange && (\n              <div className=\"hidden lg:block w-full max-w-3xl mx-auto px-4 py-3\">\n                <div className=\"flex flex-1 items-center gap-4 mx-auto\">\n                  <div className=\"relative flex-1 max-w-lg\">\n                    <Search className=\"absolute left-4 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5\" />\n                    <Input\n                      type=\"text\"\n                      placeholder=\"Buscar por nombre, variedad, año, tipo de crianza, precio...\"\n                      value={searchTerm}\n                      onChange={(e) => onSearchChange(e.target.value)}\n                      className=\"pl-12 pr-4 py-3 w-full text-lg border border-gray-300 focus:ring-2 focus:ring-red-500 focus:border-red-500\"\n                    />\n                  </div>\n                  <Button\n                    onClick={() => onViewChange(\"cart\")}\n                    className=\"bg-red-600 hover:bg-red-700 px-4 py-3 flex items-center gap-2 whitespace-nowrap\"\n                    onMouseEnter={() => setIsHovered(true)}\n                    onMouseLeave={() => setIsHovered(false)}\n                  >\n                    <CartIcon className=\"h-4 w-4\" isHovered={isHovered} />\n                    <span className=\"font-medium w-5 text-right\">{cartItemCount}</span>\n                  </Button>\n                </div>\n              </div>\n            )}\n\n            <div className=\"hidden lg:block\">\n              <div className=\"flex items-center space-x-6\">\n                <div className=\"relative\">\n                  {isLoggedIn ? (\n                    <UserMenu\n                      currentView={currentView}\n                      onViewChange={onViewChange}\n                      availableViews={availableViews}\n                    />\n                  ) : (\n                    <div className=\"relative\">\n                      <div className=\"absolute inset-0 bg-gradient-to-r from-red-500 to-purple-600 rounded-lg blur opacity-25\"></div>\n                      <div className=\"relative bg-white/90 backdrop-blur-sm rounded-lg p-1 shadow-lg border border-red-100\">\n                        <LoginModal />\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Barra de búsqueda móvil - solo mostrar en vista de tienda */}\n      {currentView === \"store\" && onSearchChange && (\n        <div className=\"lg:hidden bg-white border-b border-gray-200\">\n          <div className=\"container mx-auto px-4 py-3\">\n            <div className=\"flex items-center gap-3 mb-3\">\n              <div className=\"relative flex-1\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                <Input\n                  type=\"text\"\n                  placeholder=\"Buscar vinos...\"\n                  value={searchTerm}\n                  onChange={(e) => onSearchChange(e.target.value)}\n                  className=\"pl-10 pr-4 py-2 w-full border border-gray-300 rounded-lg focus:ring-2 focus:ring-red-500 focus:border-red-500\"\n                />\n              </div>\n              <Button\n                onClick={() => onViewChange(\"cart\")}\n                className=\"bg-red-600 hover:bg-red-700 rounded-lg px-3 py-2 flex items-center gap-2\"\n              >\n                <ShoppingCart className=\"h-4 w-4\" />\n                <span className=\"font-medium\">{cartItemCount}</span>\n              </Button>\n            </div>\n\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm text-gray-600\">{filteredWinesCount} vinos encontrados</span>\n              <div className=\"flex items-center gap-2\">\n                <Button\n                  onClick={onFiltersClick}\n                  className=\"bg-red-600 hover:bg-red-700 text-white shadow-lg rounded-lg px-3 py-1 text-sm\"\n                  size=\"sm\"\n                >\n                  <Filter className=\"h-4 w-4 mr-2\" />\n                  Filtros\n                </Button>\n                {isLoggedIn && (\n                  <UserMenu\n                    currentView={currentView}\n                    onViewChange={onViewChange}\n                    availableViews={availableViews}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  )\n}\n",
      "LoginForm.tsx": "import { useState } from \"react\";\r\nimport { useAuth } from \"@/providers/auth-provider\";\r\n\r\nexport default function LoginForm() {\r\n  const { login } = useAuth();\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [success, setSuccess] = useState(false);\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    setError(null);\r\n    setSuccess(false);\r\n    try {\r\n      await login(email);\r\n      setSuccess(true);\r\n    } catch (err: any) {\r\n      setError(err.message);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} className=\"flex flex-col gap-4 max-w-sm mx-auto mt-8 p-6 bg-white rounded shadow\">\r\n      <h2 className=\"text-xl font-bold mb-2\">Iniciar sesión</h2>\r\n      <input\r\n        value={email}\r\n        onChange={e => setEmail(e.target.value)}\r\n        placeholder=\"Email\"\r\n        type=\"email\"\r\n        className=\"border p-2 rounded\"\r\n        required\r\n      />\r\n      <input\r\n        value={password}\r\n        onChange={e => setPassword(e.target.value)}\r\n        type=\"password\"\r\n        placeholder=\"Contraseña\"\r\n        className=\"border p-2 rounded\"\r\n        required\r\n      />\r\n      <button type=\"submit\" className=\"bg-red-600 text-white py-2 rounded hover:bg-red-700 transition\">Iniciar sesión</button>\r\n      {error && <div className=\"text-red-600 text-sm\">{error}</div>}\r\n      {success && <div className=\"text-green-600 text-sm\">¡Sesión iniciada correctamente!</div>}\r\n    </form>\r\n  );\r\n} ",
      "magic-link-processor.tsx": "\"use client\"\r\n\r\nimport { useAuth } from \"@/providers/auth-provider\"\r\n\r\nexport function MagicLinkProcessor() {\r\n  const { isProcessingMagicLink } = useAuth()\r\n\r\n  if (!isProcessingMagicLink) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <div className=\"fixed inset-0 z-[9999] bg-white/95 backdrop-blur-sm flex items-center justify-center\">\r\n      <div className=\"text-center space-y-4\">\r\n        <div className=\"animate-spin rounded-full h-16 w-16 border-b-2 border-red-600 mx-auto\"></div>\r\n        <div className=\"space-y-2\">\r\n          <h2 className=\"text-xl font-semibold text-gray-900\">\r\n            Procesando enlace de acceso\r\n          </h2>\r\n          <p className=\"text-gray-600 max-w-sm\">\r\n            Estamos verificando tu enlace de acceso. Por favor espera un momento...\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n} ",
      "modales": {
        "delete-wine-modal.tsx": "import { useFormStatus } from 'react-dom';\r\nimport { Dialog, DialogTrigger, DialogContent, DialogHeader, DialogTitle, DialogDescription } from '@/components/ui/dialog';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Label } from '@/components/ui/label';\r\nimport { AlertTriangle } from 'lucide-react';\r\nimport { ReactNode, useState } from 'react';\r\nimport { Wine } from '@/types';\r\n\r\nfunction SubmitButton({ isDisabled }: { isDisabled: boolean }) {\r\n  const { pending } = useFormStatus();\r\n  return (\r\n    <Button \r\n      type=\"submit\" \r\n      disabled={pending || isDisabled} \r\n      variant=\"destructive\"\r\n      aria-describedby=\"submit-status\"\r\n    >\r\n      {pending ? 'Eliminando...' : 'Eliminar vino'}\r\n    </Button>\r\n  );\r\n}\r\n\r\nexport default function DeleteWineModal({ vino, children }: {\r\n  vino: Wine;\r\n  children: ReactNode;\r\n}) {\r\n  const [confirmText, setConfirmText] = useState('');\r\n  const isConfirmValid = confirmText === vino.nombre;\r\n\r\n  async function handleDelete(formData: FormData) {\r\n    const json = Object.fromEntries(formData.entries());\r\n    // Aquí llamas a tu API para eliminar el vino\r\n    await new Promise((res) => setTimeout(res, 1000));\r\n  }\r\n\r\n  return (\r\n    <Dialog>\r\n      <DialogTrigger asChild>{children}</DialogTrigger>\r\n\r\n      <DialogContent className=\"w-full max-w-md\">\r\n        <DialogHeader>\r\n          <DialogTitle className=\"flex items-center gap-2 text-destructive\">\r\n            <AlertTriangle className=\"h-5 w-5\" />\r\n            Eliminar Vino\r\n          </DialogTitle>\r\n          <DialogDescription>\r\n            Esta acción no se puede deshacer. Esto eliminará permanentemente el vino{' '}\r\n            <span className=\"font-semibold\">{vino.nombre}</span> de {vino.wine_details.bodega}.\r\n          </DialogDescription>\r\n        </DialogHeader>\r\n\r\n        <form action={handleDelete} className=\"space-y-4 mt-4\">\r\n          <div className=\"p-4 bg-destructive/10 border border-destructive/20 rounded-lg\">\r\n            <p className=\"text-sm text-destructive font-medium mb-2\">\r\n              ⚠️ Advertencia\r\n            </p>\r\n            <p className=\"text-sm text-muted-foreground\">\r\n              Para confirmar la eliminación, escribe exactamente el nombre del vino: <strong>{vino.nombre}</strong>\r\n            </p>\r\n          </div>\r\n\r\n          <div>\r\n            <Label htmlFor=\"confirm-text\">Confirmar nombre del vino</Label>\r\n            <Input \r\n              id=\"confirm-text\"\r\n              name=\"confirm-text\"\r\n              value={confirmText}\r\n              onChange={(e) => setConfirmText(e.target.value)}\r\n              placeholder={`Escribe: ${vino.nombre}`}\r\n              className={!isConfirmValid && confirmText ? 'border-destructive' : ''}\r\n            />\r\n            {!isConfirmValid && confirmText && (\r\n              <p className=\"text-sm text-destructive mt-1\">\r\n                El nombre debe coincidir exactamente con \"{vino.nombre}\"\r\n              </p>\r\n            )}\r\n          </div>\r\n\r\n          {/* Campos ocultos para enviar datos del vino */}\r\n          <Input type=\"hidden\" name=\"vino_id\" value={vino.id_vino} />\r\n          <Input type=\"hidden\" name=\"vino_nombre\" value={vino.nombre} />\r\n\r\n          {/* Botones */}\r\n          <div className=\"flex gap-2 pt-4\">\r\n            <Button type=\"button\" variant=\"outline\" className=\"flex-1\">\r\n              Cancelar\r\n            </Button>\r\n            <SubmitButton isDisabled={!isConfirmValid} />\r\n          </div>\r\n          \r\n          <p id=\"submit-status\" className=\"sr-only\" aria-live=\"polite\">\r\n            Estado del formulario\r\n          </p>\r\n        </form>\r\n      </DialogContent>\r\n    </Dialog>\r\n  )\r\n}",
        "edit-consumible-modal.tsx": "import { useState, useRef } from 'react';\r\nimport { Dialog, DialogTrigger, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Label } from '@/components/ui/label';\r\nimport { Textarea } from '@/components/ui/textarea';\r\nimport type { Consumibles } from '@/types';\r\nimport { Upload, X, Image as ImageIcon } from 'lucide-react';\r\nimport { supabase } from '@/lib/supabase';\r\nimport { useToast } from '@/hooks/use-toast';\r\n\r\nexport default function EditConsumibleModal({\r\n  consumible,\r\n  children,\r\n  onSave,\r\n}: {\r\n  consumible: Consumibles;\r\n  children: React.ReactNode;\r\n  onSave: (c: Consumibles) => void;\r\n}) {\r\n  const [open, setOpen] = useState(false);\r\n  const [formData, setFormData] = useState({\r\n    nombre: consumible.nombre,\r\n    descripcion: consumible.descripcion,\r\n    precio: consumible.precio,\r\n    url_imagen: consumible.url_imagen,\r\n  });\r\n  const [selectedImage, setSelectedImage] = useState<File | null>(null);\r\n  const [imagePreview, setImagePreview] = useState<string | null>(consumible.url_imagen);\r\n  const fileInputRef = useRef<HTMLInputElement>(null);\r\n  const [isUploading, setIsUploading] = useState(false);\r\n  const { toast } = useToast();\r\n\r\n  const handleFieldChange = (field: string, value: any) => {\r\n    setFormData(prev => ({ ...prev, [field]: value }));\r\n  };\r\n\r\n  const handleImageSelect = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const file = event.target.files?.[0];\r\n    if (file) {\r\n      if (!file.type.startsWith('image/')) {\r\n        alert('Por favor selecciona solo archivos de imagen');\r\n        return;\r\n      }\r\n      setSelectedImage(file);\r\n      const reader = new FileReader();\r\n      reader.onload = (e) => setImagePreview(e.target?.result as string);\r\n      reader.readAsDataURL(file);\r\n    }\r\n  };\r\n\r\n  const handleRemoveImage = () => {\r\n    setSelectedImage(null);\r\n    setImagePreview(null);\r\n    if (fileInputRef.current) fileInputRef.current.value = '';\r\n  };\r\n\r\n  const uploadImageToStorage = async (file: File): Promise<string> => {\r\n    const ext = file.name.split('.').pop();\r\n    const fileName = `consumible-${consumible.id}-${Date.now()}.${ext}`;\r\n    const { data, error } = await supabase.storage.from('images').upload(fileName, file, { upsert: true });\r\n    if (error) throw error;\r\n    const { data: urlData } = supabase.storage.from('images').getPublicUrl(fileName);\r\n    return urlData.publicUrl;\r\n  };\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    setIsUploading(true);\r\n    let imageUrl = formData.url_imagen;\r\n    try {\r\n      if (selectedImage) {\r\n        imageUrl = await uploadImageToStorage(selectedImage);\r\n      }\r\n      const { error } = await supabase\r\n        .from('consumibles')\r\n        .update({\r\n          nombre: formData.nombre,\r\n          descripcion: formData.descripcion,\r\n          precio: formData.precio,\r\n          url_imagen: imageUrl,\r\n        })\r\n        .eq('id', consumible.id);\r\n      if (error) throw error;\r\n      toast({ title: 'Consumible actualizado', description: 'Los cambios se guardaron correctamente.' });\r\n      onSave({ ...consumible, ...formData, url_imagen: imageUrl });\r\n      setOpen(false);\r\n    } catch (err: any) {\r\n      toast({ title: 'Error al guardar', description: err.message || 'No se pudo guardar el consumible', variant: 'destructive' });\r\n    } finally {\r\n      setIsUploading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Dialog open={open} onOpenChange={setOpen}>\r\n      <DialogTrigger asChild>{children}</DialogTrigger>\r\n      <DialogContent>\r\n        <DialogHeader>\r\n          <DialogTitle>Editar consumible</DialogTitle>\r\n        </DialogHeader>\r\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\r\n          <div>\r\n            <Label>Nombre</Label>\r\n            <Input\r\n              value={formData.nombre}\r\n              onChange={e => handleFieldChange('nombre', e.target.value)}\r\n              required\r\n            />\r\n          </div>\r\n          <div>\r\n            <Label>Descripción</Label>\r\n            <Textarea\r\n              value={formData.descripcion}\r\n              onChange={e => handleFieldChange('descripcion', e.target.value)}\r\n              required\r\n            />\r\n          </div>\r\n          <div>\r\n            <Label>Precio</Label>\r\n            <Input\r\n              type=\"number\"\r\n              min={0}\r\n              value={formData.precio}\r\n              onChange={e => handleFieldChange('precio', Number(e.target.value))}\r\n              required\r\n            />\r\n          </div>\r\n          <div>\r\n            <Label>Imagen</Label>\r\n            <div className=\"flex flex-col items-center gap-4 mt-2\">\r\n              <Input\r\n                type=\"file\"\r\n                accept=\"image/*\"\r\n                ref={fileInputRef}\r\n                onChange={handleImageSelect}\r\n                className=\"w-full\"\r\n                />\r\n              {imagePreview && (\r\n                <div className=\"relative\">\r\n                  <img src={imagePreview} alt=\"Preview\" className=\"w-20 h-20 object-cover rounded\" />\r\n                  <button type=\"button\" onClick={handleRemoveImage} className=\"absolute -top-2 -right-2 bg-red-500 text-white rounded-full p-1\"><X size={14} /></button>\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n          <Button type=\"submit\" className=\"w-full\" disabled={isUploading}>\r\n            {isUploading ? 'Guardando...' : 'Guardar cambios'}\r\n          </Button>\r\n        </form>\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n} ",
        "edit-wine-modal.tsx": "'use client';\n\nimport { useState, useEffect, useRef } from 'react';\nimport { useFormStatus } from 'react-dom';\nimport { Dialog, DialogTrigger, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Wine } from '@/types';\nimport { ReactNode } from 'react';\nimport { supabase } from '@/lib/supabase';\nimport { Upload, X, Image as ImageIcon } from 'lucide-react';\nimport Image from 'next/image';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '../ui/select';\nimport MultipleSelector, { Option } from '../ui/multiple-selector';\nimport { useToast } from \"@/hooks/use-toast\"\nimport ReactDOM from \"react-dom\";\n\nconst TODAS_VARIEDADES = {\n  \"Vino Tinto\": [\n    \"Carmenere\",\n  ],\n  \"Vino Blanco\": [],\n  \"Vino Rosé\": [\n    \"Syrah Rosé\",\n  ],\n  \"Vino Espumoso\": [],\n  \"Ecológico\": []\n};\n\n// Crear opciones para el MultipleSelector\nconst VARIEDADES_OPTIONS: Option[] = Object.entries(TODAS_VARIEDADES)\n  .flatMap(([categoria, variedades]) =>\n    variedades.map(variedad => ({\n      value: variedad,\n      label: variedad,\n      categoria: categoria\n    }))\n  );\n\nfunction SubmitButton() {\n  const { pending } = useFormStatus();\n  return (\n    <Button type=\"submit\" disabled={pending} className=\"w-full\">\n      {pending ? 'Guardando...' : 'Guardar cambios'}\n    </Button>\n  );\n}\n\nfunction VariedadesSelector({ defaultVariedades = [], onVariedadesChange }: {\n  defaultVariedades?: string[];\n  onVariedadesChange: (variedades: string[]) => void;\n}) {\n  const [selectedVariedades, setSelectedVariedades] = useState<Option[]>(\n    defaultVariedades.map(v => ({ value: v, label: v }))\n  );\n\n  // Sincronizar cuando cambian las variedades por defecto\n  useEffect(() => {\n    setSelectedVariedades(defaultVariedades.map(v => ({ value: v, label: v })));\n  }, [defaultVariedades]);\n\n  const handleVariedadesChange = (options: Option[]) => {\n    setSelectedVariedades(options);\n    onVariedadesChange(options.map(opt => opt.value));\n  };\n\n  return (\n    <div className=\"space-y-2\">\n      <Label>Variedades</Label>\n      <MultipleSelector\n        className=\"w-full\"\n        value={selectedVariedades}\n        onChange={handleVariedadesChange}\n        options={VARIEDADES_OPTIONS}\n        placeholder=\"Seleccionar variedades...\"\n        hideClearAllButton={true}\n      />\n\n      {/* Inputs hidden para el formulario */}\n      {selectedVariedades.map((v, i) => (\n        <input key={i} type=\"hidden\" name=\"variedades\" value={v.value} />\n      ))}\n    </div>\n  );\n}\n\nexport default function EditWineModal({\n  vino,\n  children,\n  onWineUpdate,\n}: {\n  vino: Wine;\n  children: ReactNode;\n  onWineUpdate?: () => void;\n}) {\n  // Estado para almacenar los valores actuales del formulario\n  const [formData, setFormData] = useState({\n    // Campos de la tabla wines\n    nombre: vino.nombre,\n    precio: vino.precio,\n    url_imagen: vino.url_imagen,\n    descripcion: vino.descripcion || '',\n    nivel_alcohol: vino.nivel_alcohol.toString(),\n    variedades: vino.variedades,\n    pais_importacion: vino.pais_importacion,\n    color_vino: vino.color_vino,\n    stock: vino.stock,\n    capacidad: vino.capacidad,\n    // Campos de la tabla wine_details\n    bodega: vino.wine_details.bodega || '',\n    notas_cata: vino.wine_details.notas_cata || '',\n    tipo_crianza: vino.wine_details.tipo_crianza || '',\n    contenido_azucar: vino.wine_details.contenido_azucar || '',\n    contenido_carbonico: vino.wine_details.contenido_carbonico || '',\n  });\n\n  // Estados para manejo de imagen\n  const [selectedImage, setSelectedImage] = useState<File | null>(null);\n  const [imagePreview, setImagePreview] = useState<string | null>(null);\n  const [isUploading, setIsUploading] = useState(false);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  // Estados para drag and drop\n  const [isDragOver, setIsDragOver] = useState(false);\n  const [showDragOverlay, setShowDragOverlay] = useState(false);\n\n  // Función para detectar cambios en campos específicos\n  const handleFieldChange = (field: string, value: any) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  };\n\n  // Función para manejar la selección de imagen\n  const handleImageSelect = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      // Validar que sea una imagen\n      if (!file.type.startsWith('image/')) {\n        alert('Por favor selecciona solo archivos de imagen');\n        return;\n      }\n\n      setSelectedImage(file);\n\n      // Crear preview\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        setImagePreview(e.target?.result as string);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  // Función para eliminar imagen seleccionada\n  const handleRemoveImage = () => {\n    setSelectedImage(null);\n    setImagePreview(null);\n    if (fileInputRef.current) {\n      fileInputRef.current.value = '';\n    }\n  };\n\n  // Función para manejar drag and drop\n  const handleDragOver = (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragOver(true);\n    setShowDragOverlay(true);\n  };\n\n  const handleDragLeave = (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragOver(false);\n    setShowDragOverlay(false);\n  };\n\n  const handleDrop = (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragOver(false);\n    setShowDragOverlay(false);\n\n    const files = e.dataTransfer.files;\n    if (files.length > 0) {\n      const file = files[0];\n\n      // Validar que sea una imagen\n      if (!file.type.startsWith('image/')) {\n        alert('Por favor selecciona solo archivos de imagen');\n        return;\n      }\n\n      setSelectedImage(file);\n\n      // Crear preview\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        setImagePreview(e.target?.result as string);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  // Función para verificar la conexión con el bucket\n  const checkBucketConnection = async () => {\n    try {\n      const { data, error } = await supabase.storage\n        .from('images')\n        .list('');\n\n      if (error) {\n        console.error('Error verificando bucket:', error);\n        return false;\n      }\n\n      // Conexión con bucket exitosa\n      return true;\n    } catch (error) {\n      console.error('Error en checkBucketConnection:', error);\n      return false;\n    }\n  };\n\n  // Función para subir imagen a Supabase Storage\n  const uploadImageToStorage = async (file: File): Promise<string> => {\n    try {\n      // Verificar conexión con el bucket primero\n      const bucketOk = await checkBucketConnection();\n      if (!bucketOk) {\n        throw new Error('No se puede conectar con el bucket de imágenes');\n      }\n\n      const fileExt = file.name.split('.').pop();\n      const fileName = `${Date.now()}-${Math.random().toString(36).substring(2)}.${fileExt}`;\n      const filePath = fileName; // No necesitamos la carpeta \"images\" porque ya estamos en el bucket \"images\"\n\n      // Iniciando subida de imagen\n      // Tamaño del archivo\n\n      const { data: uploadData, error: uploadError } = await supabase.storage\n        .from('images')\n        .upload(filePath, file, {\n          cacheControl: '3600',\n          upsert: false\n        });\n\n      if (uploadError) {\n        console.error('Error subiendo imagen:', uploadError);\n        throw uploadError;\n      }\n\n              // Imagen subida exitosamente\n\n      // Obtener URL firmada para bucket privado\n      const { data: signedUrlData, error: signedUrlError } = await supabase.storage\n        .from('images')\n        .createSignedUrl(filePath, 60 * 60 * 24 * 365); // 1 año\n\n      if (signedUrlError) {\n        console.error('Error obteniendo URL firmada:', signedUrlError);\n        throw signedUrlError;\n      }\n\n      if (!signedUrlData?.signedUrl) {\n        throw new Error('No se pudo obtener la URL firmada');\n      }\n\n              // URL firmada obtenida\n      return signedUrlData.signedUrl;\n\n    } catch (error) {\n      console.error('Error completo en uploadImageToStorage:', error);\n      throw error;\n    }\n  };\n\n  // Función para comparar y crear JSONs separados\n  const createUpdateData = () => {\n    const winesChanges: any = {};\n    const wineDetailsChanges: any = {};\n\n    // Comparar campos de la tabla wines\n    if (formData.nombre !== vino.nombre) winesChanges.nombre = formData.nombre;\n    if (formData.precio !== vino.precio) winesChanges.precio = formData.precio;\n    if (formData.url_imagen !== vino.url_imagen) winesChanges.url_imagen = formData.url_imagen;\n    if (formData.descripcion !== vino.descripcion) winesChanges.descripcion = formData.descripcion;\n    if (parseFloat(formData.nivel_alcohol) !== vino.nivel_alcohol) {\n      winesChanges.nivel_alcohol = parseFloat(formData.nivel_alcohol);\n    }\n    if (JSON.stringify(formData.variedades) !== JSON.stringify(vino.variedades)) winesChanges.variedades = formData.variedades;\n    if (formData.pais_importacion !== vino.pais_importacion) winesChanges.pais_importacion = formData.pais_importacion;\n    if (formData.color_vino !== vino.color_vino) winesChanges.color_vino = formData.color_vino;\n    if (formData.stock !== vino.stock) winesChanges.stock = formData.stock;\n    if (formData.capacidad !== vino.capacidad) winesChanges.capacidad = formData.capacidad;\n\n    // Comparar campos de la tabla wine_details\n    if (formData.bodega !== vino.wine_details.bodega) wineDetailsChanges.bodega = formData.bodega;\n    if (formData.notas_cata !== vino.wine_details.notas_cata) wineDetailsChanges.notas_cata = formData.notas_cata;\n    if (formData.tipo_crianza !== vino.wine_details.tipo_crianza) wineDetailsChanges.tipo_crianza = formData.tipo_crianza;\n    if (formData.contenido_azucar !== vino.wine_details.contenido_azucar) wineDetailsChanges.contenido_azucar = formData.contenido_azucar;\n    if (formData.contenido_carbonico !== vino.wine_details.contenido_carbonico) wineDetailsChanges.contenido_carbonico = formData.contenido_carbonico;\n\n    return {\n      wines: Object.keys(winesChanges).length > 0 ? { id_vino: vino.id_vino, ...winesChanges } : null,\n      wineDetails: Object.keys(wineDetailsChanges).length > 0 ? { id_vino: vino.id_vino, ...wineDetailsChanges } : null\n    };\n  };\n\n  const { toast } = useToast();\n  const [open, setOpen] = useState(false);\n\n  // Actualizar formData cuando cambie el prop vino\n  useEffect(() => {\n    // EditWineModal - useEffect disparado. Vino actual\n    setFormData({\n      // Campos de la tabla wines\n      nombre: vino.nombre,\n      precio: vino.precio,\n      url_imagen: vino.url_imagen,\n      descripcion: vino.descripcion || '',\n      nivel_alcohol: vino.nivel_alcohol.toString(),\n      variedades: vino.variedades,\n      pais_importacion: vino.pais_importacion,\n      color_vino: vino.color_vino,\n      stock: vino.stock,\n      capacidad: vino.capacidad,\n      // Campos de la tabla wine_details\n      bodega: vino.wine_details.bodega || '',\n      notas_cata: vino.wine_details.notas_cata || '',\n      tipo_crianza: vino.wine_details.tipo_crianza || '',\n      contenido_azucar: vino.wine_details.contenido_azucar || '',\n      contenido_carbonico: vino.wine_details.contenido_carbonico || '',\n    });\n    // EditWineModal - formData actualizado\n  }, [\n    vino.nombre,\n    vino.precio,\n    vino.url_imagen,\n    vino.descripcion,\n    vino.nivel_alcohol,\n    vino.variedades,\n    vino.pais_importacion,\n    vino.color_vino,\n    vino.stock,\n    vino.capacidad,\n    vino.wine_details.bodega,\n    vino.wine_details.notas_cata,\n    vino.wine_details.tipo_crianza,\n    vino.wine_details.contenido_azucar,\n    vino.wine_details.contenido_carbonico,\n  ]);\n\n  // EditWineModal - formData actual (en cada render)\n\n  async function handleEdit(formData: FormData) {\n    setIsUploading(true);\n\n    try {\n      let finalImageUrl = vino.url_imagen;\n\n      // Si hay una imagen seleccionada, subirla primero\n      if (selectedImage) {\n        // Iniciando proceso de subida de imagen\n        // Archivo seleccionado\n\n        try {\n          finalImageUrl = await uploadImageToStorage(selectedImage);\n                      // Imagen subida exitosamente\n\n          // Actualizar el formData con la nueva URL\n          handleFieldChange('url_imagen', finalImageUrl);\n        } catch (uploadError) {\n          console.error('Error en la subida de imagen:', uploadError);\n          toast({\n            title: \"Error\",\n            description: \"Error al subir la imagen. Por favor, intenta de nuevo.\",\n            variant: \"destructive\"\n          });\n          setIsUploading(false);\n          return;\n        }\n      }\n\n      const updateData = createUpdateData();\n\n      // Si se subió una imagen, asegurarse de que esté en el JSON de wines\n      if (selectedImage && updateData.wines) {\n        updateData.wines.url_imagen = finalImageUrl;\n      } else if (selectedImage && !updateData.wines) {\n        updateData.wines = { id_vino: vino.id_vino, url_imagen: finalImageUrl };\n      }\n\n      // Datos de actualización\n      // Tabla wines\n      // Tabla wine_details\n\n      // Actualizar tabla wines si hay cambios\n      if (updateData.wines) {\n        const { data: winesData, error: winesError } = await supabase\n          .from('wines')\n          .update(updateData.wines)\n          .eq('id_vino', vino.id_vino)\n          .select();\n\n        if (winesError) {\n          console.error('Error actualizando tabla wines:', winesError);\n          throw winesError;\n        }\n\n                  // Tabla wines actualizada\n      }\n\n      // Actualizar tabla wine_details si hay cambios\n      if (updateData.wineDetails) {\n        const { data: wineDetailsData, error: wineDetailsError } = await supabase\n          .from('wine_details')\n          .update(updateData.wineDetails)\n          .eq('id_vino', vino.id_vino)\n          .select();\n\n        if (wineDetailsError) {\n          console.error('Error actualizando tabla wine_details:', wineDetailsError);\n          throw wineDetailsError;\n        }\n\n                  // Tabla wine_details actualizada\n      }\n\n              // Actualización completada exitosamente\n\n      // Resetear estados de imagen después del éxito\n      setSelectedImage(null);\n      setImagePreview(null);\n      if (fileInputRef.current) {\n        fileInputRef.current.value = '';\n      }\n\n      // Detectar cambios para el toast\n      const changedFields: string[] = [];\n      const fieldMap: Record<string, any> = {\n        nombre: formData.get(\"nombre\"),\n        precio: formData.get(\"precio\"),\n        descripcion: formData.get(\"descripcion\"),\n        nivel_alcohol: formData.get(\"nivel_alcohol\"),\n        variedades: formData.getAll(\"variedades\").join(\", \"),\n        pais_importacion: formData.get(\"pais_importacion\"),\n        color_vino: formData.get(\"color_vino\"),\n        stock: formData.get(\"stock\"),\n        capacidad: formData.get(\"capacidad\"),\n        bodega: formData.get(\"bodega\"),\n        notas_cata: formData.get(\"notas_cata\"),\n        tipo_crianza: formData.get(\"tipo_crianza\"),\n        contenido_azucar: formData.get(\"contenido_azucar\"),\n        contenido_carbonico: formData.get(\"contenido_carbonico\"),\n      };\n\n      // Verificar cambios\n      if (vino.nombre !== fieldMap.nombre) changedFields.push(`nombre: ${fieldMap.nombre}`);\n      if (vino.precio != fieldMap.precio) changedFields.push(`precio: ${fieldMap.precio}`);\n      if (vino.descripcion !== fieldMap.descripcion) changedFields.push(`descripción: ${fieldMap.descripcion}`);\n      if (vino.nivel_alcohol != fieldMap.nivel_alcohol) changedFields.push(`alcohol: ${fieldMap.nivel_alcohol}%`);\n      if (vino.variedades.join(\", \") !== fieldMap.variedades) changedFields.push(`variedades: ${fieldMap.variedades}`);\n      if (vino.pais_importacion !== fieldMap.pais_importacion) changedFields.push(`país: ${fieldMap.pais_importacion}`);\n      if (vino.color_vino !== fieldMap.color_vino) changedFields.push(`color: ${fieldMap.color_vino}`);\n      if (vino.stock != fieldMap.stock) changedFields.push(`stock: ${fieldMap.stock}`);\n      if (vino.capacidad != fieldMap.capacidad) changedFields.push(`capacidad: ${fieldMap.capacidad}ml`);\n      if (vino.wine_details.bodega !== fieldMap.bodega) changedFields.push(`bodega: ${fieldMap.bodega}`);\n      if (vino.wine_details.notas_cata !== fieldMap.notas_cata) changedFields.push(`notas de cata: ${fieldMap.notas_cata}`);\n      if (vino.wine_details.tipo_crianza !== fieldMap.tipo_crianza) changedFields.push(`crianza: ${fieldMap.tipo_crianza}`);\n      if (vino.wine_details.contenido_azucar !== fieldMap.contenido_azucar) changedFields.push(`azúcar: ${fieldMap.contenido_azucar}`);\n      if (vino.wine_details.contenido_carbonico !== fieldMap.contenido_carbonico) changedFields.push(`carbónico: ${fieldMap.contenido_carbonico}`);\n      if (vino.url_imagen !== finalImageUrl) changedFields.push(`imagen actualizada`);\n\n      // Toast de éxito\n      toast({\n        title: \"¡Vino actualizado exitosamente!\",\n        description: changedFields.length > 0\n          ? `Cambios realizados: ${changedFields.join(\", \")}`\n          : \"Actualización completada.\",\n      });\n\n      // Cerrar modal\n      setOpen(false);\n\n      // Llamar al callback para actualizar la lista en el componente padre\n      if (onWineUpdate) {\n        // Llamando a onWineUpdated callback\n        onWineUpdate();\n      }\n\n    } catch (error) {\n      console.error('Error en la actualización:', error);\n      toast({\n        title: \"Error al actualizar\",\n        description: \"Ha ocurrido un error al actualizar el vino. Por favor, intenta de nuevo.\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsUploading(false);\n    }\n  }\n\n  // Overlay global de drag & drop\n  let dragDropOverlay = null;\n  if (showDragOverlay && typeof window !== \"undefined\" && document.body) {\n    dragDropOverlay = ReactDOM.createPortal(\n      <div className=\"fixed inset-0 z-[9999] flex items-center justify-center bg-black bg-opacity-50\">\n        <div\n          className=\"bg-white rounded-lg p-8 border-2 border-dashed border-blue-500 shadow-lg\"\n          onDragOver={handleDragOver}\n          onDragLeave={handleDragLeave}\n          onDrop={handleDrop}\n        >\n          <div className=\"text-center\">\n            <Upload className=\"h-16 w-16 mx-auto mb-4 text-blue-500\" />\n            <h3 className=\"text-lg font-semibold mb-2\">Suelta la imagen aquí</h3>\n            <p className=\"text-gray-600\">La imagen se cargará automáticamente</p>\n          </div>\n        </div>\n      </div>,\n      document.body\n    );\n  }\n\n  return (\n    <>\n      {dragDropOverlay}\n      <Dialog open={open} onOpenChange={setOpen}>\n        <DialogTrigger asChild>{children}</DialogTrigger>\n        <DialogContent className=\"max-w-4xl max-h-[90vh] w-[95vw] sm:w-full overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Editar Vino</DialogTitle>\n          </DialogHeader>\n\n          {/* Ventana flotante de drag & drop */}\n          {/* This overlay is now handled by ReactDOM.createPortal */}\n\n          <form\n            action={handleEdit}\n            className=\"space-y-6 mt-4\"\n            onDragOver={handleDragOver}\n            onDragLeave={handleDragLeave}\n            onDrop={handleDrop}\n          >\n            {/* Primera fila - Información básica */}\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label>Nombre</Label>\n                <Input\n                  name=\"nombre\"\n                  value={formData.nombre}\n                  onChange={(e) => handleFieldChange('nombre', e.target.value)}\n                  required\n                />\n              </div>\n\n              <div>\n                <Label>Precio</Label>\n                <Input\n                  type=\"number\"\n                  name=\"precio\"\n                  value={formData.precio}\n                  onChange={(e) => handleFieldChange('precio', parseFloat(e.target.value))}\n                  required\n                />\n              </div>\n\n              <div>\n                <Label>Alcohol (%)</Label>\n                <Input\n                  type=\"number\"\n                  name=\"nivel_alcohol\"\n                  value={formData.nivel_alcohol}\n                  onChange={(e) => {\n                    const value = e.target.value;\n                    handleFieldChange('nivel_alcohol', value);\n                  }}\n                  step=\"0.01\"\n                  min=\"0\"\n                  max=\"100\"\n                  placeholder=\"Ej: 13.5\"\n                />\n\n              </div>\n\n              <div>\n                <Label>Stock</Label>\n                <Input\n                  type=\"number\"\n                  name=\"stock\"\n                  value={formData.stock}\n                  onChange={(e) => handleFieldChange('stock', parseInt(e.target.value))}\n                />\n              </div>\n\n              <div>\n                <Label>Color</Label>\n                <Select value={formData.color_vino} onValueChange={(value) => handleFieldChange('color_vino', value)}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Selecciona el color del Vino\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"Tinto\">Tinto</SelectItem>\n                    <SelectItem value=\"Blanco\">Blanco</SelectItem>\n                    <SelectItem value=\"Rosado\">Rosado</SelectItem>\n                    <SelectItem value=\"Espumante\">Espumante</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <Label>País</Label>\n                <Input\n                  name=\"pais_importacion\"\n                  value={formData.pais_importacion}\n                  onChange={(e) => handleFieldChange('pais_importacion', e.target.value)}\n                />\n              </div>\n\n              <div>\n                <Label>Capacidad</Label>\n                <Input\n                  name=\"capacidad\"\n                  value={formData.capacidad}\n                  type=\"number\"\n                  onChange={(e) => handleFieldChange('capacidad', parseFloat(e.target.value))}\n                />\n              </div>\n\n              <div>\n                <Label>Bodega</Label>\n                <Input\n                  name=\"bodega\"\n                  value={formData.bodega}\n                  onChange={(e) => handleFieldChange('bodega', e.target.value)}\n                />\n              </div>\n            </div>\n\n            {/* Segunda fila - Imagen */}\n            <div>\n              <Label>Imagen del Vino</Label>\n\n              <div className=\"flex items-center gap-4 mb-4\">\n                <Input\n                  ref={fileInputRef}\n                  type=\"file\"\n                  accept=\"image/*\"\n                  onChange={handleImageSelect}\n                  className=\"flex-1\"\n                />\n                {selectedImage ? (\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={handleRemoveImage}\n                    className=\"flex items-center gap-2\"\n                  >\n                    <X className=\"h-4 w-4\" />\n                    Eliminar\n                  </Button>\n                ) : vino.url_imagen && (\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={async () => {\n                      const result = await checkBucketConnection();\n                      alert(result ? 'Conexión exitosa con el bucket' : 'Error de conexión con el bucket');\n                    }}\n                    className=\"flex items-center gap-2\"\n                  >\n                    Test Bucket\n                  </Button>\n                )}\n              </div>\n\n              <div className=\"flex justify-center\">\n                {imagePreview ? (\n                  <div\n                    className=\"relative w-48 h-48 border rounded-lg overflow-hidden cursor-pointer transition-all duration-200 border-gray-300\"\n                    onClick={() => fileInputRef.current?.click()}\n                  >\n                    <Image\n                      src={imagePreview}\n                      alt=\"Preview de imagen\"\n                      fill\n                      className=\"object-cover\"\n                    />\n                    <div className=\"absolute inset-0 bg-black bg-opacity-0 hover:bg-opacity-20 flex items-center justify-center transition-all duration-200\">\n                      <div className=\"text-center text-white opacity-0 hover:opacity-100\">\n                        <Upload className=\"h-6 w-6 mx-auto mb-1\" />\n                        <p className=\"text-xs\">Cambiar imagen</p>\n                      </div>\n                    </div>\n                  </div>\n                ) : (formData.url_imagen) ? (\n                  <div\n                    className=\"relative w-48 h-48 border rounded-lg overflow-hidden cursor-pointer transition-all duration-200 border-gray-300\"\n                    onClick={() => fileInputRef.current?.click()}\n                  >\n                    <Image\n                      src={formData.url_imagen}\n                      alt={`Imagen actual de ${formData.nombre}`}\n                      fill\n                      className=\"object-cover\"\n                    />\n                    <div className=\"absolute inset-0 bg-black bg-opacity-0 hover:bg-opacity-20 flex items-center justify-center transition-all duration-200\">\n                      <div className=\"text-center text-white opacity-0 hover:opacity-100\">\n                        <Upload className=\"h-6 w-6 mx-auto mb-1\" />\n                        <p className=\"text-xs\">Cambiar imagen</p>\n                      </div>\n                    </div>\n                  </div>\n                ) : (\n                  <div\n                    className=\"w-48 h-48 border-2 border-dashed rounded-lg flex items-center justify-center cursor-pointer transition-all duration-200 border-gray-300 hover:border-blue-400\"\n                    onClick={() => fileInputRef.current?.click()}\n                  >\n                    <div className=\"text-center text-gray-500\">\n                      <ImageIcon className=\"h-8 w-8 mx-auto mb-2\" />\n                      <p className=\"text-sm\">Sin imagen</p>\n                      <p className=\"text-xs mt-1\">Haz clic para seleccionar</p>\n                      <p className=\"text-xs text-blue-500 mt-1\">o arrastra una imagen</p>\n                    </div>\n                  </div>\n                )}\n              </div>\n            </div>\n\n            {/* Tercera fila - Descripción */}\n            <div>\n              <Label>Descripción</Label>\n              <Textarea\n                name=\"descripcion\"\n                value={formData.descripcion}\n                onChange={(e) => handleFieldChange('descripcion', e.target.value)}\n              />\n            </div>\n\n            {/* Cuarta fila - Variedades */}\n            <div>\n              <VariedadesSelector\n                defaultVariedades={formData.variedades}\n                onVariedadesChange={(variedades) => handleFieldChange('variedades', variedades)}\n              />\n            </div>\n\n            {/* Quinta fila - Detalles adicionales */}\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label>Notas de cata</Label>\n                <Input\n                  name=\"notas_cata\"\n                  value={formData.notas_cata}\n                  onChange={(e) => handleFieldChange('notas_cata', e.target.value)}\n                />\n              </div>\n\n              <div>\n                <Label>Tipo de crianza</Label>\n                <Input\n                  name=\"tipo_crianza\"\n                  value={formData.tipo_crianza}\n                  onChange={(e) => handleFieldChange('tipo_crianza', e.target.value)}\n                />\n              </div>\n\n              <div>\n                <Label>Contenido azúcar</Label>\n                <Input\n                  name=\"contenido_azucar\"\n                  value={formData.contenido_azucar}\n                  onChange={(e) => handleFieldChange('contenido_azucar', e.target.value)}\n                />\n              </div>\n\n              <div>\n                <Label>Contenido carbonico</Label>\n                <Input\n                  name=\"contenido_carbonico\"\n                  value={formData.contenido_carbonico}\n                  onChange={(e) => handleFieldChange('contenido_carbonico', e.target.value)}\n                />\n              </div>\n            </div>\n\n            {/* Submit */}\n            <SubmitButton />\n          </form>\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n}\n",
        "login-modal.tsx": "\"use client\"\n\nimport { useState } from \"react\"\nimport { User, Mail, CheckCircle, AlertCircle } from \"lucide-react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogTrigger } from \"@/components/ui/dialog\"\nimport { useAuth } from \"@/providers/auth-provider\"\n\nexport function LoginModal() {\n  const [isOpen, setIsOpen] = useState(false)\n  const [email, setEmail] = useState(\"\")\n  const [emailSent, setEmailSent] = useState(false)\n  const [error, setError] = useState(\"\")\n  const { login, isLoading, isProcessingMagicLink } = useAuth()\n\n  const handleLogin = async () => {\n    if (!email) {\n      setError(\"Por favor ingresa tu email\");\n      return;\n    }\n\n    setError(\"\");\n    try {\n      await login(email)\n      setEmailSent(true)\n    } catch (error: any) {\n      setError(error.message || \"Error al enviar el enlace de acceso\")\n    }\n  }\n\n  const handleClose = () => {\n    setIsOpen(false)\n    setEmail(\"\")\n    setEmailSent(false)\n    setError(\"\")\n  }\n\n  const handleOpenChange = (open: boolean) => {\n    if (!open) {\n      handleClose()\n    } else {\n      setIsOpen(true)\n    }\n  }\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleOpenChange}>\n      <DialogTrigger asChild>\n        <Button variant=\"outline\" aria-label=\"Iniciar sesión\">\n          <User className=\"h-4 w-4\" />\n        </Button>\n      </DialogTrigger>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            {emailSent ? <CheckCircle className=\"h-5 w-5 text-green-600\" /> : <User className=\"h-5 w-5\" />}\n            {emailSent ? \"Enlace Enviado\" : \"Iniciar Sesión\"}\n          </DialogTitle>\n          <DialogDescription>\n            {emailSent \n              ? \"Revisa tu email y haz clic en el enlace para acceder\"\n              : \"Ingresa tu email para recibir un enlace de acceso seguro\"\n            }\n          </DialogDescription>\n        </DialogHeader>\n        \n        {!emailSent ? (\n          <div className=\"space-y-4\">\n            <div>\n              <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                Email\n              </label>\n              <Input \n                id=\"email\"\n                placeholder=\"tu@email.com\" \n                type=\"email\" \n                value={email} \n                onChange={(e) => setEmail(e.target.value)}\n                onKeyPress={(e) => e.key === 'Enter' && handleLogin()}\n                disabled={isLoading}\n                className={error ? \"border-red-500\" : \"\"}\n              />\n              {error && (\n                <p className=\"text-sm text-red-600 mt-1 flex items-center gap-1\">\n                  <AlertCircle className=\"h-4 w-4\" />\n                  {error}\n                </p>\n              )}\n            </div>\n            \n            <Button \n              onClick={handleLogin} \n              disabled={isLoading || !email} \n              className=\"w-full bg-red-600 hover:bg-red-700\"\n            >\n              {isLoading ? (\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white\"></div>\n                  Enviando...\n                </div>\n              ) : (\n                <div className=\"flex items-center gap-2\">\n                  <Mail className=\"h-4 w-4\" />\n                  Enviar Enlace de Acceso\n                </div>\n              )}\n            </Button>\n            \n            <p className=\"text-xs text-gray-500 text-center\">\n              Te enviaremos un enlace seguro a tu email para acceder sin contraseña\n            </p>\n          </div>\n        ) : (\n          <div className=\"space-y-4\">\n            <div className=\"text-center py-4\">\n              <CheckCircle className=\"h-12 w-12 text-green-600 mx-auto mb-3\" />\n              <p className=\"text-sm text-gray-600 mb-2\">\n                Enlace enviado a <strong>{email}</strong>\n              </p>\n              <p className=\"text-xs text-gray-500\">\n                Revisa tu bandeja de entrada y spam. El enlace expira en 1 hora.\n              </p>\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Button \n                onClick={() => setEmailSent(false)} \n                variant=\"outline\" \n                className=\"w-full\"\n              >\n                Enviar a otro email\n              </Button>\n              <Button \n                onClick={handleClose} \n                className=\"w-full bg-gray-600 hover:bg-gray-700\"\n              >\n                Cerrar\n              </Button>\n            </div>\n          </div>\n        )}\n        \n        {isProcessingMagicLink && (\n          <div className=\"absolute inset-0 bg-white/80 flex items-center justify-center rounded-lg\">\n            <div className=\"text-center\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-red-600 mx-auto mb-2\"></div>\n              <p className=\"text-sm text-gray-600\">Procesando enlace de acceso...</p>\n            </div>\n          </div>\n        )}\n      </DialogContent>\n    </Dialog>\n  )\n}\n",
        "wine-detail-modal.tsx": "\"use client\"\n\nimport Image from \"next/image\"\nimport { ShoppingCart } from \"lucide-react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\"\nimport type { Wine } from \"@/types\"\nimport { formatPrice, getCountryFlag } from \"@/utils/price\"\n\ninterface WineDetailModalProps {\n  wine: Wine | null\n  isOpen: boolean\n  onClose: () => void\n  onAddToCart: (wineId: string) => void\n}\n\nexport function WineDetailModal({ wine, isOpen, onClose, onAddToCart }: WineDetailModalProps) {\n  if (!wine) return null\n\n  const handleAddToCart = () => {\n    onAddToCart(wine.id_vino)\n    onClose()\n  }\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] w-[95vw] sm:w-full\">\n        <DialogHeader>\n          <DialogTitle className=\"text-2xl font-bold\">{wine.nombre}</DialogTitle>\n          <DialogDescription>\n            Información detallada sobre {wine.nombre} de {wine.wine_details.bodega}\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 md:gap-6 h-full\">\n          <div className=\"flex justify-center md:block\">\n            <Image\n              src={wine.url_imagen || \"/placeholder.svg\"}\n              alt={`Botella de ${wine.nombre} - ${wine.wine_details.bodega}`}\n              width={300}\n              height={400}\n              className=\"mx-auto max-w-xs md:max-w-none md:mx-auto h-32 md:h-80 object-contain rounded-lg\"\n              priority\n            />\n          </div>\n\n          <div className=\"max-h-[50vh] md:max-h-[70vh] space-y-3 md:space-y-4 overflow-y-auto px-2 md:px-4 pb-3\">\n            <div>\n              <h3 className=\"text-base md:text-lg font-semibold text-gray-900 mb-2\">Información General</h3>\n              <div className=\"space-y-1 sm:space-y-2 text-xs md:text-sm\">\n                <p>\n                  <span className=\"font-medium\">Bodega:</span> {wine.wine_details.bodega}\n                </p>\n                <p>\n                  <span className=\"font-medium\">País:</span> {getCountryFlag(wine.pais_importacion)}{\" \"}\n                  {wine.pais_importacion}\n                </p>\n                <p>\n                  <span className=\"font-medium\">Variedades:</span> {wine.variedades.join(\", \")}\n                </p>\n                <p>\n                  <span className=\"font-medium\">Tipo de crianza:</span> {wine.wine_details.tipo_crianza}\n                </p>\n              </div>\n            </div>\n\n            <div>\n              <h3 className=\"text-base md:text-lg font-semibold text-gray-900 mb-2\">Descripción</h3>\n              <p className=\"text-gray-600 text-xs md:text-sm leading-relaxed\">{wine.descripcion}</p>\n            </div>\n\n            <div>\n              <h3 className=\"text-base md:text-lg font-semibold text-gray-900 mb-2\">Características</h3>\n              <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-2 sm:gap-4 text-xs md:text-sm\">\n                <div>\n                  <p className=\"font-medium text-gray-700\">Graduación alcohólica</p>\n                  <p className=\"text-gray-600\">{wine.nivel_alcohol}% Vol.</p>\n                </div>\n                <div>\n                  <p className=\"font-medium text-gray-700\">Color</p>\n                  <p className=\"text-gray-600\">{wine.color_vino}</p>\n                </div>\n                <div>\n                  <p className=\"font-medium text-gray-700\">Contenido de azúcar</p>\n                  <p className=\"text-gray-600\">{wine.wine_details.contenido_azucar}</p>\n                </div>\n                <div>\n                  <p className=\"font-medium text-gray-700\">Tipo</p>\n                  <p className=\"text-gray-600\">{wine.wine_details.contenido_carbonico}</p>\n                </div>\n              </div>\n            </div>\n\n            <div>\n              <h3 className=\"text-base md:text-lg font-semibold text-gray-900 mb-2\">Notas de Cata</h3>\n              <p className=\"text-gray-600 leading-relaxed\">{wine.wine_details.notas_cata}</p>\n            </div>\n\n            <div className=\"flex flex-wrap gap-1 sm:gap-2\" role=\"group\" aria-label=\"Etiquetas del vino\">\n              {wine.variedades.map((variedad) => (\n                <Badge key={variedad} variant=\"secondary\" className=\"bg-red-100 text-red-800 text-xs\">\n                  {variedad}\n                </Badge>\n              ))}\n              <Badge variant=\"outline\" className=\"border-red-200 text-red-700\">\n                {wine.wine_details.bodega}\n              </Badge>\n              <Badge variant=\"outline\" className=\"border-blue-200 text-blue-700\">\n                {getCountryFlag(wine.pais_importacion)} {wine.pais_importacion}\n              </Badge>\n            </div>\n\n            <div className=\"border-t pt-3 sm:pt-4\">\n              <div className=\"flex flex-col sm:flex-row sm:items-center justify-between mb-3 sm:mb-4 gap-2\">\n                <span className=\"text-2xl md:text-3xl font-bold text-red-600\" aria-label={`Precio: ${formatPrice(wine.precio)}`}>\n                  {formatPrice(wine.precio)}\n                </span>\n                <div className=\"text-left sm:text-right\">\n                  <p className=\"text-xs md:text-sm text-gray-500\">Precio por botella</p>\n                  <p className=\"text-xs text-green-600\">✓ Disponible</p>\n                </div>\n              </div>\n\n              <div className=\"flex flex-col sm:flex-row gap-2 sm:flex-3\">\n                <Button \n                  onClick={handleAddToCart} \n                  className=\"w-full bg-red-600 hover:bg-red-700 text-sm md:text-base\"\n                  aria-label={`Agregar ${wine.nombre} al carrito`}\n                >\n                  <ShoppingCart className=\"h-4 w-4 mr-2\" />\n                  Agregar al Carrito\n                </Button>\n                <Button \n                  variant=\"outline\" \n                  className=\"sm:px-6 text-sm sm:text-base bg-transparent\"\n                  aria-label=\"Reservar este vino\"\n                >\n                  Reservar\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  )\n}\n"
      },
      "price-range-slider.tsx": "\"use client\"\r\n\r\nimport { useState, useEffect } from \"react\"\r\nimport { Card, CardContent, CardHeader, CardTitle } from \"./ui/card\"\r\nimport { DualRangeSlider } from \"./ui/dual-range-slider\"\r\nimport { formatPrice } from \"@/utils/price\"\r\n\r\ninterface PriceRangeSliderProps {\r\n  minPrice: number\r\n  maxPrice: number\r\n  currentMin: number\r\n  currentMax: number\r\n  onRangeChange: (min: number, max: number) => void\r\n}\r\n\r\nexport function PriceRangeSlider({\r\n  minPrice,\r\n  maxPrice,\r\n  currentMin,\r\n  currentMax,\r\n  onRangeChange,\r\n}: PriceRangeSliderProps) {\r\n  const [localMin, setLocalMin] = useState(currentMin)\r\n  const [localMax, setLocalMax] = useState(currentMax)\r\n\r\n  // Actualizar valores locales cuando cambien los props\r\n  useEffect(() => {\r\n    setLocalMin(currentMin)\r\n    setLocalMax(currentMax)\r\n  }, [currentMin, currentMax])\r\n\r\n  const handleSliderChange = (values: number[]) => {\r\n    const [min, max] = values\r\n    setLocalMin(min)\r\n    setLocalMax(max)\r\n    onRangeChange(min, max)\r\n  }\r\n\r\n  return (\r\n    <Card className=\"border-0\">\r\n      <CardHeader className=\"p-0 pb-3\">\r\n        <CardTitle className=\"text-sm font-medium\">Rango de Precio</CardTitle>\r\n      </CardHeader>\r\n      <CardContent className=\"space-y-4 p-0\">\r\n        {/* Slider de rango usando DualRangeSlider */}\r\n        <div className=\"relative pt-6 px-4\">\r\n          <DualRangeSlider\r\n            value={[localMin, localMax]}\r\n            onValueChange={handleSliderChange}\r\n            min={minPrice}\r\n            max={maxPrice}\r\n            step={10000}\r\n            className=\"w-full\"\r\n            label={(value) => (\r\n              <span className=\"text-xs text-muted-foreground bg-background px-1 rounded\">\r\n                {formatPrice(value || 0)}\r\n              </span>\r\n            )}\r\n            labelPosition=\"top\"\r\n          />\r\n          \r\n          {/* Etiquetas de precio mínimo y máximo */}\r\n          <div className=\"flex justify-between mt-2 text-xs text-muted-foreground\">\r\n            <span>{formatPrice(minPrice)}</span>\r\n            <span>{formatPrice(maxPrice)}</span>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Valores actuales */}\r\n        <div className=\"text-center text-sm text-muted-foreground bg-gray-50 py-2 rounded\">\r\n          {formatPrice(localMin)} - {formatPrice(localMax)}\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n  )\r\n}",
      "structured-data.tsx": "\"use client\"\r\n\r\nimport { Wine } from \"@/types\"\r\n\r\ninterface StructuredDataProps {\r\n  wines?: Wine[]\r\n  type?: \"website\" | \"organization\" | \"product\" | \"breadcrumb\"\r\n  product?: Wine\r\n}\r\n\r\nexport function StructuredData({ wines, type = \"website\", product }: StructuredDataProps) {\r\n  const getWebsiteData = () => ({\r\n    \"@context\": \"https://schema.org\",\r\n    \"@type\": \"WebSite\",\r\n    \"name\": \"Los Vinos\",\r\n    \"description\": \"Tienda online de vinos internacionales\",\r\n    \"url\": \"https://tu-dominio.com\",\r\n    \"potentialAction\": {\r\n      \"@type\": \"SearchAction\",\r\n      \"target\": \"https://tu-dominio.com?search={search_term_string}\",\r\n      \"query-input\": \"required name=search_term_string\"\r\n    }\r\n  })\r\n\r\n  const getOrganizationData = () => ({\r\n    \"@context\": \"https://schema.org\",\r\n    \"@type\": \"Organization\",\r\n    \"name\": \"Los Vinos\",\r\n    \"description\": \"Tienda online especializada en vinos internacionales\",\r\n    \"url\": \"https://tu-dominio.com\",\r\n    \"logo\": \"https://tu-dominio.com/logo.png\",\r\n    \"contactPoint\": {\r\n      \"@type\": \"ContactPoint\",\r\n      \"telephone\": \"+56-9-1234-5678\",\r\n      \"contactType\": \"customer service\",\r\n      \"areaServed\": \"CL\",\r\n      \"availableLanguage\": \"Spanish\"\r\n    },\r\n    \"address\": {\r\n      \"@type\": \"PostalAddress\",\r\n      \"addressCountry\": \"CL\",\r\n      \"addressLocality\": \"Santiago\",\r\n      \"addressRegion\": \"Región Metropolitana\"\r\n    }\r\n  })\r\n\r\n  const getProductData = (wine: Wine) => ({\r\n    \"@context\": \"https://schema.org\",\r\n    \"@type\": \"Product\",\r\n    \"name\": wine.nombre,\r\n    \"description\": wine.descripcion,\r\n    \"brand\": {\r\n      \"@type\": \"Brand\",\r\n      \"name\": wine.wine_details.bodega\r\n    },\r\n    \"category\": \"Vino\",\r\n    \"image\": wine.url_imagen,\r\n    \"offers\": {\r\n      \"@type\": \"Offer\",\r\n      \"price\": wine.precio,\r\n      \"priceCurrency\": \"COP\",\r\n      \"availability\": \"https://schema.org/InStock\",\r\n      \"seller\": {\r\n        \"@type\": \"Organization\",\r\n        \"name\": \"Los Vinos\"\r\n      }\r\n    },\r\n    \"additionalProperty\": [\r\n      {\r\n        \"@type\": \"PropertyValue\",\r\n        \"name\": \"Variedad\",\r\n        \"value\": wine.variedades.join(\", \")\r\n      },\r\n      {\r\n        \"@type\": \"PropertyValue\",\r\n        \"name\": \"País\",\r\n        \"value\": wine.pais_importacion\r\n      },\r\n      {\r\n        \"@type\": \"PropertyValue\",\r\n        \"name\": \"Alcohol\",\r\n        \"value\": `${wine.nivel_alcohol}%`\r\n      },\r\n      {\r\n        \"@type\": \"PropertyValue\",\r\n        \"name\": \"Tipo de Crianza\",\r\n        \"value\": wine.wine_details.tipo_crianza\r\n      }\r\n    ]\r\n  })\r\n\r\n  const getBreadcrumbData = () => ({\r\n    \"@context\": \"https://schema.org\",\r\n    \"@type\": \"BreadcrumbList\",\r\n    \"itemListElement\": [\r\n      {\r\n        \"@type\": \"ListItem\",\r\n        \"position\": 1,\r\n        \"name\": \"Inicio\",\r\n        \"item\": \"https://tu-dominio.com\"\r\n      },\r\n      {\r\n        \"@type\": \"ListItem\",\r\n        \"position\": 2,\r\n        \"name\": \"Vinos\",\r\n        \"item\": \"https://tu-dominio.com/vinos\"\r\n      }\r\n    ]\r\n  })\r\n\r\n  const getData = () => {\r\n    switch (type) {\r\n      case \"organization\":\r\n        return getOrganizationData()\r\n      case \"product\":\r\n        return product ? getProductData(product) : null\r\n      case \"breadcrumb\":\r\n        return getBreadcrumbData()\r\n      default:\r\n        return getWebsiteData()\r\n    }\r\n  }\r\n\r\n  const data = getData()\r\n  if (!data) return null\r\n\r\n  return (\r\n    <script\r\n      type=\"application/ld+json\"\r\n      dangerouslySetInnerHTML={{ __html: JSON.stringify(data) }}\r\n    />\r\n  )\r\n} ",
      "theme-provider.tsx": "'use client'\n\nimport * as React from 'react'\nimport {\n  ThemeProvider as NextThemesProvider,\n  type ThemeProviderProps,\n} from 'next-themes'\n\nexport function ThemeProvider({ children, ...props }: ThemeProviderProps) {\n  return <NextThemesProvider {...props}>{children}</NextThemesProvider>\n}\n",
      "ui": {
        "accordion.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n",
        "alert-dialog.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n",
        "alert.tsx": "import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n",
        "aspect-ratio.tsx": "\"use client\"\n\nimport * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n",
        "avatar.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n",
        "badge.tsx": "import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n",
        "breadcrumb.tsx": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n",
        "button.tsx": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n",
        "calendar.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ ...props }) => <ChevronLeft className=\"h-4 w-4\" />,\n        IconRight: ({ ...props }) => <ChevronRight className=\"h-4 w-4\" />,\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n",
        "card.tsx": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n",
        "carousel.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n",
        "cart.tsx": "'use client';\n\nimport type { Variants } from 'motion/react';\nimport { motion, useAnimation } from 'motion/react';\nimport type { HTMLAttributes } from 'react';\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';\nimport { cn } from '@/lib/utils';\nimport React from 'react';\n\nexport interface CartIconHandle {\n  startAnimation: () => void;\n  stopAnimation: () => void;\n}\n\ninterface CartIconProps extends HTMLAttributes<HTMLDivElement> {\n  size?: number;\n  isHovered?: boolean; // <--- Añade esta prop\n}\n\nconst cartVariants: Variants = {\n  normal: { scale: 1 },\n  animate: {\n    scale: 1.1,\n    y: [0, -5, 0],\n    transition: {\n      duration: 0.3,\n      ease: 'easeInOut',\n      y: { repeat: 1, delay: 0.1, duration: 0.4 },\n    },\n  },\n};\n\nconst CartIcon = forwardRef<CartIconHandle, CartIconProps>(\n  ({ className, size = 28, isHovered = false, ...props }, ref) => {\n    const controls = useAnimation();\n    const isControlledRef = useRef(false);\n\n    useImperativeHandle(ref, () => {\n      isControlledRef.current = true;\n      return {\n        startAnimation: () => controls.start('animate'),\n        stopAnimation: () => controls.start('normal'),\n      };\n    });\n\n    // Nuevo efecto para animar cuando isHovered cambia\n    React.useEffect(() => {\n      if (isHovered) {\n        controls.start('animate');\n      } else {\n        controls.start('normal');\n      }\n    }, [isHovered, controls]);\n\n    return (\n      <div className={cn(className)} {...props}>\n        <motion.svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width={size}\n          height={size}\n          viewBox=\"0 0 24 24\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          strokeWidth=\"2\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          variants={cartVariants}\n          animate={controls}\n          transition={{ duration: 0.2 }}\n        >\n          <path d=\"M6.29977 5H21L19 12H7.37671M20 16H8L6 3H3M9 20C9 20.5523 8.55228 21 8 21C7.44772 21 7 20.5523 7 20C7 19.4477 7.44772 19 8 19C8.55228 19 9 19.4477 9 20ZM20 20C20 20.5523 19.5523 21 19 21C18.4477 21 18 20.5523 18 20C18 19.4477 18.4477 19 19 19C19.5523 19 20 19.4477 20 20Z\" />\n        </motion.svg>\n      </div>\n    );\n  }\n);\n\nCartIcon.displayName = 'CartIcon';\n\nexport { CartIcon };\n",
        "chart.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([_, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item.dataKey || item.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n",
        "checkbox.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n",
        "collapsible.tsx": "\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n",
        "command.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n",
        "context-menu.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n",
        "dialog.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n",
        "drawer.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n",
        "dropdown-menu.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n",
        "dual-range-slider.tsx": "'use client';\r\n\r\nimport * as React from 'react';\r\nimport * as SliderPrimitive from '@radix-ui/react-slider';\r\n\r\nimport { cn } from '@/lib/utils';\r\n\r\ninterface DualRangeSliderProps extends React.ComponentProps<typeof SliderPrimitive.Root> {\r\n  labelPosition?: 'top' | 'bottom';\r\n  label?: (value: number | undefined) => React.ReactNode;\r\n}\r\n\r\nconst DualRangeSlider = React.forwardRef<\r\n  React.ElementRef<typeof SliderPrimitive.Root>,\r\n  DualRangeSliderProps\r\n>(({ className, label, labelPosition = 'top', ...props }, ref) => {\r\n  const initialValue = Array.isArray(props.value) ? props.value : [props.min, props.max];\r\n\r\n  return (\r\n    <SliderPrimitive.Root\r\n      ref={ref}\r\n      className={cn('relative flex w-full touch-none select-none items-center', className)}\r\n      {...props}\r\n    >\r\n      <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-gray-200\">\r\n        <SliderPrimitive.Range className=\"absolute h-full bg-red-500\" />\r\n      </SliderPrimitive.Track>\r\n      {initialValue.map((value, index) => (\r\n        <React.Fragment key={index}>\r\n          <SliderPrimitive.Thumb className=\"relative block h-4 w-4 rounded-full border-2 border-red-600 bg-white shadow-md transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-red-500 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 hover:scale-110\">\r\n            {label && (\r\n              <span\r\n                className={cn(\r\n                  'absolute flex w-full justify-center',\r\n                  labelPosition === 'top' && '-top-7',\r\n                  labelPosition === 'bottom' && 'top-4',\r\n                )}\r\n              >\r\n                {label(value)}\r\n              </span>\r\n            )}\r\n          </SliderPrimitive.Thumb>\r\n        </React.Fragment>\r\n      ))}\r\n    </SliderPrimitive.Root>\r\n  );\r\n});\r\nDualRangeSlider.displayName = 'DualRangeSlider';\r\n\r\nexport { DualRangeSlider };\r\n",
        "form.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  ControllerProps,\n  FieldPath,\n  FieldValues,\n  FormProvider,\n  useFormContext,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message) : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n",
        "hover-card.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n",
        "input-otp.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n",
        "input.tsx": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n",
        "label.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n",
        "menubar.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst MenubarMenu = MenubarPrimitive.Menu\n\nconst MenubarGroup = MenubarPrimitive.Group\n\nconst MenubarPortal = MenubarPrimitive.Portal\n\nconst MenubarSub = MenubarPrimitive.Sub\n\nconst MenubarRadioGroup = MenubarPrimitive.RadioGroup\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n",
        "multiple-selector.tsx": "\"use client\";\r\n\r\nimport { Command as CommandPrimitive, useCommandState } from 'cmdk';\r\nimport { X } from 'lucide-react';\r\nimport * as React from 'react';\r\nimport { forwardRef, useEffect } from 'react';\r\n\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Command, CommandGroup, CommandItem, CommandList } from '@/components/ui/command';\r\nimport { cn } from '@/lib/utils';\r\n\r\nexport interface Option {\r\n  value: string;\r\n  label: string;\r\n  disable?: boolean;\r\n  /** fixed option that can't be removed. */\r\n  fixed?: boolean;\r\n  /** Group the options by providing key. */\r\n  [key: string]: string | boolean | undefined;\r\n}\r\ninterface GroupOption {\r\n  [key: string]: Option[];\r\n}\r\n\r\ninterface MultipleSelectorProps {\r\n  value?: Option[];\r\n  defaultOptions?: Option[];\r\n  /** manually controlled options */\r\n  options?: Option[];\r\n  placeholder?: string;\r\n  /** Loading component. */\r\n  loadingIndicator?: React.ReactNode;\r\n  /** Empty component. */\r\n  emptyIndicator?: React.ReactNode;\r\n  /** Debounce time for async search. Only work with `onSearch`. */\r\n  delay?: number;\r\n  /**\r\n   * Only work with `onSearch` prop. Trigger search when `onFocus`.\r\n   * For example, when user click on the input, it will trigger the search to get initial options.\r\n   **/\r\n  triggerSearchOnFocus?: boolean;\r\n  /** async search */\r\n  onSearch?: (value: string) => Promise<Option[]>;\r\n  /**\r\n   * sync search. This search will not showing loadingIndicator.\r\n   * The rest props are the same as async search.\r\n   * i.e.: creatable, groupBy, delay.\r\n   **/\r\n  onSearchSync?: (value: string) => Option[];\r\n  onChange?: (options: Option[]) => void;\r\n  /** Limit the maximum number of selected options. */\r\n  maxSelected?: number;\r\n  /** When the number of selected options exceeds the limit, the onMaxSelected will be called. */\r\n  onMaxSelected?: (maxLimit: number) => void;\r\n  /** Hide the placeholder when there are options selected. */\r\n  hidePlaceholderWhenSelected?: boolean;\r\n  disabled?: boolean;\r\n  /** Group the options base on provided key. */\r\n  groupBy?: string;\r\n  className?: string;\r\n  badgeClassName?: string;\r\n  /**\r\n   * First item selected is a default behavior by cmdk. That is why the default is true.\r\n   * This is a workaround solution by add a dummy item.\r\n   *\r\n   * @reference: https://github.com/pacocoursey/cmdk/issues/171\r\n   */\r\n  selectFirstItem?: boolean;\r\n  /** Allow user to create option when there is no option matched. */\r\n  creatable?: boolean;\r\n  /** Props of `Command` */\r\n  commandProps?: React.ComponentPropsWithoutRef<typeof Command>;\r\n  /** Props of `CommandInput` */\r\n  inputProps?: Omit<\r\n    React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>,\r\n    'value' | 'placeholder' | 'disabled'\r\n  >;\r\n  /** hide the clear all button. */\r\n  hideClearAllButton?: boolean;\r\n}\r\n\r\nexport interface MultipleSelectorRef {\r\n  selectedValue: Option[];\r\n  input: HTMLInputElement;\r\n  focus: () => void;\r\n  reset: () => void;\r\n}\r\n\r\nexport function useDebounce<T>(value: T, delay?: number): T {\r\n  const [debouncedValue, setDebouncedValue] = React.useState<T>(value);\r\n\r\n  useEffect(() => {\r\n    const timer = setTimeout(() => setDebouncedValue(value), delay || 500);\r\n\r\n    return () => {\r\n      clearTimeout(timer);\r\n    };\r\n  }, [value, delay]);\r\n\r\n  return debouncedValue;\r\n}\r\n\r\nfunction transToGroupOption(options: Option[], groupBy?: string) {\r\n  if (options.length === 0) {\r\n    return {};\r\n  }\r\n  if (!groupBy) {\r\n    return {\r\n      '': options,\r\n    };\r\n  }\r\n\r\n  const groupOption: GroupOption = {};\r\n  options.forEach((option) => {\r\n    const key = (option[groupBy] as string) || '';\r\n    if (!groupOption[key]) {\r\n      groupOption[key] = [];\r\n    }\r\n    groupOption[key].push(option);\r\n  });\r\n  return groupOption;\r\n}\r\n\r\nfunction removePickedOption(groupOption: GroupOption, picked: Option[]) {\r\n  const cloneOption = JSON.parse(JSON.stringify(groupOption)) as GroupOption;\r\n\r\n  for (const [key, value] of Object.entries(cloneOption)) {\r\n    cloneOption[key] = value.filter((val) => !picked.find((p) => p.value === val.value));\r\n  }\r\n  return cloneOption;\r\n}\r\n\r\nfunction isOptionsExist(groupOption: GroupOption, targetOption: Option[]) {\r\n  for (const [, value] of Object.entries(groupOption)) {\r\n    if (value.some((option) => targetOption.find((p) => p.value === option.value))) {\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\n/**\r\n * The `CommandEmpty` of shadcn/ui will cause the cmdk empty not rendering correctly.\r\n * So we create one and copy the `Empty` implementation from `cmdk`.\r\n *\r\n * @reference: https://github.com/hsuanyi-chou/shadcn-ui-expansions/issues/34#issuecomment-1949561607\r\n **/\r\nconst CommandEmpty = forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentProps<typeof CommandPrimitive.Empty>\r\n>(({ className, ...props }, forwardedRef) => {\r\n  const render = useCommandState((state) => state.filtered.count === 0);\r\n\r\n  if (!render) return null;\r\n\r\n  return (\r\n    <div\r\n      ref={forwardedRef}\r\n      className={cn('py-6 text-center text-sm', className)}\r\n      cmdk-empty=\"\"\r\n      role=\"presentation\"\r\n      {...props}\r\n    />\r\n  );\r\n});\r\n\r\nCommandEmpty.displayName = 'CommandEmpty';\r\n\r\nconst MultipleSelector = React.forwardRef<MultipleSelectorRef, MultipleSelectorProps>(\r\n  (\r\n    {\r\n      value,\r\n      onChange,\r\n      placeholder,\r\n      defaultOptions: arrayDefaultOptions = [],\r\n      options: arrayOptions,\r\n      delay,\r\n      onSearch,\r\n      onSearchSync,\r\n      loadingIndicator,\r\n      emptyIndicator,\r\n      maxSelected = Number.MAX_SAFE_INTEGER,\r\n      onMaxSelected,\r\n      hidePlaceholderWhenSelected,\r\n      disabled,\r\n      groupBy,\r\n      className,\r\n      badgeClassName,\r\n      selectFirstItem = true,\r\n      creatable = false,\r\n      triggerSearchOnFocus = false,\r\n      commandProps,\r\n      inputProps,\r\n      hideClearAllButton = false,\r\n    }: MultipleSelectorProps,\r\n    ref: React.Ref<MultipleSelectorRef>,\r\n  ) => {\r\n    const inputRef = React.useRef<HTMLInputElement>(null);\r\n    const [open, setOpen] = React.useState(false);\r\n    const [onScrollbar, setOnScrollbar] = React.useState(false);\r\n    const [isLoading, setIsLoading] = React.useState(false);\r\n    const dropdownRef = React.useRef<HTMLDivElement>(null); // Added this\r\n\r\n    const [selected, setSelected] = React.useState<Option[]>(value || []);\r\n    const [options, setOptions] = React.useState<GroupOption>(\r\n      transToGroupOption(arrayDefaultOptions, groupBy),\r\n    );\r\n    const [inputValue, setInputValue] = React.useState('');\r\n    const debouncedSearchTerm = useDebounce(inputValue, delay || 500);\r\n\r\n    React.useImperativeHandle(\r\n      ref,\r\n      () => ({\r\n        selectedValue: [...selected],\r\n        input: inputRef.current as HTMLInputElement,\r\n        focus: () => inputRef?.current?.focus(),\r\n        reset: () => setSelected([]),\r\n      }),\r\n      [selected],\r\n    );\r\n\r\n    const handleClickOutside = (event: MouseEvent | TouchEvent) => {\r\n      if (\r\n        dropdownRef.current &&\r\n        !dropdownRef.current.contains(event.target as Node) &&\r\n        inputRef.current &&\r\n        !inputRef.current.contains(event.target as Node)\r\n      ) {\r\n        setOpen(false);\r\n        inputRef.current.blur();\r\n      }\r\n    };\r\n\r\n    const handleUnselect = React.useCallback(\r\n      (option: Option) => {\r\n        const newOptions = selected.filter((s) => s.value !== option.value);\r\n        setSelected(newOptions);\r\n        onChange?.(newOptions);\r\n      },\r\n      [onChange, selected],\r\n    );\r\n\r\n    const handleKeyDown = React.useCallback(\r\n      (e: React.KeyboardEvent<HTMLDivElement>) => {\r\n        const input = inputRef.current;\r\n        if (input) {\r\n          if (e.key === 'Delete' || e.key === 'Backspace') {\r\n            if (input.value === '' && selected.length > 0) {\r\n              const lastSelectOption = selected[selected.length - 1];\r\n              // If there is a last item and it is not fixed, we can remove it.\r\n              if (lastSelectOption && !lastSelectOption.fixed) {\r\n                handleUnselect(lastSelectOption);\r\n              }\r\n            }\r\n          }\r\n          // This is not a default behavior of the <input /> field\r\n          if (e.key === 'Escape') {\r\n            input.blur();\r\n          }\r\n        }\r\n      },\r\n      [handleUnselect, selected],\r\n    );\r\n\r\n    useEffect(() => {\r\n      if (open) {\r\n        document.addEventListener('mousedown', handleClickOutside);\r\n        document.addEventListener('touchend', handleClickOutside);\r\n      } else {\r\n        document.removeEventListener('mousedown', handleClickOutside);\r\n        document.removeEventListener('touchend', handleClickOutside);\r\n      }\r\n\r\n      return () => {\r\n        document.removeEventListener('mousedown', handleClickOutside);\r\n        document.removeEventListener('touchend', handleClickOutside);\r\n      };\r\n    }, [open]);\r\n\r\n    useEffect(() => {\r\n      if (value) {\r\n        setSelected(value);\r\n      }\r\n    }, [value]);\r\n\r\n    useEffect(() => {\r\n      /** If `onSearch` is provided, do not trigger options updated. */\r\n      if (!arrayOptions || onSearch) {\r\n        return;\r\n      }\r\n      const newOption = transToGroupOption(arrayOptions || [], groupBy);\r\n      if (JSON.stringify(newOption) !== JSON.stringify(options)) {\r\n        setOptions(newOption);\r\n      }\r\n    }, [arrayDefaultOptions, arrayOptions, groupBy, onSearch, options]);\r\n\r\n    useEffect(() => {\r\n      /** sync search */\r\n\r\n      const doSearchSync = () => {\r\n        const res = onSearchSync?.(debouncedSearchTerm);\r\n        setOptions(transToGroupOption(res || [], groupBy));\r\n      };\r\n\r\n      const exec = async () => {\r\n        if (!onSearchSync || !open) return;\r\n\r\n        if (triggerSearchOnFocus) {\r\n          doSearchSync();\r\n        }\r\n\r\n        if (debouncedSearchTerm) {\r\n          doSearchSync();\r\n        }\r\n      };\r\n\r\n      void exec();\r\n      // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [debouncedSearchTerm, groupBy, open, triggerSearchOnFocus]);\r\n\r\n    useEffect(() => {\r\n      /** async search */\r\n\r\n      const doSearch = async () => {\r\n        setIsLoading(true);\r\n        const res = await onSearch?.(debouncedSearchTerm);\r\n        setOptions(transToGroupOption(res || [], groupBy));\r\n        setIsLoading(false);\r\n      };\r\n\r\n      const exec = async () => {\r\n        if (!onSearch || !open) return;\r\n\r\n        if (triggerSearchOnFocus) {\r\n          await doSearch();\r\n        }\r\n\r\n        if (debouncedSearchTerm) {\r\n          await doSearch();\r\n        }\r\n      };\r\n\r\n      void exec();\r\n      // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [debouncedSearchTerm, groupBy, open, triggerSearchOnFocus]);\r\n\r\n    const CreatableItem = () => {\r\n      if (!creatable) return undefined;\r\n      if (\r\n        isOptionsExist(options, [{ value: inputValue, label: inputValue }]) ||\r\n        selected.find((s) => s.value === inputValue)\r\n      ) {\r\n        return undefined;\r\n      }\r\n\r\n      const Item = (\r\n        <CommandItem\r\n          value={inputValue}\r\n          className=\"cursor-pointer\"\r\n          onMouseDown={(e) => {\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n          }}\r\n          onSelect={(value: string) => {\r\n            if (selected.length >= maxSelected) {\r\n              onMaxSelected?.(selected.length);\r\n              return;\r\n            }\r\n            setInputValue('');\r\n            const newOptions = [...selected, { value, label: value }];\r\n            setSelected(newOptions);\r\n            onChange?.(newOptions);\r\n          }}\r\n        >\r\n          {`Create \"${inputValue}\"`}\r\n        </CommandItem>\r\n      );\r\n\r\n      // For normal creatable\r\n      if (!onSearch && inputValue.length > 0) {\r\n        return Item;\r\n      }\r\n\r\n      // For async search creatable. avoid showing creatable item before loading at first.\r\n      if (onSearch && debouncedSearchTerm.length > 0 && !isLoading) {\r\n        return Item;\r\n      }\r\n\r\n      return undefined;\r\n    };\r\n\r\n    const EmptyItem = React.useCallback(() => {\r\n      if (!emptyIndicator) return undefined;\r\n\r\n      // For async search that showing emptyIndicator\r\n      if (onSearch && !creatable && Object.keys(options).length === 0) {\r\n        return (\r\n          <CommandItem value=\"-\" disabled>\r\n            {emptyIndicator}\r\n          </CommandItem>\r\n        );\r\n      }\r\n\r\n      return <CommandEmpty>{emptyIndicator}</CommandEmpty>;\r\n    }, [creatable, emptyIndicator, onSearch, options]);\r\n\r\n    const selectables = React.useMemo<GroupOption>(\r\n      () => removePickedOption(options, selected),\r\n      [options, selected],\r\n    );\r\n\r\n    /** Avoid Creatable Selector freezing or lagging when paste a long string. */\r\n    const commandFilter = React.useCallback(() => {\r\n      if (commandProps?.filter) {\r\n        return commandProps.filter;\r\n      }\r\n\r\n      if (creatable) {\r\n        return (value: string, search: string) => {\r\n          return value.toLowerCase().includes(search.toLowerCase()) ? 1 : -1;\r\n        };\r\n      }\r\n      // Using default filter in `cmdk`. We don't have to provide it.\r\n      return undefined;\r\n    }, [creatable, commandProps?.filter]);\r\n\r\n    return (\r\n      <Command\r\n        ref={dropdownRef}\r\n        {...commandProps}\r\n        onKeyDown={(e) => {\r\n          handleKeyDown(e);\r\n          commandProps?.onKeyDown?.(e);\r\n        }}\r\n        className={cn('h-auto overflow-visible bg-transparent', commandProps?.className)}\r\n        shouldFilter={\r\n          commandProps?.shouldFilter !== undefined ? commandProps.shouldFilter : !onSearch\r\n        } // When onSearch is provided, we don't want to filter the options. You can still override it.\r\n        filter={commandFilter()}\r\n      >\r\n        <div\r\n          className={cn(\r\n            'min-h-10 rounded-md border border-input text-base ring-offset-background focus-within:ring-2 focus-within:ring-ring focus-within:ring-offset-2 md:text-sm',\r\n            {\r\n              'px-3 py-2': selected.length !== 0,\r\n              'cursor-text': !disabled && selected.length !== 0,\r\n            },\r\n            className,\r\n          )}\r\n          onClick={() => {\r\n            if (disabled) return;\r\n            inputRef?.current?.focus();\r\n          }}\r\n        >\r\n          <div className=\"relative flex flex-wrap gap-1\">\r\n            {selected.map((option) => {\r\n              return (\r\n                <Badge\r\n                  key={option.value}\r\n                  className={cn(\r\n                    'data-[disabled]:bg-muted-foreground data-[disabled]:text-muted data-[disabled]:hover:bg-muted-foreground',\r\n                    'data-[fixed]:bg-muted-foreground data-[fixed]:text-muted data-[fixed]:hover:bg-muted-foreground',\r\n                    badgeClassName,\r\n                  )}\r\n                  data-fixed={option.fixed}\r\n                  data-disabled={disabled || undefined}\r\n                >\r\n                  {option.label}\r\n                  <button\r\n                    type=\"button\"\r\n                    className={cn(\r\n                      'ml-1 rounded-full outline-none ring-offset-background focus:ring-2 focus:ring-ring focus:ring-offset-2',\r\n                      (disabled || option.fixed) && 'hidden',\r\n                    )}\r\n                    onKeyDown={(e) => {\r\n                      if (e.key === 'Enter') {\r\n                        handleUnselect(option);\r\n                      }\r\n                    }}\r\n                    onMouseDown={(e) => {\r\n                      e.preventDefault();\r\n                      e.stopPropagation();\r\n                    }}\r\n                    onClick={() => handleUnselect(option)}\r\n                  >\r\n                    <X className=\"h-3 w-3 text-muted-foreground hover:text-foreground\" />\r\n                  </button>\r\n                </Badge>\r\n              );\r\n            })}\r\n            {/* Avoid having the \"Search\" Icon */}\r\n            <CommandPrimitive.Input\r\n              {...inputProps}\r\n              ref={inputRef}\r\n              value={inputValue}\r\n              disabled={disabled}\r\n              onValueChange={(value) => {\r\n                setInputValue(value);\r\n                inputProps?.onValueChange?.(value);\r\n              }}\r\n              onBlur={(event) => {\r\n                if (!onScrollbar) {\r\n                  setOpen(false);\r\n                }\r\n                inputProps?.onBlur?.(event);\r\n              }}\r\n              onFocus={(event) => {\r\n                setOpen(true);\r\n                inputProps?.onFocus?.(event);\r\n              }}\r\n              placeholder={hidePlaceholderWhenSelected && selected.length !== 0 ? '' : placeholder}\r\n              className={cn(\r\n                'flex-1 bg-transparent outline-none placeholder:text-muted-foreground',\r\n                {\r\n                  'w-full': hidePlaceholderWhenSelected,\r\n                  'px-3 py-2': selected.length === 0,\r\n                  'ml-1': selected.length !== 0,\r\n                },\r\n                inputProps?.className,\r\n              )}\r\n            />\r\n            <button\r\n              type=\"button\"\r\n              onClick={() => {\r\n                setSelected(selected.filter((s) => s.fixed));\r\n                onChange?.(selected.filter((s) => s.fixed));\r\n              }}\r\n              className={cn(\r\n                'absolute ltr:right-0 rtl:left-0 h-6 w-6 p-0',\r\n                (hideClearAllButton ||\r\n                  disabled ||\r\n                  selected.length < 1 ||\r\n                  selected.filter((s) => s.fixed).length === selected.length) &&\r\n                  'hidden',\r\n              )}\r\n            >\r\n              <X />\r\n            </button>\r\n          </div>\r\n        </div>\r\n        <div className=\"relative\">\r\n          {open && (\r\n            <CommandList\r\n              className=\"absolute top-1 z-10 w-full rounded-md border bg-popover text-popover-foreground shadow-md outline-none animate-in\"\r\n              onMouseLeave={() => {\r\n                setOnScrollbar(false);\r\n              }}\r\n              onMouseEnter={() => {\r\n                setOnScrollbar(true);\r\n              }}\r\n              onMouseUp={() => {\r\n                inputRef?.current?.focus();\r\n              }}\r\n            >\r\n              {isLoading ? (\r\n                <>{loadingIndicator}</>\r\n              ) : (\r\n                <>\r\n                  {EmptyItem()}\r\n                  {CreatableItem()}\r\n                  {!selectFirstItem && <CommandItem value=\"-\" className=\"hidden\" />}\r\n                  {Object.entries(selectables).map(([key, dropdowns]) => (\r\n                    <CommandGroup key={key} heading={key} className=\"h-full overflow-auto\">\r\n                      <>\r\n                        {dropdowns.map((option) => {\r\n                          return (\r\n                            <CommandItem\r\n                              key={option.value}\r\n                              value={option.label}\r\n                              disabled={option.disable}\r\n                              onMouseDown={(e) => {\r\n                                e.preventDefault();\r\n                                e.stopPropagation();\r\n                              }}\r\n                              onSelect={() => {\r\n                                if (selected.length >= maxSelected) {\r\n                                  onMaxSelected?.(selected.length);\r\n                                  return;\r\n                                }\r\n                                setInputValue('');\r\n                                const newOptions = [...selected, option];\r\n                                setSelected(newOptions);\r\n                                onChange?.(newOptions);\r\n                              }}\r\n                              className={cn(\r\n                                'cursor-pointer',\r\n                                option.disable && 'cursor-default text-muted-foreground',\r\n                              )}\r\n                            >\r\n                              {option.label}\r\n                            </CommandItem>\r\n                          );\r\n                        })}\r\n                      </>\r\n                    </CommandGroup>\r\n                  ))}\r\n                </>\r\n              )}\r\n            </CommandList>\r\n          )}\r\n        </div>\r\n      </Command>\r\n    );\r\n  },\r\n);\r\n\r\nMultipleSelector.displayName = 'MultipleSelector';\r\nexport default MultipleSelector;\r\n",
        "navigation-menu.tsx": "import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n",
        "pagination.tsx": "import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\nimport Link from \"next/link\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<typeof Link>\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <Link\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n",
        "popover.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n",
        "progress.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n",
        "radio-group.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n",
        "resizable.tsx": "\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n",
        "scroll-area.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n",
        "select.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4 text-transparent\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n",
        "separator.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n",
        "sheet.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n",
        "sidebar.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { Sheet, SheetContent } from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar:state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContext = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContext | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContext>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden md:block text-sidebar-foreground\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex min-h-svh flex-1 flex-col bg-background\",\n        \"peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"rounded-md h-8 flex gap-2 px-2 items-center\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 flex-1 max-w-[--skeleton-width]\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n",
        "skeleton.tsx": "import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n",
        "slider.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n",
        "sonner.tsx": "\"use client\"\n\nimport { useTheme } from \"next-themes\"\nimport { Toaster as Sonner } from \"sonner\"\n\ntype ToasterProps = React.ComponentProps<typeof Sonner>\n\nconst Toaster = ({ ...props }: ToasterProps) => {\n  const { theme = \"system\" } = useTheme()\n\n  return (\n    <Sonner\n      theme={theme as ToasterProps[\"theme\"]}\n      className=\"toaster group\"\n      toastOptions={{\n        classNames: {\n          toast:\n            \"group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg\",\n          description: \"group-[.toast]:text-muted-foreground\",\n          actionButton:\n            \"group-[.toast]:bg-primary group-[.toast]:text-primary-foreground\",\n          cancelButton:\n            \"group-[.toast]:bg-muted group-[.toast]:text-muted-foreground\",\n        },\n      }}\n      {...props}\n    />\n  )\n}\n\nexport { Toaster }\n",
        "switch.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n",
        "table.tsx": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n",
        "tabs.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n",
        "textarea.tsx": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n",
        "toast.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n",
        "toaster.tsx": "\"use client\"\n\nimport { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n",
        "toggle-group.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n",
        "toggle.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n",
        "tooltip.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n",
        "use-mobile.tsx": "import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n",
        "use-toast.ts": "\"use client\"\n\n// Inspired by react-hot-toast library\nimport * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n"
      },
      "url-persistence-info.tsx": "\"use client\"\r\n\r\nimport { useState } from \"react\"\r\nimport { Info, X, CheckCircle } from \"lucide-react\"\r\nimport { Button } from \"./ui/button\"\r\nimport { Alert, AlertDescription } from \"./ui/alert\"\r\nimport { useURLDataDetector } from \"@/hooks/use-url-data-detector\"\r\n\r\nexport function URLPersistenceInfo() {\r\n  const [isVisible, setIsVisible] = useState(true)\r\n  const { hasCartData, hasFiltersData, hasAnyData } = useURLDataDetector()\r\n\r\n  if (!isVisible) return null\r\n\r\n  return (\r\n    <Alert className={`mb-4 ${hasAnyData ? 'border-green-200 bg-green-50' : 'border-blue-200 bg-blue-50'}`}>\r\n      {hasAnyData ? (\r\n        <CheckCircle className=\"h-4 w-4 text-green-600\" />\r\n      ) : (\r\n        <Info className=\"h-4 w-4 text-blue-600\" />\r\n      )}\r\n      <AlertDescription className={hasAnyData ? 'text-green-800' : 'text-blue-800'}>\r\n        <div className=\"flex items-center justify-between\">\r\n          <span>\r\n            {hasAnyData ? (\r\n              <>\r\n                ✅ Datos recuperados de la URL: \r\n                {hasCartData && <span className=\"font-medium\"> Carrito</span>}\r\n                {hasCartData && hasFiltersData && <span> y </span>}\r\n                {hasFiltersData && <span className=\"font-medium\"> Filtros</span>}\r\n                <span> restaurados correctamente.</span>\r\n              </>\r\n            ) : (\r\n              <>\r\n              Toast\r\n                💾 Tus filtros y carrito se guardan automáticamente en la URL. \r\n                Puedes compartir el enlace o recargar la página sin perder tu progreso.\r\n              </>\r\n            )}\r\n          </span>\r\n          <Button\r\n            variant=\"ghost\"\r\n            size=\"sm\"\r\n            onClick={() => setIsVisible(false)}\r\n            className={`ml-2 h-6 w-6 p-0 ${hasAnyData ? 'text-green-600 hover:text-green-800' : 'text-blue-600 hover:text-blue-800'}`}\r\n          >\r\n            <X className=\"h-4 w-4\" />\r\n          </Button>\r\n        </div>\r\n      </AlertDescription>\r\n    </Alert>\r\n  )\r\n} ",
      "user-menu.tsx": "\"use client\"\n\nimport { User, LogOut, Truck, Store, Settings, ShoppingCart } from \"lucide-react\"\nimport { Button } from \"@/components/ui/button\"\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\nimport { useAuth } from \"@/providers/auth-provider\"\nimport { WineIcon} from \"lucide-react\"\n\ninterface UserMenuProps {\n  currentView: \"store\" | \"admin\" | \"cart\"\n  onViewChange: (view: \"store\" | \"admin\" | \"cart\") => void\n  availableViews: (\"store\" | \"admin\" | \"cart\")[]\n}\n\nexport function UserMenu({ currentView, onViewChange, availableViews }: UserMenuProps) {\n  const { logout, user } = useAuth()\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button variant=\"outline\">\n          <User className=\"h-4 w-4\" />\n          {user?.isAdmin ? <WineIcon /> : user?.name || \"Usuario\"}\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\">\n        {availableViews.includes(\"store\") && (\n          <DropdownMenuItem onClick={() => onViewChange(\"store\")}>\n            <Store className=\"h-4 w-4 mr-2\" />\n            Tienda\n          </DropdownMenuItem>\n        )}\n        \n        {availableViews.includes(\"cart\") && (\n          <DropdownMenuItem onClick={() => onViewChange(\"cart\")}>\n            <ShoppingCart className=\"h-4 w-4 mr-2\" />\n            Carrito\n          </DropdownMenuItem>\n        )}\n        \n        {user?.isAdmin && availableViews.includes(\"admin\") && (\n          <DropdownMenuItem onClick={() => onViewChange(\"admin\")}>\n            <Settings className=\"h-4 w-4 mr-2\" />\n            Panel de Administración\n          </DropdownMenuItem>\n        )}\n        \n        <DropdownMenuSeparator />\n        <DropdownMenuItem onClick={logout}>\n          <LogOut className=\"h-4 w-4 mr-2\" />\n          Cerrar Sesión\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  )\n}\n",
      "views": {
        "admin-view.tsx": "\"use client\"\n\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport { AdminPanel } from \"../admin-panel\"\nimport { useConsumibles } from '@/hooks/use-consumibles';\nimport { Table, TableHeader, TableBody, TableRow, TableHead, TableCell } from '../ui/table';\nimport { Button } from '../ui/button';\nimport { SquarePen, Trash2 } from 'lucide-react';\nimport { useState, useMemo, useEffect } from 'react';\nimport type { Consumibles, Wine } from '@/types';\nimport EditConsumibleModal from '../modales/edit-consumible-modal';\n\ninterface AdminViewProps {\n  wines: Wine[]\n}\n\nexport function AdminView({ wines }: AdminViewProps) {\n  const { consumibles, loading: loadingConsumibles, error: errorConsumibles } = useConsumibles();\n  const [searchConsumibleTerm, setSearchConsumibleTerm] = useState(\"\");\n  const [currentPage, setCurrentPage] = useState(1);\n  const itemsPerPage = 10;\n  const [editingConsumible, setEditingConsumible] = useState<Consumibles | null>(null);\n  const [localConsumibles, setLocalConsumibles] = useState<Consumibles[]>([]);\n\n  // Sincronizar localConsumibles con consumibles del hook\n  useEffect(() => { setLocalConsumibles(consumibles); }, [consumibles]);\n\n  const filteredConsumibles = useMemo(() => {\n    const term = searchConsumibleTerm.toLowerCase();\n    return localConsumibles.filter(c =>\n      c.nombre.toLowerCase().includes(term) ||\n      c.descripcion.toLowerCase().includes(term)\n    );\n  }, [localConsumibles, searchConsumibleTerm]);\n  const totalPages = Math.ceil(filteredConsumibles.length / itemsPerPage);\n  const startIndex = (currentPage - 1) * itemsPerPage;\n  const endIndex = startIndex + itemsPerPage;\n  const paginatedConsumibles = filteredConsumibles.slice(startIndex, endIndex);\n\n  function handleEditConsumible(consumible: Consumibles) {\n    setEditingConsumible(consumible);\n  }\n  function handleSaveConsumibleEdit(updated: Consumibles) {\n    setLocalConsumibles(prev => prev.map(c => c.id === updated.id ? updated : c));\n    setEditingConsumible(null);\n  }\n\n  return (\n    <section aria-label=\"Panel de administración\">\n      <Tabs defaultValue=\"Administracion de Vinos\" className=\"w-full\">\n        <TabsList>\n          <TabsTrigger value=\"Administracion de Vinos\">Administracion de Vinos</TabsTrigger>\n          <TabsTrigger value=\"Administracion de Consumibles\">Administracion de Consumibles</TabsTrigger>\n        </TabsList>\n        <TabsContent value=\"Administracion de Vinos\">\n          <AdminPanel wines={wines} />\n        </TabsContent>\n        <TabsContent value=\"Administracion de Consumibles\">\n          <div>\n            {loadingConsumibles && <div>Cargando consumibles...</div>}\n            {errorConsumibles && <div className=\"text-red-500\">{errorConsumibles}</div>}\n            {/* Barra de búsqueda */}\n            <div className=\"flex justify-center mb-4\">\n              <input\n                type=\"text\"\n                placeholder=\"Buscar consumible por nombre o descripción...\"\n                className=\"border border-gray-300 rounded-xl px-4 py-2 w-full max-w-md focus:ring-2 focus:ring-red-500 focus:border-red-500 transition-all\"\n                value={searchConsumibleTerm}\n                onChange={e => setSearchConsumibleTerm(e.target.value)}\n              />\n            </div>\n            {filteredConsumibles.length === 0 ? (\n              <div className=\"text-center text-gray-500\">No hay consumibles disponibles.</div>\n            ) : (\n              <div className=\"bg-white rounded-2xl shadow-xl overflow-hidden border border-red-100 mt-6\">\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full\">\n                    <thead className=\"bg-gradient-to-r from-red-600 to-red-700 text-white\">\n                      <tr>\n                        <th className=\"px-6 py-4 text-center text-sm font-semibold uppercase tracking-wider\">Imagen</th>\n                        <th className=\"px-6 py-4 text-center text-sm font-semibold uppercase tracking-wider\">Nombre</th>\n                        <th className=\"px-6 py-4 text-center text-sm font-semibold uppercase tracking-wider\">Descripción</th>\n                        <th className=\"px-6 py-4 text-center text-sm font-semibold uppercase tracking-wider\">Precio</th>\n                        <th className=\"px-6 py-4 text-center text-sm font-semibold uppercase tracking-wider\">Acciones</th>\n                      </tr>\n                    </thead>\n                    <tbody className=\"divide-y divide-gray-100\">\n                      {paginatedConsumibles.map((item, idx) => (\n                        <tr key={item.id} className=\"hover:bg-red-50 bg-white\">\n                          <td className=\"px-6 py-4 text-center\">\n                            <img src={item.url_imagen} alt={item.nombre} className=\"w-16 h-16 object-cover rounded mx-auto border border-gray-200 shadow-sm\" />\n                          </td>\n                          <td className=\"px-6 py-4 text-center font-semibold text-gray-900\">{item.nombre}</td>\n                          <td className=\"px-6 py-4 text-center text-gray-700\">{item.descripcion}</td>\n                          <td className=\"px-6 py-4 text-center font-semibold text-gray-900\">\n                            {new Intl.NumberFormat(\n                              'es-CO', { \n                                style: 'currency', \n                                currency: 'COP', \n                                minimumFractionDigits: 0 \n                              }).format(item.precio)}\n                          </td>\n                          <td className=\"px-6 py-4 text-center\">\n                            <div className=\"flex items-center justify-center gap-2 w-full\">\n                              <EditConsumibleModal\n                                consumible={item}\n                                onSave={handleSaveConsumibleEdit}\n                              >\n                                <button className=\"bg-blue-600 hover:bg-blue-700 text-white p-2 h-8 w-8 rounded-md flex items-center justify-center transition-colors\" title=\"Editar\">\n                                  <SquarePen size={16} />\n                                </button>\n                              </EditConsumibleModal>\n                              <button className=\"bg-red-600 hover:bg-red-700 text-white p-2 h-8 w-8 rounded-md flex items-center justify-center transition-colors\" title=\"Eliminar\">\n                                <Trash2 size={16} />\n                              </button>\n                            </div>\n                          </td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n                {/* Paginación */}\n                {totalPages > 1 && (\n                  <div className=\"flex items-center justify-between px-6 py-4 bg-white border-t border-gray-200 mt-2 rounded-2xl\">\n                    <div className=\"text-sm text-gray-700\">\n                      Mostrando {startIndex + 1} a {Math.min(endIndex, filteredConsumibles.length)} de {filteredConsumibles.length} consumibles\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}\n                        disabled={currentPage === 1}\n                        className=\"flex items-center gap-1\"\n                      >\n                        Anterior\n                      </Button>\n                      <div className=\"flex items-center gap-1\">\n                        {Array.from({ length: totalPages }, (_, i) => i + 1).map(page => (\n                          <Button\n                            key={page}\n                            variant={currentPage === page ? \"default\" : \"outline\"}\n                            className={`h-9 w-9 p-0 ${currentPage === page ? 'bg-red-600 hover:bg-red-700' : ''}`}\n                            size=\"sm\"\n                            onClick={() => setCurrentPage(page)}\n                          >\n                            {page}\n                          </Button>\n                        ))}\n                      </div>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => setCurrentPage(Math.min(totalPages, currentPage + 1))}\n                        disabled={currentPage === totalPages}\n                        className=\"flex items-center gap-1\"\n                      >\n                        Siguiente\n                      </Button>\n                    </div>\n                  </div>\n                )}\n              </div>\n            )}\n          </div>\n        </TabsContent>\n      </Tabs>\n      {/* Modal de edición de consumible */}\n      {editingConsumible && (\n        <EditConsumibleModal\n          consumible={editingConsumible}\n          onSave={handleSaveConsumibleEdit}\n        >\n          {/* El trigger es invisible, el modal se abre por estado */}\n          <span />\n        </EditConsumibleModal>\n      )}\n    </section>\n  )\n} ",
        "cart-view.tsx": "\"use client\"\r\n\r\nimport { useCart } from \"@/hooks/use-cart\"\r\nimport { WineService } from \"@/lib/services/wine-service\"\r\nimport type { Wine } from \"@/types\"\r\nimport { useState, useEffect } from \"react\"\r\nimport { Button } from \"@/components/ui/button\"\r\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\r\nimport { Badge } from \"@/components/ui/badge\"\r\nimport { Trash2, Plus, Minus, ArrowLeft, ShoppingBag } from \"lucide-react\"\r\nimport { formatPrice } from \"@/utils/price\"\r\n\r\ninterface CartViewProps {\r\n  onBack: () => void\r\n}\r\n\r\nfunction CheckoutQR(\r\n  { cart, ciudad, direccion, nombre, onBack }:\r\n    { cart: any[], ciudad: string, direccion: string, nombre: string, onBack: () => void }) {\r\n  const [timer, setTimer] = useState(60);\r\n  const [whatsappSent, setWhatsappSent] = useState(false);\r\n  const [popupBlocked, setPopupBlocked] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (timer === 0 && !whatsappSent) {\r\n      const mensaje = encodeURIComponent(\r\n        `Nombre: ${nombre}\\nCiudad: ${ciudad}\\nDirección: ${direccion}\\n\\n` +\r\n        cart.map(item => `${item.nombre} ${item.variedades}\\nCantidad: ${item.quantity}\\nPrecio: $${item.precio}`).join(\"\\n---\\n\")\r\n      );\r\n      const numero = \"573219085857\";\r\n\r\n      // Intentar abrir WhatsApp y detectar si está bloqueado\r\n      const whatsappWindow = window.open(`https://wa.me/${numero}?text=${mensaje}`, \"_blank\");\r\n\r\n      if (whatsappWindow) {\r\n        // La ventana se abrió correctamente\r\n        setWhatsappSent(true);\r\n        // Redirigir inmediatamente a la tienda\r\n        setTimeout(() => {\r\n          const url = new URL(window.location.href);\r\n          url.searchParams.set(\"view\", \"store\");\r\n          window.location.href = url.toString();\r\n        }, 1000);\r\n      } else {\r\n        // La ventana emergente fue bloqueada\r\n        setPopupBlocked(true);\r\n        setWhatsappSent(true);\r\n        // Esperar 15 segundos antes de redirigir\r\n        setTimeout(() => {\r\n          const url = new URL(window.location.href);\r\n          url.searchParams.set(\"view\", \"store\");\r\n          window.location.href = url.toString();\r\n        }, 15000);\r\n      }\r\n      return;\r\n    }\r\n\r\n    const interval = setInterval(() => setTimer(t => t - 1), 1000);\r\n    return () => clearInterval(interval);\r\n  }, [timer, cart, ciudad, direccion, nombre, whatsappSent]);\r\n\r\n  return (\r\n    <div className=\"flex flex-col items-center justify-center min-h-[60vh]\">\r\n      <h2 className=\"text-2xl font-bold mb-4\">Escanea el QR para pagar</h2>\r\n      <img src=\"/qr-pago.jpg\" alt=\"QR de pago\" className=\"w-56 h-56 mb-4\" />\r\n\r\n      {!whatsappSent ? (\r\n        <>\r\n          <p className=\"mb-2 max-w-3xl text-center\">En 1 minuto se enviará tu pedido por WhatsApp automáticamente</p>\r\n          <p className=\"mb-2 max-w-3xl text-center\">Si por alguna razon no hay disponibilidad de algun producto, con su pago usted esta reservando el mismo para el siguiente pedido</p>\r\n          <p className=\"text-lg font-semibold\">Tiempo restante: {timer} segundos</p>\r\n        </>\r\n      ) : popupBlocked ? (\r\n        <>\r\n          <p className=\"mb-2 max-w-3xl text-center text-orange-600 font-semibold\">\r\n            ⚠️ Las ventanas emergentes están bloqueadas\r\n          </p>\r\n          <p className=\"mb-2 max-w-3xl text-center\">\r\n            Tu pedido se envió por WhatsApp. Si no se abrió automáticamente,\r\n            puedes hacer clic en el enlace que apareció en la barra de notificaciones.\r\n          </p>\r\n          <p className=\"mb-2 max-w-3xl text-center\">\r\n            Serás redirigido a la tienda en 15 segundos para permitir que autorices la ventana emergente.\r\n          </p>\r\n          <p className=\"text-lg font-semibold text-orange-600\">\r\n            Redirigiendo en 15 segundos...\r\n          </p>\r\n        </>\r\n      ) : (\r\n        <>\r\n          <p className=\"mb-2 max-w-3xl text-center text-green-600 font-semibold\">\r\n            ✅ Pedido enviado por WhatsApp\r\n          </p>\r\n          <p className=\"mb-2 max-w-3xl text-center\">\r\n            Tu pedido se envió correctamente. Serás redirigido a la tienda en unos segundos.\r\n          </p>\r\n        </>\r\n      )}\r\n\r\n      <Button onClick={onBack} className=\"mt-6\">Volver al carrito</Button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport function CartView({ onBack }: CartViewProps) {\r\n  const [wines, setWines] = useState<Wine[]>([])\r\n  const [showQR, setShowQR] = useState(false);\r\n  const [ciudad, setCiudad] = useState(\"\");\r\n  const [direccion, setDireccion] = useState(\"\");\r\n  const [nombre, setNombre] = useState(\"\");\r\n  const [formOk, setFormOk] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const loadWines = async () => {\r\n      try {\r\n        const winesData = await WineService.getAllWines()\r\n        setWines(winesData)\r\n      } catch (error) {\r\n        console.error(\"Error loading wines:\", error)\r\n      }\r\n    }\r\n    loadWines()\r\n  }, [])\r\n\r\n  const cart = useCart(wines)\r\n\r\n  if (showQR && formOk) {\r\n    return <CheckoutQR cart={cart.cartItems} ciudad={ciudad} direccion={direccion} nombre={nombre} onBack={() => setShowQR(false)} />;\r\n  }\r\n\r\n  if (showQR && !formOk) {\r\n    // Formulario antes del QR\r\n    return (\r\n      <form\r\n        className=\"flex flex-col items-center justify-center min-h-[60vh] gap-4\"\r\n        onSubmit={e => {\r\n          e.preventDefault();\r\n          if (ciudad && direccion && nombre) setFormOk(true);\r\n        }}\r\n      >\r\n        <h2 className=\"text-2xl font-bold mb-4\">Datos de entrega</h2>\r\n        <input\r\n          className=\"border p-2 rounded w-64\"\r\n          placeholder=\"Nombre\"\r\n          value={nombre}\r\n          onChange={e => setNombre(e.target.value)}\r\n          required\r\n        />\r\n        <input\r\n          className=\"border p-2 rounded w-64\"\r\n          placeholder=\"Ciudad\"\r\n          value={ciudad}\r\n          onChange={e => setCiudad(e.target.value)}\r\n          required\r\n        />\r\n        <input\r\n          className=\"border p-2 rounded w-64\"\r\n          placeholder=\"Dirección\"\r\n          value={direccion}\r\n          onChange={e => setDireccion(e.target.value)}\r\n          required\r\n        />\r\n        <Button type=\"submit\" className=\"bg-red-600 text-white w-64\">Continuar al pago</Button>\r\n        <Button type=\"button\" variant=\"outline\" onClick={() => setShowQR(false)} className=\"w-64\">Volver al carrito</Button>\r\n      </form>\r\n    );\r\n  }\r\n\r\n  if (cart.cartItems.length === 0) {\r\n    return (\r\n      <div className=\"min-h-screen bg-gradient-to-br from-red-50 via-purple-50 to-red-100\">\r\n        <div className=\"container mx-auto px-4 py-6\">\r\n          <div className=\"grid grid-rows-2 grid-cols-2 lg:grid-cols-4 lg:grid-rows-1 gap-4 mb-2\">\r\n            <h1 className=\"text-2xl font-bold text-gray-900 col-span-2 lg:col-start-2 mx-auto\">Carrito de Compras</h1>\r\n            <Button variant=\"outline\" onClick={onBack} className=\"flex items-center gap-2 lg:col-start-1 lg:row-start-1\">\r\n              <ArrowLeft className=\"h-4 w-4\" />\r\n              Volver\r\n            </Button>\r\n            <Badge variant=\"outline\" className=\"mx-auto px-6 py-2 bg-red-600 text-white font-semibold rounded-md\">\r\n              {cart.cartItemCount} {cart.cartItemCount === 1 ? 'artículo' : 'artículos'}\r\n            </Badge>\r\n          </div>\r\n\r\n          <div className=\"flex items-center justify-center h-64\">\r\n            <div className=\"text-center\">\r\n              <ShoppingBag className=\"h-16 w-16 text-gray-400 mx-auto mb-4\" />\r\n              <h2 className=\"text-xl font-semibold text-gray-600 mb-2\">Tu carrito está vacío</h2>\r\n              <p className=\"text-gray-500 mb-4\">Agrega algunos vinos para comenzar tu compra</p>\r\n              <Button onClick={onBack} className=\"bg-red-600 hover:bg-red-700\">\r\n                Continuar Comprando\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gradient-to-br from-red-50 via-purple-50 to-red-100\">\r\n      <div className=\"container mx-auto px-4 py-6\">\r\n        <div className=\"grid grid-rows-2 grid-cols-2 lg:grid-cols-4 lg:grid-rows-1 gap-4 mb-2\">\r\n          <h1 className=\"text-2xl font-bold text-gray-900 col-span-2 lg:col-start-2 mx-auto\">Carrito de Compras</h1>\r\n          <Button variant=\"outline\" onClick={onBack} className=\"flex items-center gap-2 lg:col-start-1 lg:row-start-1\">\r\n            <ArrowLeft className=\"h-4 w-4\" />\r\n            Volver\r\n          </Button>\r\n          <Badge variant=\"outline\" className=\"mx-auto px-6 py-2 bg-red-600 text-white font-semibold rounded-md\">\r\n            {cart.cartItemCount} {cart.cartItemCount === 1 ? 'artículo' : 'artículos'}\r\n          </Badge>\r\n        </div>\r\n\r\n        <p className=\"text-md font bold text-center mb-8 max-w-[70%] mx-auto\">\r\n          Una vez realizado el pago, comenzaremos a procesar el pedido.\r\n          En caso de que algún producto no esté disponible, se notificará oportunamente.\r\n          El pago garantiza la reserva de los productos disponibles.\r\n        </p>\r\n\r\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\r\n          {/* Lista de productos */}\r\n          <div className=\"lg:col-span-2 space-y-4\">\r\n            {cart.cartItems.map((item) => {\r\n              const wine = wines.find(w => w.id_vino === item.id_vino)\r\n              if (!wine) return null\r\n\r\n              return (\r\n                <Card key={item.id_vino} className=\"overflow-hidden\">\r\n                  <CardContent className=\"p-4 sm:p-6\">\r\n                    <div className=\"flex flex-col sm:flex-row sm:items-center gap-4\">\r\n                      <div className=\"w-20 h-20 bg-gray-200 rounded-lg flex-shrink-0 mx-auto sm:mx-0\">\r\n                        {wine.url_imagen && (\r\n                          <img\r\n                            src={wine.url_imagen}\r\n                            alt={wine.nombre}\r\n                            className=\"w-full h-full object-cover rounded-lg\"\r\n                          />\r\n                        )}\r\n                      </div>\r\n\r\n                      <div className=\"flex-1 min-w-0 w-full\">\r\n                        <h3 className=\"font-semibold text-base sm:text-lg text-gray-900 truncate\">\r\n                          {wine.nombre} {wine.variedades.join(\", \")} {wine.capacidad < 750 ? wine.capacidad : \"\"}\r\n                        </h3>\r\n                        <p className=\"text-sm text-gray-600 mb-1 sm:mb-2\">\r\n                          {wine.wine_details.bodega} • {wine.pais_importacion}\r\n                        </p>\r\n                        <p className=\"text-base sm:text-lg font-bold text-start text-red-600\">\r\n                          {formatPrice(wine.precio)}\r\n                        </p>\r\n                      </div>\r\n\r\n                      <div className=\"flex flex-row sm:flex-col items-center sm:items-end gap-2 sm:gap-4 mt-2 sm:mt-0 w-full sm:w-auto justify-between\">\r\n                        <div className=\"flex items-center gap-2\">\r\n                          <Button\r\n                            variant=\"outline\"\r\n                            size=\"sm\"\r\n                            onClick={() => cart.updateQuantity(item.id_vino, item.quantity - 1)}\r\n                            disabled={item.quantity <= 1}\r\n                          >\r\n                            <Minus className=\"h-4 w-4\" />\r\n                          </Button>\r\n                          <span className=\"w-10 text-center font-medium\">{item.quantity}</span>\r\n                          <Button\r\n                            variant=\"outline\"\r\n                            size=\"sm\"\r\n                            onClick={() => cart.updateQuantity(item.id_vino, item.quantity + 1)}\r\n                          >\r\n                            <Plus className=\"h-4 w-4\" />\r\n                          </Button>\r\n                        </div>\r\n                        <Button\r\n                          variant=\"ghost\"\r\n                          size=\"sm\"\r\n                          onClick={() => cart.removeFromCart(item.id_vino)}\r\n                          className=\"text-red-600 hover:text-red-700 hover:bg-red-50 hover:underline hover:underline-offset-1 mx-auto\"\r\n                        >\r\n                          <Trash2 className=\"h-4 w-4\" />\r\n                          Eliminar\r\n                        </Button>\r\n                      </div>\r\n                    </div>\r\n                  </CardContent>\r\n                </Card>\r\n              )\r\n            })}\r\n          </div>\r\n\r\n          {/* Resumen del pedido */}\r\n          <div className=\"lg:col-span-1\">\r\n            <Card className=\"sticky top-6\">\r\n              <CardHeader>\r\n                <CardTitle>Resumen del Pedido</CardTitle>\r\n              </CardHeader>\r\n              <CardContent className=\"space-y-4\">\r\n                <div className=\"grid grid-cols-4 gap-2 text-sm px-4 text-gray-800 font-semibold border-b pb-2\">\r\n                  <span className=\"text-left col-span-2\">Producto</span>\r\n                  <span className=\"text-center col-start-3\">Cantidad</span>\r\n                  <span className=\"text-right col-start-4\">Subtotal</span>\r\n                </div>\r\n                <div className=\"divide-y\">\r\n                  {cart.cartItems.map((item) => {\r\n                    const wine = wines.find(w => w.id_vino === item.id_vino);\r\n                    if (!wine) return null;\r\n                    return (\r\n                      <div key={item.id_vino} className=\"grid grid-cols-4 gap-2 text-sm px-4 text-gray-800 items-center py-1\">\r\n                        <span className=\"text-left truncate col-span-2 flex justify-between\">\r\n                          <p>{wine.nombre} {wine.variedades.join(\", \")}</p> {wine.capacidad} ml\r\n                        </span>\r\n                        <span className=\"text-center col-start-3\">x{item.quantity}</span>\r\n                        <span className=\"text-right col-start-4\">{formatPrice(wine.precio * item.quantity)}</span>\r\n                      </div>\r\n                    );\r\n                  })}\r\n                </div>\r\n\r\n                <div className=\"flex justify-between text-sm\">\r\n                  <span>Envío</span>\r\n                  <span className=\"text-green-600\">Gratis</span>\r\n                </div>\r\n\r\n                <div className=\"border-t pt-4\">\r\n                  <div className=\"flex justify-between font-bold text-lg\">\r\n                    <span>Total</span>\r\n                    <span>{formatPrice(cart.cartTotal)}</span>\r\n                  </div>\r\n                </div>\r\n\r\n                <Button\r\n                  className=\"w-full bg-red-600 hover:bg-red-700 text-white py-3\"\r\n                  onClick={() => setShowQR(true)}\r\n                >\r\n                  Proceder al pago\r\n                </Button>\r\n\r\n                <Button variant=\"outline\" onClick={onBack} className=\"w-full\">\r\n                  Continuar Comprando\r\n                </Button>\r\n              </CardContent>\r\n            </Card>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}",
        "store-view.tsx": "\"use client\"\n\nimport { useCart } from \"@/hooks/use-cart\"\nimport { useFilters } from \"@/hooks/use-filters\"\nimport type { Wine } from \"@/types\"\nimport { useEffect, useMemo, useState } from \"react\"\n\nimport { FiltersSidebar } from \"../filters-sidebar\"\nimport { WineDetailModal } from \"../modales/wine-detail-modal\"\nimport { Button } from \"../ui/button\"\nimport { WineGrid } from \"../wine-grid\"\nimport { useConsumibles } from '../../hooks/use-consumibles';\n\ninterface StoreViewProps {\n  wines: Wine[]\n  searchTerm: string\n  onSearchChange: (term: string) => void\n  onFiltersClick: () => void\n  onCartItemCountChange: (count: number) => void\n  onFilteredWinesCountChange: (count: number) => void\n  isSidebarOpen: boolean\n  onSidebarToggle: () => void\n}\n\nexport function StoreView({\n  wines,\n  searchTerm,\n  onSearchChange,\n  onFiltersClick,\n  onCartItemCountChange,\n  onFilteredWinesCountChange,\n  isSidebarOpen,\n  onSidebarToggle,\n}: StoreViewProps) {\n  const { addToCart } = useCart(wines)\n  const filters = useFilters(wines)\n  const [selectedWine, setSelectedWine] = useState<Wine | null>(null)\n  const [isModalOpen, setIsModalOpen] = useState(false)\n  const { consumibles, loading: loadingConsumibles, error: errorConsumibles } = useConsumibles();\n\n  // Filtrar vinos basado en búsqueda y filtros\n  const filteredWines = useMemo(() => {\n    let filtered = filters.filteredWines\n\n    // Filtro por búsqueda\n    if (searchTerm) {\n      const searchLower = searchTerm.toLowerCase()\n      filtered = filtered.filter(\n        (wine) =>\n          wine.nombre.toLowerCase().includes(searchLower) ||\n          wine.wine_details.bodega.toLowerCase().includes(searchLower) ||\n          wine.variedades.some((variedad) =>\n            variedad.toLowerCase().includes(searchLower)\n          ) ||\n          wine.wine_details.tipo_crianza.toLowerCase().includes(searchLower) ||\n          wine.pais_importacion.toLowerCase().includes(searchLower) ||\n          wine.precio.toString().includes(searchTerm)\n      )\n    }\n\n    return filtered\n  }, [filters.filteredWines, searchTerm])\n\n  // Actualizar contador de elementos en el carrito\n  useEffect(() => {\n    // Este efecto se ejecutará cuando cambie el carrito\n    // El contador se actualiza desde el hook useCart\n  }, [])\n\n  // Actualizar contador de vinos filtrados\n  useEffect(() => {\n    onFilteredWinesCountChange(filteredWines.length)\n  }, [filteredWines.length, onFilteredWinesCountChange])\n\n  const handleAddToCart = (wineId: string) => {\n    addToCart(wineId)\n  }\n\n  const handleWineClick = (wine: Wine) => {\n    setSelectedWine(wine)\n    setIsModalOpen(true)\n  }\n\n  const handleCloseModal = () => {\n    setIsModalOpen(false)\n    setSelectedWine(null)\n  }\n\n  return (\n    <div className=\"flex-1 flex flex-col min-h-0\">\n      {/* Contenido principal */}\n      <div className=\"flex-1 flex min-h-0\">\n        {/* Sidebar de filtros */}\n        <FiltersSidebar\n          isOpen={isSidebarOpen}\n          setIsOpen={onSidebarToggle}\n          variedades={filters.variedades}\n          bodegas={filters.bodegas}\n          paises={filters.paises}\n          colores={filters.colores}\n          selectedVariedades={filters.filters.selectedVariedades}\n          selectedBodegas={filters.filters.selectedBodegas}\n          selectedPaises={filters.filters.selectedPaises}\n          selectedColores={filters.filters.selectedColores}\n          priceRange={filters.priceRange}\n          currentPriceRange={filters.filters.priceRange}\n          onToggleVariedad={filters.toggleVariedad}\n          onToggleBodega={filters.toggleBodega}\n          onTogglePais={filters.togglePais}\n          onToggleColor={filters.toggleColor}\n          onUpdatePriceRange={filters.updatePriceRange}\n          onClearFilters={filters.clearFilters}\n          hasActiveFilters={filters.hasActiveFilters}\n          varietalCounts={filters.varietalCounts}\n          bodegaCounts={filters.bodegaCounts}\n          paisCounts={filters.paisCounts}\n          colorCounts={filters.colorCounts}\n        />\n\n        {/* Contenido principal */}\n        <main className=\"flex-1 lg:px-6 overflow-y-auto\">\n          {filteredWines.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">\n                No se encontraron vinos\n              </h3>\n              <p className=\"text-gray-600 mb-4\">\n                Intenta ajustar tus filtros o términos de búsqueda\n              </p>\n              <Button onClick={filters.clearFilters} variant=\"outline\">\n                Limpiar filtros\n              </Button>\n            </div>\n          ) : (\n            <WineGrid\n              wines={filteredWines}\n              onAddToCart={handleAddToCart}\n              onClick={handleWineClick}\n              priority={true}\n            />\n          )}\n        </main>\n      </div>\n\n      {/* Modal de detalles del vino */}\n      {selectedWine && (\n        <WineDetailModal\n          wine={selectedWine}\n          isOpen={isModalOpen}\n          onClose={handleCloseModal}\n          onAddToCart={handleAddToCart}\n        />\n      )}\n    </div>\n  )\n}\n"
      },
      "wine-card.tsx": "\"use client\"\n\nimport type React from \"react\"\nimport Image from \"next/image\"\nimport { ShoppingCart } from \"lucide-react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { CardContent, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { CartIcon } from \"./ui/cart\"\nimport type { Wine } from \"@/types\"\nimport { formatPrice, getCountryFlag } from \"@/utils/price\"\nimport { useState } from \"react\"\n\ninterface WineCardProps {\n  wine: Wine\n  onAddToCart: (wineId: string) => void\n  onClick: (wine: Wine) => void\n  priority?: boolean\n}\n\nexport function WineCard({ wine, onAddToCart, onClick, priority = false }: WineCardProps) {\n  const handleAddToCart = (e: React.MouseEvent) => {\n    e.stopPropagation()\n    onAddToCart(wine.id_vino)\n  }\n\n  const handleCardClick = () => onClick(wine)\n\n  const [isHovered, setIsHovered] = useState(false)\n\n  return (\n    <article\n      className=\"overflow-hidden hover:shadow-xl cursor-pointer h-full flex flex-col bg-gradient-to-b from-white to-red-50 border border-red-100 hover:border-red-300 rounded-lg sm:mx-auto w-full\"\n      onClick={handleCardClick}\n      itemScope\n      itemType=\"https://schema.org/Product\"\n    >\n      <meta itemProp=\"name\" content={wine.nombre} />\n      <meta itemProp=\"description\" content={wine.descripcion} />\n      <meta itemProp=\"brand\" content={wine.wine_details.bodega} />\n      <meta itemProp=\"category\" content=\"Vino\" />\n      <meta itemProp=\"price\" content={wine.precio.toString()} />\n      <meta itemProp=\"priceCurrency\" content=\"COP\" />\n\n      <CardHeader className=\"px-0\">\n        <div className=\"relative overflow-hidden flex items-center justify-center h-52\">\n          <Image\n            src={wine.url_imagen || \"/placeholder.svg\"}\n            alt={`Botella de ${wine.nombre} - ${wine.wine_details.bodega}`}\n            width={200}\n            height={300}\n            className=\"object-contain h-full w-auto mx-auto\"\n            priority={priority}\n            sizes=\"(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw\"\n            loading={priority ? \"eager\" : \"lazy\"}\n            style={{ maxHeight: \"100%\", maxWidth: \"100%\" }}\n          />\n        </div>\n      </CardHeader>\n\n      <CardContent className=\"p-4 flex-1 flex flex-col\">\n        <CardTitle\n          className=\"text-lg mb-2 line-clamp-2 min-h-[2.5rem]\"\n          itemProp=\"name\"\n        >\n            {wine.nombre} {wine.variedades.join(\" \")} {wine.capacidad < 750 ? wine.capacidad : \"\"}\n        </CardTitle>\n\n        <div className=\"flex flex-wrap gap-2 mb-3 align-middle\">\n          {wine.variedades.map((variedad) => (\n            <Badge\n              key={variedad}\n              variant=\"secondary\"\n              className=\"bg-red-100 text-red-800 text-xs\"\n              itemProp=\"additionalProperty\"\n            >\n              {variedad}\n            </Badge>\n          ))}\n          <Badge\n            variant=\"outline\"\n            className=\"border-red-200 text-red-700 text-xs\"\n            itemProp=\"brand\"\n          >\n            {wine.wine_details.bodega}\n          </Badge>\n          <Badge\n            variant=\"outline\"\n            className=\"border-blue-200 text-blue-700 text-xs\"\n            itemProp=\"countryOfOrigin\"\n          >\n            {getCountryFlag(wine.pais_importacion)} {wine.pais_importacion}\n          </Badge>\n        </div>\n\n        <div className=\"text-sm text-gray-500 mt-auto\">\n          <p itemProp=\"additionalProperty\">\n            {wine.wine_details.tipo_crianza} • {wine.nivel_alcohol}% Vol.\n          </p>\n        </div>\n      </CardContent>\n\n      <CardFooter className=\"p-4 pt-0 flex justify-between items-start gap-2\">\n        <span\n          className=\"text-2xl font-bold text-red-600 my-auto\"\n          itemProp=\"offers\"\n          itemScope\n          itemType=\"https://schema.org/Offer\"\n        >\n          <meta itemProp=\"price\" content={wine.precio.toString()} />\n          <meta itemProp=\"priceCurrency\" content=\"CLP\" />\n          <meta itemProp=\"availability\" content=\"https://schema.org/InStock\" />\n          {formatPrice(wine.precio)}\n        </span>\n        <Button\n          onClick={handleAddToCart}\n          className=\"bg-red-600 hover:bg-red-700\"\n          aria-label={`Agregar ${wine.nombre} al carrito`}\n          onMouseEnter={() => setIsHovered(true)}\n          onMouseLeave={() => setIsHovered(false)}\n        >\n          <CartIcon className=\"h-4 w-4\" isHovered={isHovered} />\n        </Button>\n      </CardFooter>\n    </article>\n  )\n}\n",
      "wine-debug.tsx": "\"use client\"\r\n\r\nimport { useState, useEffect } from \"react\"\r\nimport { Button } from \"@/components/ui/button\"\r\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\r\nimport { supabase } from \"@/lib/supabase\"\r\nimport { WineService } from \"@/lib/services/wine-service\"\r\n\r\nexport function WineDebug() {\r\n  const [debugInfo, setDebugInfo] = useState<any>({})\r\n  const [isLoading, setIsLoading] = useState(false)\r\n\r\n  const runDiagnostics = async () => {\r\n    setIsLoading(true)\r\n    const info: any = {}\r\n\r\n    try {\r\n      // 1. Verificar configuración de Supabase\r\n      info.supabaseConfig = {\r\n        url: process.env.NEXT_PUBLIC_SUPABASE_URL ? '✅' : '❌',\r\n        anonKey: process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY ? '✅' : '❌',\r\n        serviceKey: process.env.SUPABASE_SERVICE_ROLE_KEY ? '✅' : '❌'\r\n      }\r\n\r\n      // 2. Probar conexión básica\r\n      try {\r\n        const { data, error } = await supabase\r\n          .from('wines')\r\n          .select('id_vino')\r\n          .limit(1)\r\n        \r\n        info.basicConnection = {\r\n          success: !error,\r\n          error: error?.message || null,\r\n          dataCount: data?.length || 0\r\n        }\r\n      } catch (err: any) {\r\n        info.basicConnection = {\r\n          success: false,\r\n          error: err.message,\r\n          dataCount: 0\r\n        }\r\n      }\r\n\r\n      // 3. Probar WineService\r\n      try {\r\n        const wines = await WineService.getAllWines()\r\n        info.wineService = {\r\n          success: true,\r\n          count: wines.length,\r\n          error: null\r\n        }\r\n      } catch (err: any) {\r\n        info.wineService = {\r\n          success: false,\r\n          count: 0,\r\n          error: err.message\r\n        }\r\n      }\r\n\r\n      // 4. Probar consulta con join\r\n      try {\r\n        const { data, error } = await supabase\r\n          .from('wines')\r\n          .select(`\r\n            *,\r\n            wine_details (*)\r\n          `)\r\n          .limit(1)\r\n        \r\n        info.joinQuery = {\r\n          success: !error,\r\n          error: error?.message || null,\r\n          dataCount: data?.length || 0,\r\n          hasWineDetails: data?.[0]?.wine_details ? '✅' : '❌'\r\n        }\r\n      } catch (err: any) {\r\n        info.joinQuery = {\r\n          success: false,\r\n          error: err.message,\r\n          dataCount: 0,\r\n          hasWineDetails: '❌'\r\n        }\r\n      }\r\n\r\n      // 5. Verificar autenticación\r\n      try {\r\n        const { data: { session } } = await supabase.auth.getSession()\r\n        info.auth = {\r\n          hasSession: !!session,\r\n          userEmail: session?.user?.email || null,\r\n          isAdmin: session?.user?.user_metadata?.role === 'admin'\r\n        }\r\n      } catch (err: any) {\r\n        info.auth = {\r\n          hasSession: false,\r\n          userEmail: null,\r\n          isAdmin: false,\r\n          error: err.message\r\n        }\r\n      }\r\n\r\n      // 6. Probar realtime\r\n      try {\r\n        const channel = supabase.channel('test')\r\n        const status = await new Promise((resolve) => {\r\n          channel.subscribe((status) => {\r\n            resolve(status)\r\n          })\r\n        })\r\n        info.realtime = {\r\n          success: true,\r\n          status\r\n        }\r\n        supabase.removeChannel(channel)\r\n      } catch (err: any) {\r\n        info.realtime = {\r\n          success: false,\r\n          error: err.message\r\n        }\r\n      }\r\n\r\n    } catch (err: any) {\r\n      info.generalError = err.message\r\n    }\r\n\r\n    setDebugInfo(info)\r\n    setIsLoading(false)\r\n  }\r\n\r\n  useEffect(() => {\r\n    runDiagnostics()\r\n  }, [])\r\n\r\n  return (\r\n    <Card className=\"w-full max-w-4xl mx-auto\">\r\n      <CardHeader>\r\n        <CardTitle className=\"flex items-center justify-between\">\r\n          <span>🔍 Debug de Vinos</span>\r\n          <Button onClick={runDiagnostics} disabled={isLoading}>\r\n            {isLoading ? \"Diagnosticando...\" : \"Re-diagnosticar\"}\r\n          </Button>\r\n        </CardTitle>\r\n      </CardHeader>\r\n      <CardContent>\r\n        <div className=\"space-y-4\">\r\n          {/* Configuración */}\r\n          <div>\r\n            <h3 className=\"font-semibold mb-2\">1. Configuración de Supabase</h3>\r\n            <div className=\"bg-gray-100 p-3 rounded\">\r\n              <pre className=\"text-sm\">\r\n                {JSON.stringify(debugInfo.supabaseConfig, null, 2)}\r\n              </pre>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Conexión básica */}\r\n          <div>\r\n            <h3 className=\"font-semibold mb-2\">2. Conexión Básica</h3>\r\n            <div className=\"bg-gray-100 p-3 rounded\">\r\n              <pre className=\"text-sm\">\r\n                {JSON.stringify(debugInfo.basicConnection, null, 2)}\r\n              </pre>\r\n            </div>\r\n          </div>\r\n\r\n          {/* WineService */}\r\n          <div>\r\n            <h3 className=\"font-semibold mb-2\">3. WineService</h3>\r\n            <div className=\"bg-gray-100 p-3 rounded\">\r\n              <pre className=\"text-sm\">\r\n                {JSON.stringify(debugInfo.wineService, null, 2)}\r\n              </pre>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Consulta con join */}\r\n          <div>\r\n            <h3 className=\"font-semibold mb-2\">4. Consulta con Join</h3>\r\n            <div className=\"bg-gray-100 p-3 rounded\">\r\n              <pre className=\"text-sm\">\r\n                {JSON.stringify(debugInfo.joinQuery, null, 2)}\r\n              </pre>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Autenticación */}\r\n          <div>\r\n            <h3 className=\"font-semibold mb-2\">5. Autenticación</h3>\r\n            <div className=\"bg-gray-100 p-3 rounded\">\r\n              <pre className=\"text-sm\">\r\n                {JSON.stringify(debugInfo.auth, null, 2)}\r\n              </pre>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Realtime */}\r\n          <div>\r\n            <h3 className=\"font-semibold mb-2\">6. Realtime</h3>\r\n            <div className=\"bg-gray-100 p-3 rounded\">\r\n              <pre className=\"text-sm\">\r\n                {JSON.stringify(debugInfo.realtime, null, 2)}\r\n              </pre>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Error general */}\r\n          {debugInfo.generalError && (\r\n            <div>\r\n              <h3 className=\"font-semibold mb-2 text-red-600\">Error General</h3>\r\n              <div className=\"bg-red-100 p-3 rounded\">\r\n                <pre className=\"text-sm text-red-800\">\r\n                  {debugInfo.generalError}\r\n                </pre>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n  )\r\n} ",
      "wine-grid.tsx": "import type { Wine } from \"@/types\"\r\nimport { WineCard } from \"./wine-card\"\r\n\r\ninterface WineGridProps {\r\n  wines: Wine[]\r\n  onAddToCart: (wineId: string) => void\r\n  onClick: (wine: Wine) => void\r\n  priority?: boolean\r\n}\r\n\r\nexport function WineGrid({ wines, onAddToCart, onClick, priority = false }: WineGridProps) {\r\n  return (\r\n    <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 2xl:grid-cols-4 gap-6\">\r\n      {wines.map((wine, index) => (\r\n        <WineCard\r\n          key={wine.id_vino}\r\n          wine={wine}\r\n          onAddToCart={onAddToCart}\r\n          onClick={onClick}\r\n          priority={priority && index < 4} // Solo las primeras 4 imágenes con priority\r\n        />\r\n      ))}\r\n    </div>\r\n  )\r\n} ",
      "wine-logo.tsx": "import * as React from \"react\";\r\n\r\nconst WineLogo = (props: React.JSX.IntrinsicAttributes & React.SVGProps<SVGSVGElement>) => (\r\n  <svg\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    viewBox=\"0 0 512 512\"\r\n    width={512}\r\n    height={512}\r\n    {...props}\r\n  >\r\n    <path fill=\"#fdcd57\"\r\n    d=\"M 76.7 2.8 q 189.9 0.4 382.9 0 C 463 2.7 466 4.8 467.2 7.8 q 18.5 51.9 28.5 106.6 q 7.5 42.4 9.9 67.4 q 3.6 34.9 0 68.5 q -10.7 103.5 -80.3 178.5 q -28.5 30.7 -59.7 48.9 q -48.2 27.7 -103.3 29.5 q -65.3 1.6 -125.5 -37.5 q -54.6 -35.2 -89 -97.4 q -48.7 -87.9 -38.8 -187.3 q 6.4 -62.9 24.9 -134.5 q 6.8 -26.9 15.4 -45.1 C 49.8 4.4 50.9 3.7 52.1 3.5 q 7.1 -0.7 24.5 -0.7 m 331.2 273.3 q 43.5 -40.1 78.7 1.1 q 3.2 3.8 3.9 -1.1 q 4.3 -20.5 5.5 -40.6 q 1.2 -17.1 -0.9 -40.6 q -7.1 -91.7 -36.4 -179.2 C 458.1 13.9 456.2 12.7 454.1 12.7 h -393.7 C 58.3 12.7 56.6 13.9 55.7 15.7 q -26.9 82.7 -36.1 168.3 q -5.9 55.7 8.3 111.1 C 28.5 296.5 29.9 297.7 31.5 297.7 h 61.3 c 1.2 0 2.3 -0.4 3.2 -1.1 s 1.2 -1.8 1.2 -3 v -26.1 c 0 -1.8 0.9 -3.8 2 -5.4 l 25.8 -23.9 C 126.6 236.7 129.2 236.7 130.8 238.3 l 23.3 21.9 c 2.8 2.3 4.3 6.1 4.3 9.9 v 25.4 C 158.4 296 158.7 296.5 159 296.8 C 159.4 297.2 160 297.4 160.5 297.4 q 40 1.1 79.5 -0.4 q 8.7 -0.4 13.9 -2.7 q 6.8 -3.4 11.4 -8.8 q 19 -20.8 38 -41.3 q 22.6 -24.3 50.3 -15.1 q 12.3 3.8 24.9 17.4 q 12.3 13.3 24.5 28.8 c 1.2 1.6 3.2 1.8 4.8 0.7 m -279.3 -22.3 c -0.4 -0.7 -1.6 -0.7 -2.3 -0.7 s -1.6 0.4 -2 1.1 q -3.9 6.8 -9.1 9.5 C 111.9 265.6 110 268.8 109.9 272.4 v 30 q 0 7.9 -8.3 7.9 h -66.1 c -1.2 0 -2 1.1 -2 2.3 q 1.2 9.9 9.1 9 h 3.9 q 21.3 0.4 42.7 -0.4 q 27.2 -0.7 43.2 -0.4 q 99.7 1.1 199.8 -0.4 l 10.3 0.4 q 8.3 0.4 16.2 -1.8 t 17 -11 l 19 -18.2 C 395.8 288.8 395.9 287.2 395.2 286.1 q -14.6 -18.2 -28.5 -32.9 q -8.3 -9 -15.4 -11.7 q -10.3 -3.8 -20.6 -0.7 q -8.3 2.7 -21 16.3 q -10.3 10.6 -20.1 21.6 q -18.3 19.8 -20.6 21.6 q -15.1 11 -37.2 10.2 q -22.6 -1.1 -73.2 0.7 q -14.6 0.4 -13.5 -11.7 l 0.4 -6.8 v -19.4 q 0 -3.4 -2.3 -5.7 z m 355 36.3 q -5.9 -3 -10.3 -7.9 q -13.9 -16 -29.7 -13.7 q -9.4 1.6 -22.6 14 q -17.4 17.1 -35.2 33.8 q -10.3 9.9 -17.8 12.9 q -10.7 4.5 -22.6 4.5 h -300.6 C 44.1 333.7 43.5 334 43.1 334.3 C 42.8 334.7 42.5 335.2 42.7 335.7 q -0.4 12.2 9.9 10.6 q 9.4 -1.1 10.3 -1.1 h 402.8 c 1.6 0 3.2 -1.1 3.9 -2.7 q 9.4 -20.1 15.4 -42.1 q 0.9 -3 0.4 -5.4 q -0.4 -4.2 -2 -4.9 m -430 69 l 4.3 9 C 58.5 369 59.6 369.4 60.8 369.4 q 88.2 0.4 176.9 0.4 l 3.6 0.4 q 8 0.4 5.5 -10.6 c 0 -1.1 -1.2 -1.8 -2.3 -1.8 h -190.4 C 53.7 357.7 53.2 358 53.2 358.4 z m 222 0 c 0 -0.4 -0.4 -0.7 -0.4 -1.1 c -0.4 -0.4 -1.2 -0.4 -1.6 -0.4 h -11 c -0.9 0 -1.6 0.7 -1.6 1.6 v 135.3 c 0 0.4 0 0.7 0.4 1.1 s 0.9 0.4 1.2 0.4 h 11 c 0.4 0 1.2 0 1.6 -0.4 c 0 -0.4 0.4 -0.7 0.4 -1.1 z m 27.2 -0.7 C 302.4 358 302.2 357.7 301.7 357.7 h -12.6 c -0.4 0 -1.2 0.4 -1.2 0.7 V 491.8 c 0 0.4 0 0.7 0.4 0.7 c 0 0.4 0.4 0.4 0.9 0.4 h 12.6 c 0.4 0 0.9 -0.7 0.9 -1.1 z m 25.8 0.4 c 0 -0.4 -0.4 -1.1 -0.9 -1.1 h -10.7 q -1.2 0 -1.2 1.1 v 126.2 q 0 1.1 1.2 1.1 h 10.7 c 0.4 0 0.9 -0.7 0.9 -1.1 z m 13.9 2.3 v 113.3 c 0 0.4 0.4 0.7 0.4 1.1 c 0.4 0.4 1.2 0.4 1.6 0.4 q 5.1 -0.7 8.7 -4.2 C 353.7 470.9 354.3 469.7 354.3 468.4 v -107.3 C 354.5 359.8 353.9 358.7 352.7 358.1 q -4.3 -2.3 -9.1 0 C 342.7 358.7 342.1 359.8 342.1 361.1 m 38 28.8 q 1.2 -18.5 0.4 -30 c 0 -1.1 -1.2 -2.3 -2.3 -2.3 q -12.6 -3.4 -11.4 6.5 q 1.6 9 1.6 9.5 q 0.4 43.2 -0.9 86.1 c 0 0.4 0.4 0.7 0.4 1.1 c 0.4 0.4 1.2 0.4 1.6 0.4 q 4.8 -0.7 8 -3.8 q 2.8 -3 2.3 -9 q 0 -48.9 0.4 -58.4 m 25.4 42.8 q 1.2 -1.1 1.2 -3.4 v -69.1 C 406.6 359.1 406 358.1 405 357.6 q -6.4 -2.3 -9.1 0.7 q -2 2.3 -2 7.9 v 73.5 q 0 6.1 3.6 1.8 z m 22.2 -21.9 q 4.3 -3.8 4.3 -7.2 q 1.2 -9.9 0 -42.8 c 0 -1.1 -0.4 -2.3 -1.6 -2.7 q -4.3 -1.6 -9.1 -0.4 c -1.2 0.4 -1.6 1.6 -1.6 2.7 v 55.7 c 0 0.4 0.4 1.1 0.9 1.1 q 0.6 0.6 1.2 0 q 1.6 -0.7 2.8 -2.3 q 2.8 -3.4 3.2 -4.2 m 20.6 -27.3 l 13 -23.5 v -1.1 c -0.4 -0.4 -0.9 -0.7 -1.2 -0.7 q -5.9 -1.6 -12.3 -0.4 c -1.2 0.4 -2 1.1 -2 2.3 v 22.8 q -0.4 5.4 2.3 0.7 m -370.3 8.3 q 78.7 1.1 157.9 0.7 l 5.9 0.4 q 8 0.7 5.9 -7.6 C 247.2 383.6 245.5 382.3 243.6 382.5 l -174.4 0.4 c -0.4 0 -0.9 0.4 -1.2 0.4 c -0.4 0.4 -0.4 1.1 -0.4 1.6 q 1.2 3 3.6 4.9 q 2 2.3 6.8 2.3 m 6.4 15.5 l 7.5 8.8 C 92.5 416.9 93.7 417.2 94.8 417.2 h 149.5 C 245.7 417.2 246.8 416.5 247.2 415.4 q 1.2 -4.2 0 -8.8 c -0.4 -1.1 -1.6 -1.6 -2.8 -1.6 H 85.7 q -3.9 0 -1.6 2.3 m 25.8 23.2 q -5.5 0 -1.6 3 l 8 6.5 q 1.2 1.1 3.6 1.1 l 124.2 -0.4 c 1.6 0 2.8 -0.7 3.2 -1.8 q 1.6 -4.2 -0.9 -7.6 C 245.8 430.4 244.8 429.8 243.6 429.8 z m 28.1 23.5 q -8 0 -1.2 3.8 q 3.6 1.8 7.5 3.8 q 3.6 1.8 7.5 1.8 q 45.5 0.4 93 0.4 c 1.2 0 2.3 -1.1 2.3 -2.3 q 2.3 -9 -5.1 -8.8 q -2.8 0.4 -3.2 0.4 q -48.7 0.7 -100.8 0.7 m 42.7 21.9 q -2.8 -0.4 -5.1 0 q -6.4 0.7 -0.9 3 q 33.2 14.4 69.3 16.7 c 0.9 0 1.6 0 2 -0.4 s 0.9 -1.1 0.9 -1.6 l -0.4 -14.8 c 0 -0.4 0 -1.1 -0.4 -1.6 s -1.2 -0.7 -2 -0.7 q -31.3 0.4 -58.2 0 q -1.6 0 -5.1 -0.7\" />\r\n  </svg>\r\n);\r\nexport default WineLogo;\r\n",
      "wine-store.tsx": "\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { Header } from \"./header\"\nimport { StoreView } from \"./views/store-view\"\nimport { AdminView } from \"./views/admin-view\"\nimport { CartView } from \"./views/cart-view\"\nimport { Footer } from \"./footer\"\nimport { useAuth } from \"@/providers/auth-provider\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport { setViewInURL, getViewFromURL } from \"@/lib/utils\"\nimport { useConsumibles } from '../hooks/use-consumibles';\nimport { Card, CardHeader, CardTitle, CardDescription, CardContent, CardFooter } from '../components/ui/card';\nimport { Button } from '../components/ui/button';\nimport type { Wine } from \"@/types\"\n\ntype ViewType = \"store\" | \"admin\" | \"cart\"\n\ntype WineStoreProps = {\n  wines: Wine[]\n}\n\nexport default function WineStore({ wines }: WineStoreProps) {\n  const { user } = useAuth()\n\n  const [currentView, setCurrentView] = useState<ViewType>(\"store\")\n  const [searchTerm, setSearchTerm] = useState(\"\")\n  const [cartItemCount, setCartItemCount] = useState(0)\n  const [filteredWinesCount, setFilteredWinesCount] = useState(0)\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false)\n\n  const { consumibles, loading: loadingConsumibles, error: errorConsumibles } = useConsumibles();\n\n  // Si no hay parámetro 'view', establecerlo en 'store' y actualizar la URL\n  useEffect(() => {\n    const viewFromUrl = getViewFromURL() as ViewType | null;\n    if (!viewFromUrl) {\n      setCurrentView(\"store\");\n      setViewInURL(\"store\");\n    }\n  }, []);\n\n  // Sincronizar la vista con la URL solo en el cliente\n  useEffect(() => {\n    const viewFromUrl = getViewFromURL() as ViewType\n    if (viewFromUrl && viewFromUrl !== currentView) {\n      if (viewFromUrl === \"admin\" && !user?.isAdmin) {\n        setCurrentView(\"store\")\n        setViewInURL(\"store\")\n      } else {\n        setCurrentView(viewFromUrl)\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [user?.isAdmin])\n\n  // Guardar la vista en la URL cuando cambie\n  useEffect(() => {\n    setViewInURL(currentView)\n  }, [currentView])\n\n  // Determinar qué vistas están disponibles según el tipo de usuario\n  const availableViews = user?.isAdmin\n    ? [\"store\", \"admin\", \"cart\"] as ViewType[]\n    : [\"store\", \"cart\"] as ViewType[]\n\n  const handleViewChange = (view: ViewType) => {\n    setCurrentView(view)\n  }\n\n  return (\n    <div className=\"min-h-screen w-full bg-white relative flex flex-col\">\n      <Header\n        currentView={currentView}\n        onViewChange={handleViewChange}\n        searchTerm={searchTerm}\n        onSearchChange={setSearchTerm}\n        cartItemCount={cartItemCount}\n        onCartClick={() => { }} // Se maneja dentro de StoreView\n        onFiltersClick={() => setIsSidebarOpen(true)}\n        filteredWinesCount={filteredWinesCount} // Se calcula dentro de StoreView\n        availableViews={availableViews}\n      />\n\n      <main className=\"flex-1\">\n        <div className=\"container mx-auto px-4 py-6\">\n          {currentView === \"store\" && (\n            <Tabs defaultValue=\"Vinos\"  className=\"w-full\">\n              <TabsList>\n                <TabsTrigger value=\"Vinos\">Vinos</TabsTrigger>\n                <TabsTrigger value=\"Comestibles\">Comestibles</TabsTrigger>\n              </TabsList>\n              <TabsContent value=\"Vinos\">\n                <StoreView\n                  wines={wines}\n                  searchTerm={searchTerm}\n                  onSearchChange={setSearchTerm}\n                  onFiltersClick={() => setIsSidebarOpen(true)}\n                  onCartItemCountChange={setCartItemCount}\n                  onFilteredWinesCountChange={setFilteredWinesCount}\n                  isSidebarOpen={isSidebarOpen}\n                  onSidebarToggle={() => setIsSidebarOpen(!isSidebarOpen)}\n                />\n              </TabsContent>\n              <TabsContent value=\"Comestibles\">\n                {loadingConsumibles ? (\n                  <div className=\"flex items-center justify-center h-32\" role=\"status\" aria-live=\"polite\">\n                    <div className=\"text-center\">\n                      <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-yellow-600 mx-auto mb-4\" aria-hidden=\"true\"></div>\n                      <p className=\"text-gray-600\">Cargando consumibles...</p>\n                    </div>\n                  </div>\n                ) : errorConsumibles ? (\n                  <div className=\"text-center text-red-500\">{errorConsumibles}</div>\n                ) : consumibles.length === 0 ? (\n                  <div className=\"text-center text-gray-500\">No hay consumibles disponibles.</div>\n                ) : (\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n                    {consumibles.map((item) => (\n                      <Card key={item.id} className=\"flex flex-col items-center\">\n                        <CardHeader className=\"flex flex-col items-center\">\n                          <img src={item.url_imagen} alt={item.nombre} className=\"w-32 h-32 object-cover mb-2 rounded\" />\n                          <CardTitle className=\"text-lg text-center\">{item.nombre}</CardTitle>\n                          <CardDescription className=\"text-center\">{item.descripcion}</CardDescription>\n                        </CardHeader>\n                        <CardContent className=\"flex flex-col items-center\">\n                          <span className=\"font-semibold text-primary mb-2\">${item.precio}</span>\n                        </CardContent>\n                        <CardFooter className=\"w-full flex justify-center\">\n                          <Button className=\"w-full\">Agregar al carrito</Button>\n                        </CardFooter>\n                      </Card>\n                    ))}\n                  </div>\n                )}\n              </TabsContent>\n            </Tabs>\n          )}\n\n          {currentView === \"admin\" && <AdminView wines={wines} />}\n\n          {currentView === \"cart\" && (\n            <CartView onBack={() => handleViewChange(\"store\")} />\n          )}\n        </div>\n      </main>\n\n      <Footer />\n    </div>\n  )\n}",
      "wine-table.tsx": "\"use client\"\n\nimport type React from \"react\"\nimport { useRef, useState, useEffect } from \"react\"\nimport * as XLSX from \"xlsx\"\nimport { Download, Upload, Wine as WineIcon, SquarePen, Trash2, Plus, Palette, Grape, MapPin, Icon, DollarSign, StickyNote, Clock, Percent, Search, ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { wineGlassBottle } from '@lucide/lab'\nimport { Button } from \"./ui/button\"\nimport { Wine } from \"@/types\"\nimport { toast } from \"sonner\"\nimport { WineService } from \"@/lib/services/wine-service\"\nimport EditWineModal from \"./modales/edit-wine-modal\"\nimport { Input } from \"./ui/input\"\nimport DeleteWineModal from \"./modales/delete-wine-modal\"\n\ninterface WineTableProps {\n  wines?: Wine[]\n  onWinesChange?: (wines: Wine[]) => void\n  className?: string\n}\n\ninterface SortConfig {\n  key: string\n  direction: 'asc' | 'desc'\n}\n\ninterface SortConfig {\n  key: string\n  direction: 'asc' | 'desc'\n}\n\nexport function WineTable({ wines = [], onWinesChange, className }: WineTableProps) {\n  const [internalWines, setInternalWines] = useState<Wine[]>([])\n  const [sortConfig, setSortConfig] = useState<SortConfig>({\n    key: 'nombre',\n    direction: 'asc'\n  })\n  const [currentPage, setCurrentPage] = useState(1)\n  const [itemsPerPage] = useState(10)\n\n  const [searchTerm, setSearchTerm] = useState(\"\")\n  const inputRef = useRef<HTMLInputElement>(null)\n\n  const winesToDisplay = wines\n\n  // Filtrar vinos por término de búsqueda\n  const filteredWines = winesToDisplay.filter((wine) =>\n    wine.nombre.toLowerCase().includes(searchTerm.toLowerCase())\n  )\n\n  // Calcular paginación\n  const totalPages = Math.ceil(filteredWines.length / itemsPerPage)\n  const startIndex = (currentPage - 1) * itemsPerPage\n  const endIndex = startIndex + itemsPerPage\n  const currentWines = filteredWines.slice(startIndex, endIndex)\n\n  // Resetear a la primera página cuando cambie el término de búsqueda\n  useEffect(() => {\n    setCurrentPage(1)\n  }, [searchTerm])\n\n  const setWines = (newWines: any[]) => {\n    if (onWinesChange) {\n      onWinesChange(newWines)\n    } else {\n      // Esto ya no es necesario si siempre usamos realtimeWines\n    }\n  }\n\n  const exportToExcel = () => {\n    try {\n      const flatData = winesToDisplay.map((w) => ({\n        \"id vino\": w.id_vino,\n        stock: w.stock,\n        nombre: w.nombre,\n        precio: w.precio,\n        // \"url imagen\": w.url_imagen,\n        descripcion: w.descripcion,\n        \"nivel alcohol\": w.nivel_alcohol,\n        variedades: w.variedades.join(\", \"),\n        \"pais importacion\": w.pais_importacion,\n        \"color vino\": w.color_vino,\n        bodega: w.wine_details.bodega,\n        \"id detalle\": w.wine_details.id_detalle,\n        \"notas cata\": w.wine_details.notas_cata,\n        \"tipo crianza\": w.wine_details.tipo_crianza,\n        \"contenido azucar\": w.wine_details.contenido_azucar,\n        \"contenido carbonico\": w.wine_details.contenido_carbonico,\n      }))\n\n      const ws = XLSX.utils.json_to_sheet(flatData)\n\n      // Obtener el rango de datos\n      const range = XLSX.utils.decode_range(ws[\"!ref\"] || \"A1\")\n\n      // Configurar protección para todas las celdas (inicialmente desbloqueadas)\n      for (let row = range.s.r; row <= range.e.r; row++) {\n        for (let col = range.s.c; col <= range.e.c; col++) {\n          const cellAddress = XLSX.utils.encode_cell({ r: row, c: col })\n          if (!ws[cellAddress]) continue\n\n          // Desbloquear todas las celdas por defecto\n          if (!ws[cellAddress].s) ws[cellAddress].s = {}\n          ws[cellAddress].s.protection = { locked: false }\n        }\n      }\n\n      // Bloquear específicamente las columnas \"id vino\" (columna A) e \"id detalle\" (columna L)\n      const protectedColumns = [0, 11] // Columna A (id vino) y columna L (id detalle)\n\n      for (let row = range.s.r; row <= range.e.r; row++) {\n        protectedColumns.forEach((col) => {\n          const cellAddress = XLSX.utils.encode_cell({ r: row, c: col })\n          if (ws[cellAddress]) {\n            if (!ws[cellAddress].s) ws[cellAddress].s = {}\n            ws[cellAddress].s.protection = { locked: true }\n\n            // Agregar color de fondo para indicar que está bloqueada\n            ws[cellAddress].s.fill = {\n              fgColor: { rgb: \"FFE6E6\" }, // Color rojo claro\n              bgColor: { rgb: \"FFE6E6\" },\n            }\n          }\n        })\n      }\n\n      // Configurar protección del worksheet\n      ws[\"!protect\"] = {\n        password: \"admin123\",\n        selectLockedCells: true,\n        selectUnlockedCells: true,\n        formatCells: false,\n        formatColumns: false,\n        formatRows: false,\n        insertColumns: false,\n        insertRows: false,\n        insertHyperlinks: false,\n        deleteColumns: false,\n        deleteRows: false,\n        sort: false,\n        autoFilter: false,\n        pivotTables: false,\n      }\n\n      const wb = XLSX.utils.book_new()\n      XLSX.utils.book_append_sheet(wb, ws, \"Vinos\")\n      XLSX.writeFile(wb, \"inventario_vinos.xlsx\")\n\n      toast.success(\n        \"Inventario exportado exitosamente\", {\n        description: \"Las columnas ID están protegidas contra edición\",\n        action: {\n          label: \"cerrar\",\n          onClick: () => \"\",\n        },\n      })\n    } catch (error) {\n      toast.error(\"Error al exportar el inventario\", {\n        description: \"Por favor, intenta nuevamente más tarde.\",\n        action: {\n          label: \"cerrar\",\n          onClick: () => \"\",\n        },\n      })\n    }\n  }\n\n  const handleImport = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0]\n    if (!file) return\n\n    try {\n      const data = await file.arrayBuffer()\n      const workbook = XLSX.read(data, { type: \"array\" })\n      const sheet = workbook.Sheets[workbook.SheetNames[0]]\n      const json = XLSX.utils.sheet_to_json<any>(sheet)\n\n      const imported: any[] = json.map((row: any) => ({\n        id_vino: row[\"id vino\"] || row.id_vino || `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n        stock: Number(row.stock) || 0,\n        nombre: row.nombre,\n        precio: Number(row.precio),\n        // url_imagen: row[\"url imagen\"] || row.url_imagen || \"\",\n        descripcion: row.descripcion,\n        nivel_alcohol: Number(row[\"nivel alcohol\"] || row.nivel_alcohol),\n        variedades: row.variedades?.split(\",\").map((v: string) => v.trim()) ?? [],\n        pais_importacion: row[\"pais importacion\"] || row.pais_importacion,\n        color_vino: row[\"color vino\"] || row.color_vino,\n        anada: Number(row.anada),\n        wine_details: {\n          bodega: row.bodega,\n          id_vino: row[\"id vino\"] || row.id_vino || `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n          id_detalle: row[\"id detalle\"] || row.id_detalle || `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n          notas_cata: row[\"notas cata\"] || row.notas_cata,\n          tipo_crianza: row[\"tipo crianza\"] || row.tipo_crianza,\n          contenido_azucar: row[\"contenido azucar\"] || row.contenido_azucar,\n          contenido_carbonico: row[\"contenido carbonico\"] || row.contenido_carbonico,\n        },\n      }))\n\n      const errores = imported.filter(\n        (w) =>\n          !w.nombre ||\n          typeof w.stock !== \"number\" ||\n          typeof w.precio !== \"number\" ||\n          typeof w.nivel_alcohol !== \"number\" ||\n          isNaN(w.stock) ||\n          isNaN(w.precio) ||\n          isNaN(w.nivel_alcohol),\n      )\n\n      if (errores.length > 0) {\n        // showNotification(\"error\", \"Error en el archivo: verifica que los campos numéricos sean correctos\")\n        toast.error(\"Error al importar el inventario\", {\n          description: \"Error en el archivo: verifica que los campos numéricos sean correctos.\",\n          action: {\n            label: \"cerrar\",\n            onClick: () => \"\"\n          },\n        })\n        return\n      }\n\n      setWines(imported)\n      // showNotification(\"success\", `${imported.length} vinos importados exitosamente`)\n      toast.success(\"Inventario\", {\n        description: `${imported.length} vinos importados exitosamente`,\n        action: {\n          label: \"cerrar\",\n          onClick: () => \"\"\n        },\n      })\n\n      // Reset file input\n      if (inputRef.current) {\n        inputRef.current.value = \"\"\n      }\n    } catch (error) {\n      // showNotification(\"error\", \"Error al procesar el archivo Excel\")\n      toast.error(\"Error al exportar el inventario\", {\n        description: \"Error al procesar el archivo Excel.\",\n        action: {\n          label: \"cerrar\",\n          onClick: () => \"\"\n        },\n      })\n    }\n  }\n\n  const formatPrice = (price: number) => {\n    return new Intl.NumberFormat(\"es-CO\", {\n      style: \"currency\",\n      currency: \"COP\",\n      minimumFractionDigits: 0,\n    }).format(price)\n  }\n\n  // Función para generar números de página\n  const getPageNumbers = () => {\n    const pages = []\n    const maxVisiblePages = 5\n\n    if (totalPages <= maxVisiblePages) {\n      for (let i = 1; i <= totalPages; i++) {\n        pages.push(i)\n      }\n    } else {\n      if (currentPage <= 3) {\n        for (let i = 1; i <= 4; i++) {\n          pages.push(i)\n        }\n        pages.push('ellipsis')\n        pages.push(totalPages)\n      } else if (currentPage >= totalPages - 2) {\n        pages.push(1)\n        pages.push('ellipsis')\n        for (let i = totalPages - 3; i <= totalPages; i++) {\n          pages.push(i)\n        }\n      } else {\n        pages.push(1)\n        pages.push('ellipsis')\n        for (let i = currentPage - 1; i <= currentPage + 1; i++) {\n          pages.push(i)\n        }\n        pages.push('ellipsis')\n        pages.push(totalPages)\n      }\n    }\n\n    return pages\n  }\n\n  const getColorBadge = (color: string) => {\n    const colorClasses = {\n      Tinto: \"bg-red-100 text-red-800 border-red-200\",\n      Blanco: \"bg-amber-100 text-amber-800 border-amber-200\",\n      Rosé: \"bg-pink-100 text-pink-800 border-pink-200\",\n      Espumoso: \"bg-blue-100 text-blue-800 border-blue-200\",\n    }\n\n    return colorClasses[color as keyof typeof colorClasses] || \"bg-gray-100 text-gray-800 border-gray-200\"\n  }\n\n  useEffect(() => {\n    if (typeof window !== \"undefined\" && totalPages > 0) {\n      const url = new URL(window.location.href);\n      const pageParam = url.searchParams.get(\"page\");\n      const page = pageParam ? parseInt(pageParam) : 1;\n      if (!isNaN(page) && page > 0 && page <= totalPages) {\n        setCurrentPage(page);\n      }\n    }\n  }, [totalPages]);\n\n  return (\n    <div className={`relative ${className}`}>\n      {/* Header with controls */}\n      <div className=\"flex items-center justify-between flex-wrap gap-4 p-6 pt-0\">\n        <div className=\"flex items-center gap-4\">\n          <div className=\"bg-red-100 p-3 rounded-xl\">\n            <WineIcon className=\"h-6 w-6 text-red-600\" />\n          </div>\n          <div>\n            <h2 className=\"text-2xl font-bold text-red-900\">Administración de Vinos</h2>\n            <div className=\"flex items-center gap-2 mt-1\">\n              <div className=\"w-2 h-2 rounded-full bg-green-500\"></div>\n              <span className=\"text-xs text-gray-600\">\n                Datos cargados desde el servidor\n              </span>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"flex gap-3 flex-wrap\">\n          <Button\n            className=\"flex items-center gap-2 bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-xl font-medium transition-all duration-200 shadow-lg hover:shadow-xl transform hover:-translate-y-0.5 text-sm\"\n          >\n            <Plus className=\"h-4 w-4\" />\n            Agregar Vino\n          </Button>\n          <Button\n            onClick={exportToExcel}\n            className=\"flex items-center gap-2 bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-xl font-medium transition-all duration-200 shadow-lg hover:shadow-xl transform hover:-translate-y-0.5 text-sm\"\n          >\n            <Download className=\"h-4 w-4\" />\n            Exportar Excel\n          </Button>\n\n          <label className=\"flex items-center gap-2 bg-amber-500 hover:bg-amber-600 text-white px-4 py-2 rounded-xl font-medium transition-all duration-200 shadow-lg hover:shadow-xl transform hover:-translate-y-0.5 cursor-pointer text-sm\">\n            <Upload className=\"h-4 w-4\" />\n            Importar Excel\n            <Input ref={inputRef} type=\"file\" accept=\".xlsx,.xls\" onChange={handleImport} className=\"hidden\" />\n          </label>\n        </div>\n      </div>\n\n      {/* Search Bar */}\n      <div className=\"px-6 pb-4 flex justify-center\">\n        <div className=\"relative max-w-xl w-full\">\n          <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n            <Search className=\"h-5 w-5 text-gray-400\" />\n          </div>\n          <Input\n            type=\"text\"\n            placeholder=\"Buscar vino por nombre...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"pl-10 pr-4 py-2 border border-gray-300 rounded-xl focus:ring-2 focus:ring-red-500 focus:border-red-500 transition-all duration-200 focus-visible:ring-0 focus-visible:ring-offset-0\"\n          />\n          {searchTerm && (\n            <button\n              onClick={() => setSearchTerm(\"\")}\n              className=\"absolute inset-y-0 right-0 pr-3 flex items-center text-gray-400 hover:text-gray-600\"\n            >\n              <span className=\"text-lg\">×</span>\n            </button>\n          )}\n        </div>\n        {searchTerm && (\n          <p className=\"text-sm text-gray-600 mt-2\">\n            Mostrando {filteredWines.length} de {winesToDisplay.length} vinos\n          </p>\n        )}\n      </div>\n\n      {/* Table */}\n      <div className=\"bg-white rounded-2xl shadow-xl overflow-hidden border border-red-100\">\n        <div className=\"overflow-x-auto\">\n          <table className=\"w-full\">\n            <thead className=\"bg-gradient-to-r from-red-600 to-red-700 text-white\">\n              <tr>\n                {/* Sticky First Column */}\n                <th className=\"sticky left-0 z-30 bg-gradient-to-r from-red-600 to-red-700 px-6 py-4 text-left text-sm font-semibold uppercase tracking-wider border-r border-red-500 w-80 min-w-72 max-w-96 shadow-lg\">\n                  <div className=\"flex items-center gap-2\">\n                    <WineIcon size={16} />\n                    Vino\n                  </div>\n                </th>\n\n                {/* Scrollable Middle Columns */}\n                <th className=\"px-6 py-4 text-center text-sm font-semibold uppercase tracking-wider whitespace-nowrap\">\n                  <div className=\"flex items-center gap-2\">\n                    <Icon size={16} iconNode={wineGlassBottle} />\n                    Stock\n                  </div>\n                </th>\n                <th className=\"px-6 py-4 text-center text-sm font-semibold uppercase tracking-wider whitespace-nowrap\">\n                  <div className=\"flex items-center gap-2\">\n                    <DollarSign size={16} />\n                    Precio\n                  </div>\n                </th>\n                <th className=\"px-6 py-4 text-center text-sm font-semibold uppercase tracking-wider whitespace-nowrap\">\n                  <div className=\"flex items-center gap-2\">\n                    <Clock size={16} />\n                    Tiempo\n                  </div>\n                </th>\n                <th className=\"px-6 py-4 text-center text-sm font-semibold uppercase tracking-wider whitespace-nowrap\">\n                  <div className=\"flex items-center justify-center gap-2\">\n                    <Percent size={16} />\n                    Alcohol\n                  </div>\n                </th>\n                <th className=\"px-6 py-4 text-center text-sm font-semibold uppercase tracking-wider whitespace-nowrap\">\n                  <div className=\"flex items-center justify-center gap-2\">\n                    <Palette size={16} />\n                    Color\n                  </div>\n                </th>\n                <th className=\"px-6 py-4 text-center text-sm font-semibold uppercase tracking-wider whitespace-nowrap\">\n                  <div className=\"flex items-center justify-center gap-2\">\n                    <Grape size={16} />\n                    Variedades\n                  </div>\n                </th>\n                <th className=\"px-6 py-4 text-center text-sm font-semibold uppercase tracking-wider whitespace-nowrap w-56 min-w-56\">\n                  <div className=\"flex items-center justify-center gap-2\">\n                    <MapPin size={16} />\n                    Bodega\n                  </div>\n                </th>\n                <th className=\"px-6 py-4 text-center text-sm font-semibold uppercase tracking-wider whitespace-nowrap w-auto min-w-56\">\n                  <div className=\"flex items-center justify-center gap-2\">\n                    <StickyNote size={16} />\n                    Notas de Cata\n                  </div>\n                </th>\n                <th className=\"px-6 py-4 text-center text-sm font-semibold uppercase tracking-wider whitespace-nowrap\">\n                  <div className=\"flex items-center justify-center gap-2\">\n                    <StickyNote size={16} />\n                    Capacidad\n                  </div>\n                </th>\n\n                {/* Sticky Last Column */}\n                <th className=\"sticky right-0 z-30 bg-gradient-to-r from-red-600 to-red-700 px-6 py-4 text-center text-sm font-semibold uppercase tracking-wider border-l border-red-500 w-32 min-w-32 max-w-32 shadow-lg\">\n                  Acciones\n                </th>\n              </tr>\n            </thead>\n\n            <tbody className=\"divide-y divide-gray-100\">\n              {currentWines.map((wine: Wine, index) => (\n                <tr key={wine.id_vino} className=\"hover:bg-red-50 bg-white\">\n                  {/* Sticky First Column */}\n                  <td className={`sticky left-0 z-20 px-6 py-4 border-r border-gray-200 w-72 min-w-72 max-w-72 bg-white shadow-lg`}>\n                    <div className=\"flex items-center gap-4\">\n                      {wine.url_imagen && (\n                        <img\n                          src={wine.url_imagen}\n                          alt={wine.nombre}\n                          className=\"w-16 h-16 rounded-lg object-cover shadow-sm border border-gray-200 flex-shrink-0\"\n                        />\n                      )}\n                      <div className=\"min-w-0 flex-1\">\n                        <div className=\"font-semibold text-gray-900 text-sm leading-tight truncate\">\n                          {wine.nombre}\n                        </div>\n                        <div className=\"text-sm text-gray-500 mt-1 truncate\">\n                          {wine.pais_importacion} • {wine.variedades.length > 0 ? wine.variedades.join(', ') : ''}\n                        </div>\n                      </div>\n                    </div>\n                  </td>\n\n                  {/* Scrollable Middle Columns */}\n                  <td className=\"px-6 py-4 text-center\">\n                    <span className={`inline-flex px-3 py-1 rounded-full text-sm font-semibold ${wine.stock > 20 ? 'bg-green-100 text-green-800' :\n                      wine.stock > 10 ? 'bg-yellow-100 text-yellow-800' :\n                        'bg-red-100 text-red-800'\n                      }`}>\n                      {wine.stock} unidades\n                    </span>\n                  </td>\n                  <td className=\"px-6 py-4 text-start\">\n                    <span className=\"font-semibold text-gray-900 text-lg\">\n                      {formatPrice(wine.precio)}\n                    </span>\n                  </td>\n                  <td className=\"px-6 py-4 text-center\">\n                    <span className=\"font-semibold text-gray-900 text-lg\">\n                      {wine.wine_details.tipo_crianza}\n                    </span>\n                  </td>\n                  <td className=\"px-6 py-4 text-center\">\n                    <span className=\"bg-blue-100 text-blue-800 px-3 py-1 rounded-full text-sm font-medium\">\n                      {wine.nivel_alcohol}%\n                    </span>\n                  </td>\n                  <td className=\"px-6 py-4 text-center\">\n                    <span className={`inline-flex px-3 py-1 rounded-full text-sm font-medium border ${getColorBadge(wine.color_vino)}`}>\n                      {wine.color_vino}\n                    </span>\n                  </td>\n                  <td className=\"px-6 py-4\">\n                    <div className=\"flex flex-wrap gap-1 justify-center\">\n                      {wine.variedades.map((variedad: string, idx: number) => (\n                        <span\n                          key={idx}\n                          className=\"bg-purple-100 text-purple-800 px-2 py-1 rounded-md text-xs font-medium whitespace-nowrap\"\n                        >\n                          {variedad}\n                        </span>\n                      ))}\n                    </div>\n                  </td>\n                  <td className=\"px-6 py-4 text-center\">\n                    {wine.wine_details.bodega}\n                  </td>\n                  <td className=\"px-6 py-4\">\n                    <p className=\"text-gray-600 text-sm leading-relaxed\">\n                      {wine.wine_details.notas_cata}\n                    </p>\n                  </td>\n                  <td className=\"px-6 py-4 text-center\">\n                    <span className=\"font-semibold text-gray-900 text-lg\">\n                      {wine.capacidad}\n                    </span>\n                  </td>\n\n                  {/* Sticky Last Column */}\n                  <td className={`sticky right-0 z-20 px-6 py-4 border-l border-gray-200 w-32 min-w-32 max-w-32 shadow-lg ${index % 2 === 0 ? 'bg-white' : 'bg-gray-50'}`}>\n                    <div className=\"flex items-center justify-center gap-2 w-full\">\n                      <EditWineModal vino={wine}>\n                        <div className=\"bg-blue-600 hover:bg-blue-700 text-white p-2 h-8 w-8 rounded-md flex items-center justify-center cursor-pointer transition-colors\">\n                          <SquarePen size={14} />\n                        </div>\n                      </EditWineModal>\n                      <DeleteWineModal vino={wine}>\n                        <div className=\"bg-red-600 hover:bg-red-700 text-white p-2 h-8 w-8 rounded-md flex items-center justify-center cursor-pointer transition-colors\">\n                          <Trash2 size={14} />\n                        </div>\n                      </DeleteWineModal>\n                    </div>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n\n      {/* Paginación */}\n      {filteredWines.length > 0 && totalPages > 1 && (\n        <div className=\"flex items-center justify-between px-6 py-4 bg-white border-t border-gray-200 mt-2 rounded-2xl\">\n          <div className=\"text-sm text-gray-700\">\n            Mostrando {startIndex + 1} a {Math.min(endIndex, filteredWines.length)} de {filteredWines.length} vinos\n          </div>\n\n          <div className=\"flex items-center gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}\n              disabled={currentPage === 1}\n              className=\"flex items-center gap-1\"\n            >\n              <ChevronLeft className=\"h-4 w-4\" />\n              Anterior\n            </Button>\n\n            <div className=\"flex items-center gap-1\">\n              {getPageNumbers().map((page, index) => (\n                <div key={index}>\n                  {page === 'ellipsis' ? (\n                    <span className=\"flex h-9 w-9 items-center justify-center text-sm text-gray-500\">\n                      ...\n                    </span>\n                  ) : (\n                    <Button\n                      variant={currentPage === page ? \"default\" : \"outline\"}\n                      className={`h-9 w-9 p-0 ${currentPage === page ? 'bg-red-600 hover:bg-red-700' : ''}`}\n                      size=\"sm\"\n                      onClick={() => setCurrentPage(page as number)}\n                    >\n                      {page}\n                    </Button>\n                  )}\n                </div>\n              ))}\n            </div>\n\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => setCurrentPage(Math.min(totalPages, currentPage + 1))}\n              disabled={currentPage === totalPages}\n              className=\"flex items-center gap-1\"\n            >\n              Siguiente\n              <ChevronRight className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n      )}\n\n      {filteredWines.length === 0 && (\n        <div className=\"text-center py-12 bg-white rounded-2xl shadow-xl border border-red-100\">\n          <WineIcon className=\"h-16 w-16 text-gray-400 mx-auto mb-4\" />\n          <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n            {searchTerm ? \"No se encontraron vinos\" : \"No hay vinos en el inventario\"}\n          </h3>\n          <p className=\"text-gray-500\">\n            {searchTerm\n              ? `No hay vinos que coincidan con \"${searchTerm}\"`\n              : \"Importa un archivo Excel para comenzar\"\n            }\n          </p>\n        </div>\n      )}\n    </div>\n  )\n}\n"
    },
    "data": {
      "wines.ts": "import type { Wine } from \"@/types\"\n\nexport const wines: Wine[] = []"
    },
    "hooks": {
      "use-cart.ts": "\"use client\"\n\nimport { useState, useEffect, useRef } from \"react\"\nimport type { CartItem, CartItemWithWine, Wine } from \"@/types\"\nimport { parsePrice } from \"@/utils/price\"\nimport { updateURLWithData, getDataFromURL } from \"@/lib/utils\"\n\nexport function useCart(wines: Wine[]) {\n  const [cart, setCart] = useState<CartItem[]>([])\n  const isInitialized = useRef(false)\n\n  // Cargar carrito desde URL al inicializar\n  useEffect(() => {\n    const savedCart = getDataFromURL('cart')\n    if (savedCart && Array.isArray(savedCart)) {\n      setCart(savedCart)\n    }\n    isInitialized.current = true\n  }, [])\n\n  // Actualizar URL cuando cambie el carrito (después del renderizado)\n  useEffect(() => {\n    if (isInitialized.current) {\n      updateURLWithData(cart, 'cart')\n    }\n  }, [cart])\n\n  const addToCart = (wineId: string) => {\n    setCart((prev) => {\n      const existing = prev.find((item) => item.id === wineId)\n      const newCart = existing\n        ? prev.map((item) => (item.id === wineId ? { ...item, quantity: item.quantity + 1 } : item))\n        : [...prev, { id: wineId, quantity: 1 }]\n      return newCart\n    })\n  }\n\n  const removeFromCart = (wineId: string) => {\n    setCart((prev) => prev.filter((item) => item.id !== wineId))\n  }\n\n  const updateQuantity = (wineId: string, quantity: number) => {\n    if (quantity <= 0) {\n      removeFromCart(wineId)\n      return\n    }\n    setCart((prev) => prev.map((item) => (item.id === wineId ? { ...item, quantity } : item)))\n  }\n\n  const clearCart = () => {\n    setCart([])\n  }\n\n  const cartItems: CartItemWithWine[] = cart\n    .map((cartItem) => {\n      const wine = wines.find((w) => w.id_vino === cartItem.id)\n      return wine ? { ...wine, quantity: cartItem.quantity } : null\n    })\n    .filter(Boolean) as CartItemWithWine[]\n\n  const cartTotal = cartItems.reduce((total, item) => total + parsePrice(item.precio) * item.quantity, 0)\n\n  const cartItemCount = cart.reduce((total, item) => total + item.quantity, 0)\n\n  return {\n    cart,\n    cartItems,\n    cartTotal,\n    cartItemCount,\n    addToCart,\n    removeFromCart,\n    updateQuantity,\n    clearCart,\n  }\n}\n",
      "use-consumibles.ts": "import { useEffect, useState } from 'react';\r\nimport { Consumibles } from '../types';\r\nimport { getAllConsumibles, subscribeToConsumibles } from '../lib/services/consumibles-service';\r\n\r\nexport function useConsumibles() {\r\n  const [consumibles, setConsumibles] = useState<Consumibles[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    let subscription: any;\r\n    async function fetchConsumibles() {\r\n      setLoading(true);\r\n      try {\r\n        const data = await getAllConsumibles();\r\n        setConsumibles(data);\r\n        setError(null);\r\n      } catch (err: any) {\r\n        setError(err.message || 'Error al cargar consumibles');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    }\r\n    fetchConsumibles();\r\n    subscription = subscribeToConsumibles(() => {\r\n      fetchConsumibles();\r\n    });\r\n    return () => {\r\n      if (subscription && subscription.unsubscribe) subscription.unsubscribe();\r\n    };\r\n  }, []);\r\n\r\n  return { consumibles, loading, error };\r\n} ",
      "use-filters.ts": "\"use client\"\n\nimport { useState, useMemo, useCallback, useEffect, useRef } from \"react\"\nimport type { Wine, FilterState } from \"@/types\"\nimport { updateURLWithData, getDataFromURL, encryptData } from \"@/lib/utils\"\n\nexport function useFilters(wines: Wine[]) {\n  const [filters, setFilters] = useState<FilterState>({\n    selectedVariedades: [],\n    selectedBodegas: [],\n    selectedPaises: [],\n    selectedColores: [],\n    priceRange: {\n      min: 0,\n      max: 0,\n    },\n  })\n  const isInitialized = useRef(false)\n\n  // Cargar filtros desde URL al inicializar\n  useEffect(() => {\n    const savedFilters = getDataFromURL('filters')\n    if (savedFilters && typeof savedFilters === 'object') {\n      // Asegurar que el rango de precio esté presente\n      const filtersWithPrice = {\n        ...savedFilters,\n        priceRange: savedFilters.priceRange || { min: 0, max: 0 }\n      }\n      setFilters(filtersWithPrice)\n    }\n    isInitialized.current = true\n  }, [])\n\n  // Calcular rangos de precio\n  const priceRange = useMemo(() => {\n    if (wines.length === 0) return { min: 0, max: 0 }\n    \n    const prices = wines.map(wine => wine.precio)\n    const min = Math.min(...prices)\n    const max = Math.max(...prices)\n    \n    return { min, max }\n  }, [wines])\n\n  // Actualizar URL cuando cambien los filtros (después del renderizado)\n  useEffect(() => {\n    if (isInitialized.current) {\n      // Usar encryptData directamente para pasar el rango dinámico\n      const encrypted = encryptData(filters, priceRange)\n      const url = new URL(window.location.href)\n      if (encrypted) {\n        url.searchParams.set('filters', encrypted)\n      } else {\n        url.searchParams.delete('filters')\n      }\n      window.history.replaceState({}, '', url.toString())\n    }\n  }, [filters, priceRange])\n\n  // Inicializar rango de precio cuando se cargan los vinos\n  useEffect(() => {\n    if (priceRange.min > 0 && priceRange.max > 0 && filters.priceRange.min === 0 && filters.priceRange.max === 0) {\n      setFilters(prev => ({\n        ...prev,\n        priceRange: { min: priceRange.min, max: priceRange.max }\n      }))\n    }\n  }, [priceRange, filters.priceRange])\n\n  const variedades = useMemo(() => {\n    // Mapa para mantener el valor original pero evitar duplicados por minúsculas/espacios\n    const map = new Map<string, string>()\n    wines.flatMap((wine) => wine.variedades).forEach((v) => {\n      const key = v.trim().toLowerCase()\n      if (!map.has(key)) map.set(key, v.trim())\n    })\n    return Array.from(map.values())\n  }, [wines])\n\n  // Mapa auxiliar para normalizar y mapear variedad a su key\n  const variedadKeyMap = useMemo(() => {\n    const map = new Map<string, string>()\n    wines.flatMap((wine) => wine.variedades).forEach((v) => {\n      const key = v.trim().toLowerCase()\n      if (!map.has(key)) map.set(map.size.toString(), key)\n    })\n    return map\n  }, [wines])\n\n  const filteredWines = useMemo(() => {\n    return wines.filter((wine) => {\n      const varietalMatch =\n        filters.selectedVariedades.length === 0 ||\n        wine.variedades.some((variedad) => filters.selectedVariedades.includes(variedad))\n      const bodegaMatch = filters.selectedBodegas.length === 0 || filters.selectedBodegas.includes(wine.wine_details.bodega)\n      const paisMatch = filters.selectedPaises.length === 0 || filters.selectedPaises.includes(wine.pais_importacion)\n      const colorMatch = filters.selectedColores.length === 0 || filters.selectedColores.includes(wine.color_vino)\n      const priceMatch = wine.precio >= filters.priceRange.min && wine.precio <= filters.priceRange.max\n\n      return varietalMatch && bodegaMatch && paisMatch && colorMatch && priceMatch\n    })\n  }, [wines, filters])\n\n  const getFilteredCountsForCategory = useCallback(\n    (category: \"variedades\" | \"bodegas\" | \"paises\" | \"colores\") => {\n      const tempFilters = { ...filters }\n\n      // Remover el filtro de la categoría actual para calcular contadores\n      switch (category) {\n        case \"variedades\":\n          tempFilters.selectedVariedades = []\n          break\n        case \"bodegas\":\n          tempFilters.selectedBodegas = []\n          break\n        case \"paises\":\n          tempFilters.selectedPaises = []\n          break\n        case \"colores\":\n          tempFilters.selectedColores = []\n          break\n      }\n\n      // Filtrar vinos con los otros filtros aplicados\n      const tempFilteredWines = wines.filter((wine) => {\n        const varietalMatch =\n          tempFilters.selectedVariedades.length === 0 ||\n          wine.variedades.some((variedad) => tempFilters.selectedVariedades.includes(variedad))\n        const bodegaMatch =\n          tempFilters.selectedBodegas.length === 0 || tempFilters.selectedBodegas.includes(wine.wine_details.bodega)\n        const paisMatch =\n          tempFilters.selectedPaises.length === 0 || tempFilters.selectedPaises.includes(wine.pais_importacion)\n        const colorMatch =\n          tempFilters.selectedColores.length === 0 || tempFilters.selectedColores.includes(wine.color_vino)\n        const priceMatch = wine.precio >= tempFilters.priceRange.min && wine.precio <= tempFilters.priceRange.max\n\n        return varietalMatch && bodegaMatch && paisMatch && colorMatch && priceMatch\n      })\n\n      return tempFilteredWines\n    },\n    [wines, filters],\n  )\n\n  const varietalCounts = useMemo(() => {\n    const counts: Record<string, number> = {}\n    const relevantWines = getFilteredCountsForCategory(\"variedades\")\n    relevantWines.forEach((wine) => {\n      wine.variedades.forEach((variedad) => {\n        const key = variedad.trim().toLowerCase()\n        counts[key] = (counts[key] || 0) + 1\n      })\n    })\n    return counts\n  }, [getFilteredCountsForCategory])\n\n  const bodegaCounts = useMemo(() => {\n    const counts: Record<string, number> = {}\n    const relevantWines = getFilteredCountsForCategory(\"bodegas\")\n    relevantWines.forEach((wine) => {\n      counts[wine.wine_details.bodega] = (counts[wine.wine_details.bodega] || 0) + 1\n    })\n    return counts\n  }, [getFilteredCountsForCategory])\n\n  const paisCounts = useMemo(() => {\n    const counts: Record<string, number> = {}\n    const relevantWines = getFilteredCountsForCategory(\"paises\")\n    relevantWines.forEach((wine) => {\n      counts[wine.pais_importacion] = (counts[wine.pais_importacion] || 0) + 1\n    })\n    return counts\n  }, [getFilteredCountsForCategory])\n\n  const colorCounts = useMemo(() => {\n    const counts: Record<string, number> = {}\n    const relevantWines = getFilteredCountsForCategory(\"colores\")\n    relevantWines.forEach((wine) => {\n      counts[wine.color_vino] = (counts[wine.color_vino] || 0) + 1\n    })\n    return counts\n  }, [getFilteredCountsForCategory])\n\n  const toggleVariedad = (variedad: string) => {\n    setFilters((prev) => ({\n      ...prev,\n      selectedVariedades: prev.selectedVariedades.includes(variedad)\n        ? prev.selectedVariedades.filter((v) => v !== variedad)\n        : [...prev.selectedVariedades, variedad],\n    }))\n  }\n\n  const toggleBodega = (bodega: string) => {\n    setFilters((prev) => ({\n      ...prev,\n      selectedBodegas: prev.selectedBodegas.includes(bodega)\n        ? prev.selectedBodegas.filter((b) => b !== bodega)\n        : [...prev.selectedBodegas, bodega],\n    }))\n  }\n\n  const togglePais = (pais: string) => {\n    setFilters((prev) => ({\n      ...prev,\n      selectedPaises: prev.selectedPaises.includes(pais)\n        ? prev.selectedPaises.filter((p) => p !== pais)\n        : [...prev.selectedPaises, pais],\n    }))\n  }\n\n  const toggleColor = (color: string) => {\n    setFilters((prev) => ({\n      ...prev,\n      selectedColores: prev.selectedColores.includes(color)\n        ? prev.selectedColores.filter((c) => c !== color)\n        : [...prev.selectedColores, color],\n    }))\n  }\n\n  const updatePriceRange = (min: number, max: number) => {\n    setFilters((prev) => ({\n      ...prev,\n      priceRange: { min, max }\n    }))\n  }\n\n  const clearFilters = () => {\n    setFilters({\n      selectedVariedades: [],\n      selectedBodegas: [],\n      selectedPaises: [],\n      selectedColores: [],\n      priceRange: { min: priceRange.min, max: priceRange.max }\n    })\n  }\n\n  const hasActiveFilters =\n    filters.selectedVariedades.length > 0 ||\n    filters.selectedBodegas.length > 0 ||\n    filters.selectedPaises.length > 0 ||\n    filters.selectedColores.length > 0 ||\n    filters.priceRange.min !== priceRange.min ||\n    filters.priceRange.max !== priceRange.max\n\n  const bodegas = useMemo(() => [...new Set(wines.map((wine) => wine.wine_details.bodega))], [wines])\n  const paises = useMemo(() => [...new Set(wines.map((wine) => wine.pais_importacion))], [wines])\n  const colores = useMemo(() => [...new Set(wines.map((wine) => wine.color_vino))], [wines])\n\n  return {\n    filters,\n    filteredWines,\n    variedades,\n    bodegas,\n    paises,\n    colores,\n    priceRange,\n    toggleVariedad,\n    toggleBodega,\n    togglePais,\n    toggleColor,\n    updatePriceRange,\n    clearFilters,\n    hasActiveFilters,\n    varietalCounts,\n    bodegaCounts,\n    paisCounts,\n    colorCounts,\n  }\n}\n",
      "use-mobile.tsx": "import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n",
      "use-toast.ts": "\"use client\"\n\n// Inspired by react-hot-toast library\nimport * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n",
      "use-url-data-detector.ts": "\"use client\"\r\n\r\nimport { useState, useEffect } from \"react\"\r\nimport { getDataFromURL } from \"@/lib/utils\"\r\n\r\nexport function useURLDataDetector() {\r\n  const [hasCartData, setHasCartData] = useState(false)\r\n  const [hasFiltersData, setHasFiltersData] = useState(false)\r\n\r\n  useEffect(() => {\r\n    // Verificar si hay datos guardados en la URL\r\n    const cartData = getDataFromURL('cart')\r\n    const filtersData = getDataFromURL('filters')\r\n\r\n    setHasCartData(!!cartData && Array.isArray(cartData) && cartData.length > 0)\r\n    setHasFiltersData(!!filtersData && typeof filtersData === 'object' && \r\n      (filtersData.selectedVariedades?.length > 0 || \r\n       filtersData.selectedBodegas?.length > 0 || \r\n       filtersData.selectedPaises?.length > 0 || \r\n       filtersData.selectedColores?.length > 0))\r\n  }, [])\r\n\r\n  return {\r\n    hasCartData,\r\n    hasFiltersData,\r\n    hasAnyData: hasCartData || hasFiltersData\r\n  }\r\n} ",
      "use-url-persistence.ts": "\"use client\"\r\n\r\nimport { useCallback } from \"react\"\r\nimport { clearURLParams } from \"@/lib/utils\"\r\n\r\nexport function useURLPersistence() {\r\n  const clearAllData = useCallback(() => {\r\n    requestAnimationFrame(() => {\r\n      clearURLParams('cart', 'filters')\r\n    })\r\n  }, [])\r\n\r\n  const clearCartData = useCallback(() => {\r\n    requestAnimationFrame(() => {\r\n      clearURLParams('cart')\r\n    })\r\n  }, [])\r\n\r\n  const clearFiltersData = useCallback(() => {\r\n    requestAnimationFrame(() => {\r\n      clearURLParams('filters')\r\n    })\r\n  }, [])\r\n\r\n  return {\r\n    clearAllData,\r\n    clearCartData,\r\n    clearFiltersData,\r\n  }\r\n} ",
      "use-wines.ts": "\"use client\";\r\n\r\nimport { useWineRealtimeContext } from \"@/providers/wine-realtime-provider\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { WineService } from \"@/lib/services/wine-service\";\r\nimport type { Wine } from \"@/types\";\r\n\r\nexport function useWines() {\r\n  const {\r\n    wines: realtimeWines,\r\n    isLoading: realtimeLoading,\r\n    error: realtimeError,\r\n    refetch: refetchRealtime,\r\n  } = useWineRealtimeContext();\r\n\r\n  const [fallbackWines, setFallbackWines] = useState<Wine[]>([]);\r\n  const [isLoadingFallback, setIsLoadingFallback] = useState(false);\r\n  const [fallbackError, setFallbackError] = useState<Error | null>(null);\r\n  const [isUsingFallback, setIsUsingFallback] = useState(false);\r\n\r\n  const shouldUseFallback =\r\n    (realtimeError && realtimeWines.length === 0) || isUsingFallback;\r\n\r\n  // Cargar datos de fallback si es necesario\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n\r\n    if (shouldUseFallback && fallbackWines.length === 0 && !isLoadingFallback) {\r\n      setIsLoadingFallback(true);\r\n      setFallbackError(null);\r\n\r\n      WineService.getAllWines()\r\n        .then((wines) => {\r\n          if (isMounted) {\r\n            setFallbackWines(wines);\r\n            setIsUsingFallback(true);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          if (!isMounted) return;\r\n          console.error(\"useWines: Error loading fallback wines:\", error);\r\n\r\n          let errorMessage = \"Error loading fallback wines\";\r\n          if (error instanceof Error) {\r\n            errorMessage = error.message;\r\n          } else if (typeof error === \"string\") {\r\n            errorMessage = error;\r\n          } else if (error && typeof error === \"object\") {\r\n            errorMessage = JSON.stringify(error);\r\n          }\r\n\r\n          setFallbackError(new Error(errorMessage));\r\n        })\r\n        .finally(() => {\r\n          if (isMounted) setIsLoadingFallback(false);\r\n        });\r\n    }\r\n\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, [shouldUseFallback, fallbackWines, isLoadingFallback]);\r\n\r\n  // Si vuelve realtime, restaurar el estado original\r\n  useEffect(() => {\r\n    if (realtimeWines.length > 0 && !realtimeError && isUsingFallback) {\r\n      setIsUsingFallback(false);\r\n      setFallbackWines([]);\r\n      setFallbackError(null);\r\n    }\r\n  }, [realtimeWines, realtimeError, isUsingFallback]);\r\n\r\n  const wines = shouldUseFallback ? fallbackWines : realtimeWines;\r\n  const isLoading = shouldUseFallback ? isLoadingFallback : realtimeLoading;\r\n  const error = shouldUseFallback ? fallbackError : realtimeError;\r\n\r\n  const refetchWines = async () => {\r\n    try {\r\n      // Intentamos refetch de realtime\r\n      await refetchRealtime();\r\n    } catch (error) {\r\n      console.warn(\"useWines: Realtime refetch failed, trying fallback:\", error);\r\n\r\n      // Si falla, intentamos el fallback\r\n      try {\r\n        const wines = await WineService.getAllWines();\r\n        setFallbackWines(wines);\r\n        setFallbackError(null);\r\n        setIsUsingFallback(true);\r\n      } catch (fallbackError) {\r\n        console.error(\"useWines: Both realtime and fallback failed:\", fallbackError);\r\n\r\n        let errorMessage = \"Both realtime and fallback failed\";\r\n        if (fallbackError instanceof Error) {\r\n          errorMessage = fallbackError.message;\r\n        } else if (typeof fallbackError === \"string\") {\r\n          errorMessage = fallbackError;\r\n        } else if (fallbackError && typeof fallbackError === \"object\") {\r\n          errorMessage = JSON.stringify(fallbackError);\r\n        }\r\n\r\n        setFallbackError(new Error(errorMessage));\r\n      }\r\n    }\r\n  };\r\n\r\n  return {\r\n    wines,\r\n    isLoading,\r\n    error,\r\n    refetch: refetchWines,\r\n    realtimeError,\r\n    fallbackError,\r\n    isUsingFallback,\r\n    realtimeStatus: realtimeError\r\n      ? \"error\"\r\n      : realtimeLoading\r\n      ? \"loading\"\r\n      : \"connected\",\r\n\r\n    // Funciones auxiliares\r\n    getWineById: (id: string) => wines.find((w) => w.id_vino === id),\r\n    getWinesByCategory: (category: string) =>\r\n      wines.filter((w) => w.color_vino === category),\r\n    getWinesByBodega: (bodega: string) =>\r\n      wines.filter((w) => w.wine_details.bodega === bodega),\r\n    getWinesByPais: (pais: string) =>\r\n      wines.filter((w) => w.pais_importacion === pais),\r\n    getWinesByVariedad: (variedad: string) =>\r\n      wines.filter((w) => w.variedades.includes(variedad)),\r\n    getWinesByPriceRange: (min: number, max: number) =>\r\n      wines.filter((w) => w.precio >= min && w.precio <= max),\r\n    getWinesInStock: () => wines.filter((w) => w.stock > 0),\r\n    getWinesOutOfStock: () => wines.filter((w) => w.stock === 0),\r\n  };\r\n}\r\n",
      "useRealtimeWines.ts": "import { useEffect, useCallback, useState, useRef } from \"react\"\r\nimport { supabase } from \"@/lib/supabase\"\r\nimport type { Wine } from \"@/types\"\r\n\r\nexport interface WineRealtimeEvent {\r\n  type: 'INSERT' | 'UPDATE' | 'DELETE'\r\n  wine: Wine\r\n}\r\n\r\nexport interface UseWineRealtimeReturn {\r\n  wines: Wine[]\r\n  isLoading: boolean\r\n  error: Error | null\r\n  refetch: () => Promise<void>\r\n}\r\n\r\nexport function useWineRealtime(\r\n  onUpdate?: (event: WineRealtimeEvent) => void,\r\n  onError?: (error: Error) => void\r\n): UseWineRealtimeReturn {\r\n  const [wines, setWines] = useState<Wine[]>([])\r\n  const [isLoading, setIsLoading] = useState(true)\r\n  const [error, setError] = useState<Error | null>(null)\r\n  const channelRef = useRef<any>(null)\r\n  const retryTimeoutRef = useRef<NodeJS.Timeout | undefined>(undefined)\r\n  const isSubscribedRef = useRef(false)\r\n\r\n  // Función para cargar vinos iniciales\r\n  const loadWines = useCallback(async () => {\r\n    try {\r\n      setIsLoading(true)\r\n      setError(null)\r\n      \r\n      // Loading wines from Supabase...\r\n      \r\n      const { data, error: fetchError } = await supabase\r\n        .from(\"wines\")\r\n        .select(`\r\n          *,\r\n          wine_details (*)\r\n        `)\r\n        .order(\"bodega\", { referencedTable: 'wine_details', ascending: true })\r\n        .order(\"nombre\", { ascending: true })\r\n        .order(\"variedades\", { ascending: true })\r\n        .order(\"capacidad\", { ascending: false })\r\n\r\n      if (fetchError) {\r\n        console.error('Supabase fetch error:', fetchError)\r\n        throw new Error(`Error fetching wines: ${fetchError.message || 'Unknown error'}`)\r\n      }\r\n\r\n              // Raw wines data from Supabase\r\n      \r\n      if (!data) {\r\n        console.warn('No data returned from Supabase')\r\n        setWines([])\r\n        return\r\n      }\r\n      \r\n      const normalizedWines = data.map((wine) => ({\r\n        ...wine,\r\n        wine_details: Array.isArray(wine.wine_details)\r\n          ? wine.wine_details[0]\r\n          : wine.wine_details\r\n      }))\r\n\r\n              // Normalized wines\r\n      setWines(normalizedWines)\r\n    } catch (err) {\r\n      console.error('Error loading wines:', err)\r\n      \r\n      // Crear un error más informativo\r\n      let errorMessage = 'Error loading wines'\r\n      if (err instanceof Error) {\r\n        errorMessage = err.message\r\n      } else if (typeof err === 'string') {\r\n        errorMessage = err\r\n      } else if (err && typeof err === 'object') {\r\n        errorMessage = JSON.stringify(err)\r\n      }\r\n      \r\n      const error = new Error(errorMessage)\r\n      setError(error)\r\n      onError?.(error)\r\n    } finally {\r\n      setIsLoading(false)\r\n    }\r\n  }, [onError])\r\n\r\n  // Memoizar el callback para evitar re-suscripciones innecesarias\r\n  const handleUpdate = useCallback((event: WineRealtimeEvent) => {\r\n    try {\r\n      setWines((prev) => {\r\n        switch (event.type) {\r\n          case 'INSERT':\r\n            return [...prev, event.wine]\r\n          case 'UPDATE':\r\n            return prev.map((w) =>\r\n              w.id_vino === event.wine.id_vino ? event.wine : w\r\n            )\r\n          case 'DELETE':\r\n            return prev.filter((w) => w.id_vino !== event.wine.id_vino)\r\n          default:\r\n            return prev\r\n        }\r\n      })\r\n      \r\n      onUpdate?.(event)\r\n    } catch (err) {\r\n      const error = err as Error\r\n      console.error('Error in wine realtime callback:', error)\r\n      setError(error)\r\n      onError?.(error)\r\n    }\r\n  }, [onUpdate, onError])\r\n\r\n  // Función para configurar el canal con reintentos\r\n  const setupChannel = useCallback(async (retryCount = 0) => {\r\n    try {\r\n      // Limpiar canal anterior si existe\r\n      if (channelRef.current) {\r\n        // Removing previous channel\r\n        supabase.removeChannel(channelRef.current)\r\n        channelRef.current = null\r\n        isSubscribedRef.current = false\r\n      }\r\n\r\n              // Setting up wine realtime channel\r\n      \r\n      channelRef.current = supabase\r\n        .channel(`wines_changes_${Date.now()}`) // Nombre único para evitar conflictos\r\n        .on(\r\n          \"postgres_changes\",\r\n          {\r\n            event: \"*\", // insert | update | delete\r\n            schema: \"public\",\r\n            table: \"wines\",\r\n          },\r\n          (payload) => {\r\n            try {\r\n              // Wine realtime event\r\n              \r\n              // Normalizar wine_details\r\n              const normalizeWine = (wineData: any): Wine => {\r\n                const normalizedWine = {\r\n                  ...wineData,\r\n                  wine_details: Array.isArray(wineData.wine_details)\r\n                    ? wineData.wine_details[0] || {}\r\n                    : (wineData.wine_details || {}),\r\n                }\r\n                // Normalized wine in realtime\r\n                return normalizedWine\r\n              }\r\n\r\n              switch (payload.eventType) {\r\n                case \"INSERT\":\r\n                  const newWine = normalizeWine(payload.new)\r\n                  handleUpdate({\r\n                    type: 'INSERT',\r\n                    wine: newWine\r\n                  })\r\n                  break\r\n\r\n                case \"UPDATE\":\r\n                  // Para actualizaciones, necesitamos obtener los datos completos incluyendo wine_details\r\n                  const fetchUpdatedWine = async () => {\r\n                    try {\r\n                      const { data: updatedWineData, error: fetchError } = await supabase\r\n                        .from(\"wines\")\r\n                        .select(`\r\n                          *,\r\n                          wine_details (*)\r\n                        `)\r\n                        .eq('id_vino', payload.new.id_vino)\r\n                        .single()\r\n\r\n                      if (fetchError) {\r\n                        console.error('Error fetching updated wine:', fetchError)\r\n                        // Fallback: usar los datos del payload\r\n                        const updatedWine = normalizeWine(payload.new)\r\n                        handleUpdate({\r\n                          type: 'UPDATE',\r\n                          wine: updatedWine\r\n                        })\r\n                      } else {\r\n                        const normalizedUpdatedWine = {\r\n                          ...updatedWineData,\r\n                          wine_details: Array.isArray(updatedWineData.wine_details)\r\n                            ? updatedWineData.wine_details[0]\r\n                            : updatedWineData.wine_details\r\n                        }\r\n                        handleUpdate({\r\n                          type: 'UPDATE',\r\n                          wine: normalizedUpdatedWine\r\n                        })\r\n                      }\r\n                    } catch (err) {\r\n                      console.error('Error in fetchUpdatedWine:', err)\r\n                      // Fallback: usar los datos del payload\r\n                      const updatedWine = normalizeWine(payload.new)\r\n                      handleUpdate({\r\n                        type: 'UPDATE',\r\n                        wine: updatedWine\r\n                      })\r\n                    }\r\n                  }\r\n                  \r\n                  fetchUpdatedWine()\r\n                  break\r\n\r\n                case \"DELETE\":\r\n                  const deletedWine = normalizeWine(payload.old)\r\n                  handleUpdate({\r\n                    type: 'DELETE',\r\n                    wine: deletedWine\r\n                  })\r\n                  break\r\n\r\n                default:\r\n                  console.warn('Unknown wine realtime event type:', (payload as any).eventType)\r\n              }\r\n            } catch (err) {\r\n              // Capturar errores en el callback del canal sin propagarlos\r\n              console.warn('Error processing wine realtime event:', err)\r\n            }\r\n          }\r\n        )\r\n        .subscribe((status) => {\r\n          // Wine realtime subscription status\r\n          \r\n          if (status === 'CHANNEL_ERROR') {\r\n            console.warn('Wine realtime channel error - attempting retry')\r\n            const error = new Error(`Failed to subscribe to wine changes (attempt ${retryCount + 1})`)\r\n            setError(error)\r\n            onError?.(error)\r\n            \r\n            // Reintentar después de 5 segundos (máximo 3 intentos)\r\n            if (retryCount < 2) {\r\n              retryTimeoutRef.current = setTimeout(() => {\r\n                setupChannel(retryCount + 1)\r\n              }, 5000)\r\n            }\r\n          } else if (status === 'SUBSCRIBED') {\r\n            // Wine realtime channel subscribed successfully\r\n            setError(null) // Limpiar errores anteriores si la suscripción es exitosa\r\n            isSubscribedRef.current = true\r\n          } else if (status === 'CLOSED') {\r\n            // Wine realtime channel closed\r\n            isSubscribedRef.current = false\r\n          }\r\n        })\r\n\r\n        // Channel reference\r\n\r\n    } catch (err) {\r\n      const error = err as Error\r\n      console.error('Error setting up wine realtime channel:', error)\r\n      setError(error)\r\n      onError?.(error)\r\n      \r\n      // Reintentar en caso de error de configuración\r\n      if (retryCount < 2) {\r\n        retryTimeoutRef.current = setTimeout(() => {\r\n          setupChannel(retryCount + 1)\r\n        }, 5000)\r\n      }\r\n    }\r\n  }, [handleUpdate, onError])\r\n\r\n  useEffect(() => {\r\n    // Cargar datos iniciales y configurar realtime\r\n    loadWines().then(() => {\r\n      setupChannel()\r\n    })\r\n\r\n    return () => {\r\n      // Limpiar timeouts\r\n      if (retryTimeoutRef.current) {\r\n        clearTimeout(retryTimeoutRef.current)\r\n      }\r\n      \r\n      // Limpiar canal\r\n      if (channelRef.current) {\r\n        // Cleaning up wine realtime channel\r\n        supabase.removeChannel(channelRef.current)\r\n        channelRef.current = null\r\n        isSubscribedRef.current = false\r\n      }\r\n    }\r\n  }, [loadWines, setupChannel])\r\n\r\n  return {\r\n    wines,\r\n    isLoading,\r\n    error,\r\n    refetch: loadWines\r\n  }\r\n}\r\n"
    },
    "lib": {
      "services": {
        "auth-service.ts": "import { supabase } from \"@/lib/supabase\"\nimport type { User } from \"@/types\"\n\nexport class AuthService {\n  static async signUp(email: string, password: string, name: string) {\n    const { data, error } = await supabase.auth.signUp({\n      email,\n      password,\n      options: {\n        data: {\n          name,\n        },\n      },\n    })\n\n    if (error) throw error\n    return data\n  }\n\n  static async signIn(email: string, password: string) {\n    const { data, error } = await supabase.auth.signInWithPassword({\n      email,\n      password,\n    })\n\n    if (error) throw error\n    return data\n  }\n\n  static async signOut() {\n    const { error } = await supabase.auth.signOut()\n    if (error) throw error\n  }\n\n  static async getCurrentUser(): Promise<User | null> {\n    const {\n      data: { user },\n    } = await supabase.auth.getUser()\n\n    if (!user) return null\n\n    const { data: profile } = await supabase.from(\"user_profiles\").select(\"*\").eq(\"id\", user.id).single()\n\n    return profile\n      ? {\n          id: profile.id,\n          email: profile.email,\n          name: profile.name,\n          isAdmin: profile.is_admin,\n          password: \"\", // Se agrega el campo 'password' como requerido por el tipo 'User'\n        }\n      : null\n  }\n\n  static onAuthStateChange(callback: (user: User | null) => void) {\n    return supabase.auth.onAuthStateChange(async (event, session) => {\n      if (session?.user) {\n        const user = await this.getCurrentUser()\n        callback(user)\n      } else {\n        callback(null)\n      }\n    })\n  }\n}\n",
        "cart-service.ts": "import { supabase } from \"@/lib/supabase\"\nimport type { CartItem } from \"@/types\"\n\nexport class CartService {\n  static async getCartItems(userId: string): Promise<CartItem[]> {\n    const { data, error } = await supabase.from(\"cart_items\").select(\"*\").eq(\"user_id\", userId)\n\n    if (error) {\n      console.error(\"Error fetching cart items:\", error)\n      throw error\n    }\n\n    return (\n      data?.map((item) => ({\n        id: item.wine_id,\n        quantity: item.quantity,\n      })) || []\n    )\n  }\n\n  static async addToCart(userId: string, wineId: string, quantity = 1): Promise<void> {\n    const { error } = await supabase.from(\"cart_items\").upsert(\n      {\n        user_id: userId,\n        wine_id: wineId,\n        quantity,\n      },\n      {\n        onConflict: \"user_id,wine_id\",\n      },\n    )\n\n    if (error) {\n      console.error(\"Error adding to cart:\", error)\n      throw error\n    }\n  }\n\n  static async updateCartItem(userId: string, wineId: string, quantity: number): Promise<void> {\n    if (quantity <= 0) {\n      await this.removeFromCart(userId, wineId)\n      return\n    }\n\n    const { error } = await supabase.from(\"cart_items\").update({ quantity }).eq(\"user_id\", userId).eq(\"wine_id\", wineId)\n\n    if (error) {\n      console.error(\"Error updating cart item:\", error)\n      throw error\n    }\n  }\n\n  static async removeFromCart(userId: string, wineId: string): Promise<void> {\n    const { error } = await supabase.from(\"cart_items\").delete().eq(\"user_id\", userId).eq(\"wine_id\", wineId)\n\n    if (error) {\n      console.error(\"Error removing from cart:\", error)\n      throw error\n    }\n  }\n\n  static async clearCart(userId: string): Promise<void> {\n    const { error } = await supabase.from(\"cart_items\").delete().eq(\"user_id\", userId)\n\n    if (error) {\n      console.error(\"Error clearing cart:\", error)\n      throw error\n    }\n  }\n}\n",
        "consumibles-service.ts": "import { createClient } from '@supabase/supabase-js';\r\nimport { Consumibles } from '../../types';\r\n\r\nconst supabase = createClient(\r\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\r\n  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\r\n);\r\n\r\nexport async function getAllConsumibles(): Promise<Consumibles[]> {\r\n  const { data, error } = await supabase\r\n    .from('consumibles')\r\n    .select('*')\r\n    .order('nombre', { ascending: true });\r\n  if (error) throw error;\r\n  return data as Consumibles[];\r\n}\r\n\r\nexport function subscribeToConsumibles(\r\n  onChange: (payload: any) => void\r\n) {\r\n  return supabase\r\n    .channel('public:consumibles')\r\n    .on(\r\n      'postgres_changes',\r\n      { event: '*', schema: 'public', table: 'consumibles' },\r\n      onChange\r\n    )\r\n    .subscribe();\r\n} ",
        "wine-service.ts": "import { supabase } from \"@/lib/supabase\"\nimport type { Wine } from \"@/types\"\n\nexport class WineService {\n  static async getAllWines(): Promise<Wine[]> {\n    try {\n      // WineService: Fetching all wines...\n      \n      const { data, error } = await supabase\n        .from(\"wines\")\n        .select(`\n          *,\n          wine_details (\n            id_detalle,\n            id_vino,\n            bodega,\n            notas_cata,\n            tipo_crianza,\n            contenido_azucar,\n            contenido_carbonico\n          )\n        `)\n        .order(\"bodega\", { referencedTable: 'wine_details', ascending: true })\n        .order(\"nombre\")\n        .order(\"variedades\", { ascending: true })\n        .order(\"capacidad\", { ascending: false })\n\n      if (error) {\n        console.error(\"WineService: Supabase error:\", error)\n        throw new Error(`Error fetching wines: ${error.message || 'Unknown error'}`)\n      }\n\n              // WineService: Raw data from Supabase\n\n      if (!data) {\n        console.warn('WineService: No data returned from Supabase')\n        return []\n      }\n\n      const normalizedWines = data.map((wine) => ({\n        ...wine,\n        wine_details: wine.wine_details?.[0] || null,\n      }))\n\n              // WineService: Normalized wines\n      return normalizedWines\n    } catch (err) {\n      console.error(\"WineService: Error in getAllWines:\", err)\n      \n      // Crear un error más informativo\n      let errorMessage = 'Error fetching wines'\n      if (err instanceof Error) {\n        errorMessage = err.message\n      } else if (typeof err === 'string') {\n        errorMessage = err\n      } else if (err && typeof err === 'object') {\n        errorMessage = JSON.stringify(err)\n      }\n      \n      throw new Error(errorMessage)\n    }\n  }\n\n  static async getWineById(id: string): Promise<Wine | null> {\n    const { data, error } = await supabase\n      .from(\"wines\")\n      .select(`\n        *,\n        wine_details (\n          id_detalle,\n          id_vino,\n          bodega,\n          notas_cata,\n          tipo_crianza,\n          contenido_azucar,\n          contenido_carbonico\n        )\n      `)\n      .eq(\"id_vino\", id)\n      .single()\n\n    if (error) {\n      console.error(\"Error fetching wine:\", error)\n      return null\n    }\n\n    return (\n      data ? {\n        ...data,\n        wine_details: data.wine_details[0],\n      } : null\n    )\n  }\n\n  static async createWine(wine: Omit<Wine, \"id_vino\">): Promise<Wine | null> {\n    const { wine_details, ...wineData } = wine\n\n    // Insert wine\n    const { data: wineResult, error: wineError } = await supabase.from(\"wines\").insert(wineData).select().single()\n\n    if (wineError) {\n      console.error(\"Error creating wine:\", wineError)\n      throw wineError\n    }\n\n    // Insert wine details\n    const { data: detailsResult, error: detailsError } = await supabase\n      .from(\"wine_details\")\n      .insert({\n        ...wine_details,\n        id_vino: wineResult.id_vino,\n      })\n      .select()\n      .single()\n\n    if (detailsError) {\n      console.error(\"Error creating wine details:\", detailsError)\n      throw detailsError\n    }\n\n    return {\n      ...wineResult,\n      wine_details: detailsResult,\n    }\n  }\n\n  static async updateWine(id: string, wine: Partial<Wine>): Promise<Wine | null> {\n    const { wine_details, ...wineData } = wine\n\n    // Update wine\n    const { data: wineResult, error: wineError } = await supabase\n      .from(\"wines\")\n      .update(wineData)\n      .eq(\"id_vino\", id)\n      .select()\n      .single()\n\n    if (wineError) {\n      console.error(\"Error updating wine:\", wineError)\n      throw wineError\n    }\n\n    // Update wine details if provided\n    if (wine_details) {\n      const { data: detailsResult, error: detailsError } = await supabase\n        .from(\"wine_details\")\n        .update(wine_details)\n        .eq(\"id_vino\", id)\n        .select()\n        .single()\n\n      if (detailsError) {\n        console.error(\"Error updating wine details:\", detailsError)\n        throw detailsError\n      }\n\n      return {\n        ...wineResult,\n        wine_details: detailsResult,\n      }\n    }\n\n    return wineResult\n  }\n\n  static async deleteWine(id: string): Promise<boolean> {\n    const { error } = await supabase.from(\"wines\").delete().eq(\"id_vino\", id)\n\n    if (error) {\n      console.error(\"Error deleting wine:\", error)\n      throw error\n    }\n\n    return true\n  }\n}\n"
      },
      "supabase.ts": "import { createClient } from \"@supabase/supabase-js\"\r\n\r\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!\r\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\r\nconst service_roleKey = process.env.SUPABASE_SERVICE_ROLE_KEY!\r\n\r\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey, {\r\n  realtime: {\r\n    params: {\r\n      eventsPerSecond: 10,\r\n    },\r\n    heartbeatIntervalMs: 30000,\r\n    reconnectAfterMs: (tries: number) => Math.min(tries * 1000, 10000),\r\n  },\r\n  auth: {\r\n    autoRefreshToken: true,\r\n    persistSession: true,\r\n    detectSessionInUrl: true\r\n  },\r\n  global: {\r\n    headers: {\r\n      'X-Client-Info': 'wine-store-app'\r\n    }\r\n  }\r\n})\r\n\r\nif (!supabaseUrl || !supabaseAnonKey) {\r\n  console.error('Supabase configuration error: Missing environment variables')\r\n}\r\n\r\nsupabase.realtime.channel('global')\r\n  .on('presence', { event: 'sync' }, () => {\r\n          // Supabase realtime presence sync completed successfully\r\n  })\r\n  .subscribe(\r\n    (status) => {\r\n      if (status === 'SUBSCRIBED') {\r\n        // Supabase realtime connected\r\n      } else if (status === 'CLOSED') {\r\n        // Supabase realtime disconnected\r\n      }\r\n    }\r\n  )",
      "utils.ts": "import { type ClassValue, clsx } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n\n// Función simple de encriptación usando base64 y una clave secreta\nconst ENCRYPTION_KEY = \"wine-store-secret-key-2024\"\n\n// Función para validar datos antes de encriptar\nfunction isValidData(data: any, defaultPriceRange: { min: number, max: number } = { min: 0, max: 0 }): boolean {\n  if (data === null || data === undefined) return false;\n  if (Array.isArray(data)) return data.length > 0;\n  if (typeof data === 'object') {\n    // Considerar filtros\n    const hasActiveFilters =\n      (data.selectedVariedades && data.selectedVariedades.length > 0) ||\n      (data.selectedBodegas && data.selectedBodegas.length > 0) ||\n      (data.selectedPaises && data.selectedPaises.length > 0) ||\n      (data.selectedColores && data.selectedColores.length > 0);\n\n    // Considerar rango de precios distinto al valor por defecto\n    const hasCustomPriceRange =\n      data.priceRange && typeof data.priceRange === 'object' &&\n      (data.priceRange.min !== defaultPriceRange.min ||\n        data.priceRange.max !== defaultPriceRange.max);\n\n    return hasActiveFilters || hasCustomPriceRange;\n  }\n  return false;\n}\n\nexport function encryptData(data: any, defaultPriceRange?: { min: number, max: number }): string {\n  try {\n    // Validar datos antes de encriptar\n    if (!isValidData(data, defaultPriceRange)) {\n      return ''\n    }\n    \n    const jsonString = JSON.stringify(data)\n    const encoded = btoa(jsonString)\n    // Aplicar una transformación simple para mayor seguridad\n    const encrypted = encoded.split('').map((char, index) => {\n      const keyChar = ENCRYPTION_KEY[index % ENCRYPTION_KEY.length]\n      const charCode = char.charCodeAt(0) ^ keyChar.charCodeAt(0)\n      return String.fromCharCode(charCode)\n    }).join('')\n    return btoa(encrypted)\n  } catch (error) {\n    console.error('Error encrypting data:', error)\n    return ''\n  }\n}\n\nexport function decryptData(encryptedString: string): any {\n  try {\n    const decoded = atob(encryptedString)\n    const decrypted = decoded.split('').map((char, index) => {\n      const keyChar = ENCRYPTION_KEY[index % ENCRYPTION_KEY.length]\n      const charCode = char.charCodeAt(0) ^ keyChar.charCodeAt(0)\n      return String.fromCharCode(charCode)\n    }).join('')\n    const jsonString = atob(decrypted)\n    return JSON.parse(jsonString)\n  } catch (error) {\n    console.error('Error decrypting data:', error)\n    return null\n  }\n}\n\n// Función para actualizar la URL con datos encriptados\nexport function updateURLWithData(data: any, paramName: string) {\n  if (typeof window === 'undefined') return\n  \n  const encrypted = encryptData(data)\n  const url = new URL(window.location.href)\n  \n  if (encrypted) {\n    url.searchParams.set(paramName, encrypted)\n  } else {\n    url.searchParams.delete(paramName)\n  }\n  \n  // Usar replaceState para no agregar entradas al historial\n  window.history.replaceState({}, '', url.toString())\n}\n\n// Función para obtener datos de la URL\nexport function getDataFromURL(paramName: string): any {\n  if (typeof window === 'undefined') return null\n  \n  const url = new URL(window.location.href)\n  const encrypted = url.searchParams.get(paramName)\n  \n  if (!encrypted) {\n    return null\n  }\n  \n  return decryptData(encrypted)\n}\n\n// Función para limpiar parámetros de la URL\nexport function clearURLParams(...paramNames: string[]) {\n  if (typeof window === 'undefined') return\n  \n  const url = new URL(window.location.href)\n  paramNames.forEach(param => url.searchParams.delete(param))\n  window.history.replaceState({}, '', url.toString())\n}\n\n// Guardar la vista actual como texto plano en la URL\nexport function setViewInURL(view: string) {\n  if (typeof window === 'undefined') return\n  const url = new URL(window.location.href)\n  url.searchParams.set('view', view)\n  window.history.replaceState({}, '', url.toString())\n}\n\n// Leer la vista actual como texto plano desde la URL\nexport function getViewFromURL(): string | null {\n  if (typeof window === 'undefined') return null\n  const url = new URL(window.location.href)\n  return url.searchParams.get('view')\n}\n"
    },
    "providers": {
      "auth-provider.tsx": "\"use client\"\n// src/providers/auth-provider.tsx\nimport { createContext, useContext, useEffect, useState } from \"react\";\nimport { supabase } from \"@/lib/supabase\";\nimport { User } from \"@supabase/supabase-js\";\nimport { toast } from \"sonner\";\n\ninterface ExtendedUser extends User {\n  isAdmin?: boolean;\n}\n\nconst AuthContext = createContext<any>(null);\n\nexport function AuthProvider({ children }: { children: React.ReactNode }) {\n  const [user, setUser] = useState<ExtendedUser | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isProcessingMagicLink, setIsProcessingMagicLink] = useState(false);\n\n  // Función para verificar si un usuario es administrador\n  const checkUserRole = (user: User): ExtendedUser => {\n    const extendedUser = user as ExtendedUser;\n    // Verificar en user_metadata si es admin\n    extendedUser.isAdmin = user.user_metadata?.role === 'admin' || \n                          user.user_metadata?.isAdmin === true ||\n                          user.email === 'acevedojuanesteban.colombia@gmail.com'; // Email específico como admin\n    \n    return extendedUser;\n  };\n\n  // Función para procesar el magic link desde el hash de la URL\n  const processMagicLink = async () => {\n    if (typeof window === 'undefined') return;\n\n    const hash = window.location.hash;\n    if (!hash) return;\n\n    // Extraer parámetros del hash\n    const params = new URLSearchParams(hash.substring(1));\n    const accessToken = params.get('access_token');\n    const refreshToken = params.get('refresh_token');\n    const expiresAt = params.get('expires_at');\n    const tokenType = params.get('token_type');\n\n    if (accessToken && refreshToken) {\n      setIsProcessingMagicLink(true);\n      try {\n        // Establecer la sesión con los tokens\n        const { data, error } = await supabase.auth.setSession({\n          access_token: accessToken,\n          refresh_token: refreshToken,\n        });\n\n        if (error) {\n          console.error('Error al procesar magic link:', error);\n          toast.error('Error al procesar el enlace de acceso');\n        } else if (data.session) {\n          const extendedUser = checkUserRole(data.session.user);\n          setUser(extendedUser);\n          toast.success('¡Sesión iniciada correctamente!');\n          \n          // Limpiar el hash de la URL\n          window.history.replaceState(null, '', window.location.pathname + window.location.search);\n        }\n      } catch (error) {\n        console.error('Error al procesar magic link:', error);\n        toast.error('Error al procesar el enlace de acceso');\n      } finally {\n        setIsProcessingMagicLink(false);\n      }\n    }\n  };\n\n  useEffect(() => {\n    // Procesar magic link al cargar la página\n    processMagicLink();\n\n    // Obtener sesión actual\n    supabase.auth.getSession().then(({ data }) => {\n      if (data.session?.user) {\n        const extendedUser = checkUserRole(data.session.user);\n        setUser(extendedUser);\n      }\n    });\n\n    // Escuchar cambios en el estado de autenticación\n    const { data: listener } = supabase.auth.onAuthStateChange((_event, session) => {\n      if (session?.user) {\n        const extendedUser = checkUserRole(session.user);\n        setUser(extendedUser);\n      } else {\n        setUser(null);\n      }\n    });\n\n    return () => {\n      listener?.subscription.unsubscribe();\n    };\n  }, []);\n\n  const login = async (email: string) => {\n    setIsLoading(true);\n    try {\n      const { error } = await supabase.auth.signInWithOtp({ \n        email,\n        options: {\n          emailRedirectTo: `${window.location.origin}${window.location.pathname}`\n        }\n      });\n      \n      if (error) {\n        throw error;\n      } else {\n        toast.success('Enlace de acceso enviado a tu email');\n      }\n    } catch (error: any) {\n      console.error('Error al enviar magic link:', error);\n      toast.error(error.message || 'Error al enviar el enlace de acceso');\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const logout = async () => {\n    try {\n      await supabase.auth.signOut();\n      setUser(null);\n      toast.success('Sesión cerrada correctamente');\n    } catch (error) {\n      console.error('Error al cerrar sesión:', error);\n      toast.error('Error al cerrar sesión');\n    }\n  };\n\n  // Función para actualizar el rol del usuario (solo para admins)\n  const updateUserRole = async (userId: string, isAdmin: boolean) => {\n    try {\n      const { error } = await supabase.auth.admin.updateUserById(userId, {\n        user_metadata: { \n          role: isAdmin ? 'admin' : 'user',\n          isAdmin: isAdmin \n        }\n      });\n      \n      if (error) throw error;\n      \n      // Actualizar el usuario local si es el usuario actual\n      if (user?.id === userId) {\n        const updatedUser = { ...user, isAdmin };\n        setUser(updatedUser);\n      }\n      \n      toast.success(`Usuario ${isAdmin ? 'promovido a administrador' : 'degradado a usuario'}`);\n    } catch (error: any) {\n      console.error('Error al actualizar rol:', error);\n      toast.error('Error al actualizar el rol del usuario');\n      throw error;\n    }\n  };\n\n  return (\n    <AuthContext.Provider value={{ \n      user, \n      isLoggedIn: !!user,\n      login, \n      logout, \n      isLoading, \n      isProcessingMagicLink,\n      updateUserRole\n    }}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  return useContext(AuthContext);\n}",
      "cart-provider.tsx": "\"use client\"\r\n\r\nimport React, { createContext, useContext, useState, ReactNode } from \"react\"\r\n\r\ninterface CartContextProps {\r\n  isCartOpen: boolean\r\n  openCart: () => void\r\n  closeCart: () => void\r\n  toggleCart: () => void\r\n}\r\n\r\nconst CartContext = createContext<CartContextProps | undefined>(undefined)\r\n\r\ninterface CartProviderProps {\r\n  children: ReactNode\r\n}\r\n\r\nexport const CartProvider = ({ children }: CartProviderProps) => {\r\n  const [isCartOpen, setIsCartOpen] = useState(false)\r\n\r\n  const openCart = () => setIsCartOpen(true)\r\n  const closeCart = () => setIsCartOpen(false)\r\n  const toggleCart = () => setIsCartOpen(!isCartOpen)\r\n\r\n  return (\r\n    <CartContext.Provider value={{ isCartOpen, openCart, closeCart, toggleCart }}>\r\n      {children}\r\n    </CartContext.Provider>\r\n  )\r\n}\r\n\r\nexport function useCartModal() {\r\n  const context = useContext(CartContext)\r\n  if (!context) {\r\n    throw new Error(\"useCartModal debe usarse dentro de un CartProvider\")\r\n  }\r\n  return context\r\n} ",
      "order-status-provider.tsx": "\"use client\"\r\n\r\nimport React, { createContext, useContext, useState, useEffect, ReactNode } from \"react\"\r\n\r\ntype OrderStatusType = \"pendiente\" | \"preparandose\" | \"listo para enviarse\" | \"enviandose\" | \"listo\"\r\n\r\ninterface OrderStatusContextProps {\r\n  userId: string | null\r\n  setUserId: (id: string) => void\r\n  orderStatus: OrderStatusType\r\n  setOrderStatus: (status: OrderStatusType) => void\r\n}\r\n\r\nconst OrderStatusContext = createContext<OrderStatusContextProps | undefined>(undefined)\r\n\r\ninterface OrderStatusProviderProps {\r\n  children: ReactNode\r\n}\r\n\r\nexport const OrderStatusProvider = ({ children }: OrderStatusProviderProps) => {\r\n  const [userId, setUserIdState] = useState<string | null>(null)\r\n  const [orderStatus, setOrderStatusState] = useState<OrderStatusType>(\"pendiente\")\r\n\r\n  // Función para obtener las claves de localStorage basadas en el userId\r\n  const getStorageKeys = (id: string) => ({\r\n    userIdKey: id,\r\n    orderStatusKey: `wine-store-order-status-${id}`\r\n  })\r\n\r\n  // Cargar desde localStorage al iniciar\r\n  useEffect(() => {\r\n    // Buscar si hay algún userId guardado\r\n    const keys = Object.keys(localStorage)\r\n    const userIdKey = keys.find(key => key.startsWith('wine-store-user-id-'))\r\n    \r\n    if (userIdKey) {\r\n      const storedUserId = localStorage.getItem(userIdKey)\r\n      if (storedUserId) {\r\n        setUserIdState(storedUserId)\r\n        const { orderStatusKey } = getStorageKeys(storedUserId)\r\n        const storedOrderStatus = localStorage.getItem(orderStatusKey) as OrderStatusType | null\r\n        if (storedOrderStatus) setOrderStatusState(storedOrderStatus)\r\n      }\r\n    }\r\n  }, [])\r\n\r\n  // Guardar en localStorage cuando cambie el userId\r\n  useEffect(() => {\r\n    if (userId) {\r\n      const { userIdKey } = getStorageKeys(userId)\r\n      localStorage.setItem(userIdKey, userId)\r\n    }\r\n  }, [userId])\r\n\r\n  // Guardar en localStorage cuando cambie el orderStatus\r\n  useEffect(() => {\r\n    if (userId && orderStatus) {\r\n      const { orderStatusKey } = getStorageKeys(userId)\r\n      localStorage.setItem(orderStatusKey, orderStatus)\r\n    }\r\n  }, [userId, orderStatus])\r\n\r\n  const setUserId = (id: string) => setUserIdState(id)\r\n  const setOrderStatus = (status: OrderStatusType) => setOrderStatusState(status)\r\n\r\n  return (\r\n    <OrderStatusContext.Provider value={{ userId, setUserId, orderStatus, setOrderStatus }}>\r\n      {children}\r\n    </OrderStatusContext.Provider>\r\n  )\r\n}\r\n\r\nexport function useOrderStatus() {\r\n  const context = useContext(OrderStatusContext)\r\n  if (!context) {\r\n    throw new Error(\"useOrderStatus debe usarse dentro de un OrderStatusProvider\")\r\n  }\r\n  return context\r\n} ",
      "screens-provider.tsx": "",
      "wine-realtime-provider.tsx": "\"use client\"\r\n\r\nimport { createContext, useContext, ReactNode, useEffect } from \"react\";\r\nimport { useWineRealtime, UseWineRealtimeReturn } from \"@/hooks/useRealtimeWines\";\r\n\r\nconst WineRealtimeContext = createContext<UseWineRealtimeReturn | null>(null);\r\n\r\nexport function WineRealtimeProvider({ children }: { children: ReactNode }) {\r\n  useEffect(() => {\r\n    return () => {\r\n      // Cleanup on unmount\r\n    };\r\n  }, []);\r\n  const realtime = useWineRealtime();\r\n  return (\r\n    <WineRealtimeContext.Provider value={realtime}>\r\n      {children}\r\n    </WineRealtimeContext.Provider>\r\n  );\r\n}\r\n\r\nexport function useWineRealtimeContext() {\r\n  const ctx = useContext(WineRealtimeContext);\r\n  if (!ctx) throw new Error(\"useWineRealtimeContext debe usarse dentro de WineRealtimeProvider\");\r\n  return ctx;\r\n} "
    },
    "styles": {
      "globals.css": "@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\nbody {\n  font-family: Arial, Helvetica, sans-serif;\n}\n\n@layer utilities {\n  .text-balance {\n    text-wrap: balance;\n  }\n}\n\n@layer base {\n  :root {\n    --background: 0 0% 100%;\n    --foreground: 0 0% 3.9%;\n    --card: 0 0% 100%;\n    --card-foreground: 0 0% 3.9%;\n    --popover: 0 0% 100%;\n    --popover-foreground: 0 0% 3.9%;\n    --primary: 0 0% 9%;\n    --primary-foreground: 0 0% 98%;\n    --secondary: 0 0% 96.1%;\n    --secondary-foreground: 0 0% 9%;\n    --muted: 0 0% 96.1%;\n    --muted-foreground: 0 0% 45.1%;\n    --accent: 0 0% 96.1%;\n    --accent-foreground: 0 0% 9%;\n    --destructive: 0 84.2% 60.2%;\n    --destructive-foreground: 0 0% 98%;\n    --border: 0 0% 89.8%;\n    --input: 0 0% 89.8%;\n    --ring: 0 0% 3.9%;\n    --chart-1: 12 76% 61%;\n    --chart-2: 173 58% 39%;\n    --chart-3: 197 37% 24%;\n    --chart-4: 43 74% 66%;\n    --chart-5: 27 87% 67%;\n    --radius: 0.5rem;\n    --sidebar-background: 0 0% 98%;\n    --sidebar-foreground: 240 5.3% 26.1%;\n    --sidebar-primary: 240 5.9% 10%;\n    --sidebar-primary-foreground: 0 0% 98%;\n    --sidebar-accent: 240 4.8% 95.9%;\n    --sidebar-accent-foreground: 240 5.9% 10%;\n    --sidebar-border: 220 13% 91%;\n    --sidebar-ring: 217.2 91.2% 59.8%;\n  }\n  .dark {\n    --background: 0 0% 3.9%;\n    --foreground: 0 0% 98%;\n    --card: 0 0% 3.9%;\n    --card-foreground: 0 0% 98%;\n    --popover: 0 0% 3.9%;\n    --popover-foreground: 0 0% 98%;\n    --primary: 0 0% 98%;\n    --primary-foreground: 0 0% 9%;\n    --secondary: 0 0% 14.9%;\n    --secondary-foreground: 0 0% 98%;\n    --muted: 0 0% 14.9%;\n    --muted-foreground: 0 0% 63.9%;\n    --accent: 0 0% 14.9%;\n    --accent-foreground: 0 0% 98%;\n    --destructive: 0 62.8% 30.6%;\n    --destructive-foreground: 0 0% 98%;\n    --border: 0 0% 14.9%;\n    --input: 0 0% 14.9%;\n    --ring: 0 0% 83.1%;\n    --chart-1: 220 70% 50%;\n    --chart-2: 160 60% 45%;\n    --chart-3: 30 80% 55%;\n    --chart-4: 280 65% 60%;\n    --chart-5: 340 75% 55%;\n    --sidebar-background: 240 5.9% 10%;\n    --sidebar-foreground: 240 4.8% 95.9%;\n    --sidebar-primary: 224.3 76.3% 48%;\n    --sidebar-primary-foreground: 0 0% 100%;\n    --sidebar-accent: 240 3.7% 15.9%;\n    --sidebar-accent-foreground: 240 4.8% 95.9%;\n    --sidebar-border: 240 3.7% 15.9%;\n    --sidebar-ring: 217.2 91.2% 59.8%;\n  }\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    @apply bg-background text-foreground;\n  }\n}\n"
    },
    "types": {
      "index.ts": "export interface Wine {\n  id_vino: string;\n  nombre: string;\n  precio: number;\n  url_imagen: string;\n  descripcion: string;\n  nivel_alcohol: number;\n  variedades: string[];\n  pais_importacion: string;\n  color_vino: string;\n  stock: number;\n  capacidad: number;\n  wine_details: Winedetails;\n}\n\nexport interface Winedetails {\n  bodega: string;\n  id_vino: string;\n  id_detalle: string;\n  notas_cata: string;\n  tipo_crianza: string;\n  contenido_azucar: string;\n  contenido_carbonico: string;\n}\n\nexport interface Consumibles {\n  id: string;\n  nombre: string;\n  url_imagen: string;\n  descripcion: string;\n  precio: number;\n}\n\nexport interface CartItem {\n  id: string\n  quantity: number\n}\n\nexport interface CartItemWithWine extends Wine {\n  quantity: number\n}\n\nexport interface User {\n  id: string\n  email: string\n  password: string\n  name: string\n  isAdmin: boolean\n}\n\nexport interface AuthContextType {\n  user: User | null\n  isLoggedIn: boolean\n  login: (email: string) => Promise<void>\n  logout: () => void\n  isLoading: boolean\n  isProcessingMagicLink: boolean\n  updateUserRole: (userId: string, isAdmin: boolean) => Promise<void>\n}\n\nexport interface FilterState {\n  selectedVariedades: string[]\n  selectedBodegas: string[]\n  selectedPaises: string[]\n  selectedColores: string[]\n  priceRange: {\n    min: number\n    max: number\n  }\n}\n\n\nexport interface WineTableProps {\n  wines?: Wine[];\n  onWinesChange?: (wines: Wine[]) => void;\n  className?: string;\n}"
    },
    "utils": {
      "price.ts": "(binary)"
    }
  },
  "tailwind.config.ts": "import type { Config } from \"tailwindcss\"\n\nconst config: Config = {\n  darkMode: [\"class\"],\n  content: [\n    \"./pages/**/*.{ts,tsx}\",\n    \"./components/**/*.{ts,tsx}\",\n    \"./app/**/*.{ts,tsx}\",\n    \"./src/**/*.{ts,tsx}\",\n    \"*.{js,ts,jsx,tsx,mdx}\",\n  ],\n  prefix: \"\",\n  theme: {\n    container: {\n      center: true,\n      padding: \"2rem\",\n      screens: {\n        \"2xl\": \"1400px\",\n      },\n    },\n    extend: {\n      colors: {\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n        wine: {\n          50: '#fdf2f4',\n          100: '#fce7ea',\n          200: '#f9d0d7',\n          300: '#f5a8b5',\n          400: '#ef758d',\n          500: '#e54666',\n          600: '#d12953',\n          700: '#b01e43',\n          800: '#94193d',\n          900: '#800020',\n          950: '#470a15',\n        },\n        amber: {\n          50: '#fffbeb',\n          100: '#fef3c7',\n          200: '#fde68a',\n          300: '#fcd34d',\n          400: '#fbbf24',\n          500: '#FFBF00',\n          600: '#d97706',\n          700: '#b45309',\n          800: '#92400e',\n          900: '#78350f',\n          950: '#451a03',\n        }\n      },\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\")],\n} satisfies Config\n\nexport default config\n",
  "tsconfig.json": "{\n  \"compilerOptions\": {\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"allowJs\": true,\n    \"target\": \"es2017\",\n    \"skipLibCheck\": true,\n    \"strict\": true,\n    \"noEmit\": true,\n    \"esModuleInterop\": true,\n    \"module\": \"esnext\",\n    \"moduleResolution\": \"bundler\",\n    \"resolveJsonModule\": true,\n    \"isolatedModules\": true,\n    \"jsx\": \"preserve\",\n    \"incremental\": true,\n    \"plugins\": [\n      {\n        \"name\": \"next\"\n      }\n    ],\n    \"paths\": {\n      \"@/*\": [\"./src/*\"]\n    }\n  },\n  \"include\": [\"next-env.d.ts\", \"**/*.ts\", \"**/*.tsx\", \".next/types/**/*.ts\"],\n  \"exclude\": [\"node_modules\"]\n}\n"
}