#!/usr/bin/env node

const { createClient } = require('@supabase/supabase-js');
// require('dotenv').config({ path: '.env.local' }); // Eliminado: no usar dotenv

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

console.log('üîç Verificando configuraci√≥n de Supabase...\n');

// Verificar variables de entorno
console.log('1. Variables de entorno:');
console.log(`   URL: ${supabaseUrl ? '‚úÖ Configurada' : '‚ùå No configurada'}`);
console.log(`   Anon Key: ${supabaseAnonKey ? '‚úÖ Configurada' : '‚ùå No configurada'}`);

if (!supabaseUrl || !supabaseAnonKey) {
  console.log('\n‚ùå Error: Variables de entorno faltantes');
  console.log('   Crea un archivo .env.local con las siguientes variables:');
  console.log('   NEXT_PUBLIC_SUPABASE_URL=https://your-project.supabase.co');
  console.log('   NEXT_PUBLIC_SUPABASE_ANON_KEY=your-anon-key-here');
  process.exit(1);
}

// Crear cliente de Supabase
const supabase = createClient(supabaseUrl, supabaseAnonKey);

async function checkConnection() {
  console.log('\n2. Conexi√≥n a Supabase:');
  
  try {
    const { data, error } = await supabase
      .from('wines')
      .select('id_vino')
      .limit(1);

    if (error) {
      console.log(`   ‚ùå Error de conexi√≥n: ${error.message}`);
      return false;
    }

    console.log('   ‚úÖ Conexi√≥n exitosa');
    console.log(`   ‚úÖ Acceso a tabla 'wines': ${data !== null ? 'S√≠' : 'No'}`);
    return true;
  } catch (error) {
    console.log(`   ‚ùå Error de conexi√≥n: ${error.message}`);
    return false;
  }
}

async function checkRealtime() {
  console.log('\n3. Verificaci√≥n de Realtime:');
  
  return new Promise((resolve) => {
    const channel = supabase
      .channel('config-test')
      .on('postgres_changes', { event: '*', schema: 'public', table: 'wines' }, () => {})
      .subscribe((status) => {
        if (status === 'SUBSCRIBED') {
          console.log('   ‚úÖ Realtime funcionando correctamente');
          supabase.removeChannel(channel);
          resolve(true);
        } else if (status === 'CHANNEL_ERROR') {
          console.log('   ‚ùå Error en Realtime');
          supabase.removeChannel(channel);
          resolve(false);
        }
      });

    // Timeout despu√©s de 10 segundos
    setTimeout(() => {
      console.log('   ‚ö†Ô∏è  Timeout en verificaci√≥n de Realtime');
      supabase.removeChannel(channel);
      resolve(false);
    }, 10000);
  });
}

async function main() {
  const connectionOk = await checkConnection();
  
  if (connectionOk) {
    await checkRealtime();
  }

  console.log('\nüìã Resumen:');
  console.log('   - Variables de entorno: ‚úÖ');
  console.log(`   - Conexi√≥n: ${connectionOk ? '‚úÖ' : '‚ùå'}`);
  
  if (connectionOk) {
    console.log('   - Realtime: Verificado');
  }

  console.log('\nüí° Si hay problemas:');
  console.log('   1. Verifica que tu proyecto de Supabase est√© activo');
  console.log('   2. Aseg√∫rate de que Realtime est√© habilitado en Database > Replication');
  console.log('   3. Verifica las pol√≠ticas RLS en la tabla wines');
  console.log('   4. Consulta el archivo SUPABASE_SETUP.md para m√°s detalles');
}

main().catch(console.error); 